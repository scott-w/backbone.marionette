{"version":3,"sources":["backbone.marionette.min.js","/source/src/bind-entity-events.js","/source/src/bind-radio-requests.js","/source/src/trigger-method.js","/source/src/config/features.js","/source/src/monitor-view-events.js","/source/src/config/behaviors-lookup.js","/source/src/utils/getUniqueEventName.js","/source/src/mixins/triggers.js","/source/src/mixins/behaviors.js","/source/src/utils/extend.js","/source/src/error.js","/source/src/utils/_proxy.js","/source/src/utils/normalizeMethods.js","/source/src/utils/mergeOptions.js","/source/src/utils/getOption.js","/source/src/utils/isNodeAttached.js","/source/src/utils/deprecate.js","/source/src/mixins/radio.js","/source/src/utils/_setOptions.js","/source/src/utils/getValue.js","/source/src/mixins/common.js","/source/src/object.js","/source/src/region.js","/source/src/application.js","/source/src/app-router.js","/source/src/template-cache.js","/source/src/renderer.js","/source/src/mixins/regions.js","/source/src/mixins/ui.js","/source/src/mixins/delegate-entity-events.js","/source/src/mixins/view.js","/source/src/view.js","/source/src/collection-view.js","/source/src/composite-view.js","/source/src/behavior.js","/source/src/backbone.marionette.js"],"names":["global","factory","exports","module","require","define","amd","Marionette","Mn","Backbone","_","ChildViewContainer","Radio","this","_$1","bindFromStrings","target","entity","evt","methods","actionName","methodNames","split","each","methodName","method","MarionetteError","iterateEvents","bindings","isObject","message","url","isString","bindEntityEvents","unbindEntityEvents","iterateReplies","channel","normalizedRadioRequests","normalizeMethods","call","bindRadioRequests","unbindRadioRequests","getEventName","match","prefix","eventName","toUpperCase","triggerMethod","event","result","replace","splitter","getOption","_len","arguments","length","args","Array","_key","isFunction","apply","trigger","concat","triggerMethodOn","context","fnc","_len2","_key2","triggerMethodMany","targets","_len3","_key3","undefined","isEnabled","name","FEATURES","setEnabled","state","triggerMethodChildren","view","beforeEachTrigger","_getImmediateChildren","child","setIsAttached","_isAttached","unsetIsAttached","MonitorViewEvents","handleBeforeAttach","handleAttach","triggerDOMRefresh","handleBeforeDetach","handleDetach","handleRender","_isRendered","_areViewEventsMonitored","on","before:attach","attach","before:detach","detach","render","behaviorsLookup","uniqueName","selector","uniqueId","join","buildViewTrigger","triggerDef","shouldPreventDefault","preventDefault","shouldStopPropagation","stopPropagation","e","getBehaviorClass","options","key","behaviorClass","getValue","Behaviors","parseBehaviors","behaviors","chain","map","BehaviorClass","_options","behavior","nestedBehaviors","flatten","value","previousChildViewContainer","Container","views","_views","_indexByModel","_indexByCustom","_updateLength","add","extend","prototype","customIndex","viewCid","cid","model","findByModel","findByModelCid","modelCid","findByCid","findByCustom","index","findByIndex","values","remove","any","tail","size","toArray","VERSION","noConflict","removeHandler","store","callback","_callback","removeHandlers","names","keys","matched","i","_partial","channelName","_logs","partial","log","makeCallback","previousRadio","DEBUG","_debugText","warning","debugLog","console","warn","eventSplitter","_eventsApi","obj","action","rest","results","test","l","_callHandler","a1","a2","a3","tuneIn","_tunedIn","tuneOut","off","Requests","request","requests","_requests","handler","reply","replyOnce","self","once","stopReplying","_channels","Error","Channel","Events","reset","stopListening","systems","Commands","system","channels","invoke","backbone_radio","babelHelpers","toConsumableArray","arr","isArray","arr2","from","version","Model","errorProps","urlRoot","constructor","error","pick","captureStackTrace","toString","proxy","hash","reduce","normalizedHash","mergeOptions","optionName","isNodeAttached","el","$","contains","document","documentElement","deprecate","prev","next","DEV_MODE","_cache","_warn","_console","RadioMixin","_initRadio","_channel","radioEvents","bindRadioEvents","radioRequests","_destroyRadio","getChannel","unbindRadioEvents","_setOptions","CommonMixin","MarionetteObject","cidPrefix","initialize","_isDestroyed","isDestroyed","destroy","Region","replaceElement","_isReplaced","_initEl","$el","getEl","show","_ensureElement","_ensureView","currentView","empty","_parent","_renderView","_attachView","supportsRenderLifecycle","shouldTriggerAttach","shouldReplaceEl","attachHtml","_replaceEl","_restoreEl","parent","parentNode","replaceChild","isReplaced","shouldReplace","appendChild","_ref","preventDestroy","shouldPreventDestroy","_detachView","_destroyView","shouldTriggerDetach","contents","supportsDestroyLifecycle","hasView","Application","_initRegion","regionClass","region","RegionClass","_region","getRegion","showView","getView","start","AppRouter","Router","appRoutes","controller","_getController","processAppRoutes","_processOnRoute","appRoute","route","_addAppRoute","routeName","routeArgs","onRoute","routePath","invert","routeNames","reverse","bind","TemplateCache","templateId","templateCaches","get","cachedTemplate","load","clear","compiledTemplate","template","loadTemplate","compileTemplate","$template","html","rawTemplate","Renderer","data","templateFunc","RegionsMixin","_initRegions","regions","_regions","addRegions","_reInitRegions","addRegion","definition","isEmpty","normalizeUIValues","_addRegions","regionDefinitions","_buildRegion","_addRegion","_buildRegionFromDefinition","_buildRegionFromObject","_buildRegionFromRegionClass","omit","defaults","parentEl","removeRegion","_removeRegion","removeRegions","getRegions","emptyRegions","hasRegion","clone","showChildView","getChildView","_normalizeUIKeys","ui","memo","val","normalizedKey","normalizeUIString","uiString","r","slice","_normalizeUIValues","properties","property","propertyVal","UIMixin","normalizeUIKeys","uiBindings","_getUIBindings","_bindUIElements","_uiBindings","_ui","_unbindUIElements","_getUI","delegateEventSplitter","getUniqueEventName","TriggersMixin","_getViewTriggers","triggers","events","DelegateEntityEventsMixin","_delegateEntityEvents","collection","_undelegateEntityEvents","modelEvents","collectionEvents","BehaviorsMixin","_initBehaviors","_behaviors","_getBehaviorTriggers","_getBehaviorEvents","_proxyBehaviorViewProperties","_delegateBehaviorEntityEvents","_undelegateBehaviorEntityEvents","_destroyBehaviors","_bindBehaviorUIElements","_unbindBehaviorUIElements","_triggerEventOnBehaviors","ViewMixin","isRendered","isAttached","mixinTemplateContext","templateContext","delegateEvents","eventsArg","_buildEventProxies","viewEvents","_getEvents","combinedEvents","getTriggers","View","delegateEntityEvents","undelegateEntityEvents","_ensureViewIsIntact","unbindUIElements","_removeElement","_removeChildren","bindUIElements","getUI","childViewEventPrefix","ret","_triggerEventOnParentLayout","_childViewEvents","_childViewTriggers","layoutView","_parentView","eventPrefix","prefixedEventName","childViewEvents","childViewTriggers","serializeData","serializeModel","items","serializeCollection","attributes","_renderTemplate","getTemplate","attachElContent","pluck","compact","CollectionView","sort","_initialEvents","_initChildViewStorage","_bufferedChildren","_startBuffering","_isBuffering","_endBuffering","attachBuffer","_createBuffer","listenTo","_onCollectionAdd","_onCollectionRemove","_sortViews","opts","at","indexOf","_filteredSortedModels","_shouldAddChild","_destroyEmptyView","ChildView","_getChildView","_addChild","children","_removeChildView","_checkEmpty","_renderChildren","setFilter","filter","preventRender","viewCanBeRendered","previousModels","models","_applyModelDeltas","removeFilter","currentIds","addedChildNotExists","prevModel","removedChildExists","reorder","_this","anyModelsAdded","some","elsToReorder","_index","filteredOutViews","_appendReorderedChildren","resortView","orderChanged","find","item","_emptyViewIndex","append","_destroyChildren","checkEmpty","processedModels","_showEmptyView","_showCollection","addedAt","viewComparator","getViewComparator","Math","min","max","addedModel","_sortModelsBy","splice","_filterModels","comparator","sortBy","EmptyView","getEmptyView","_showingEmptyView","emptyViewOptions","_buildChildView","_addChildView","childView","childViewOptions","_updateIndices","increment","laterView","_proxyChildEvents","ChildViewClass","collectionView","buffer","elBuffer","createDocumentFragment","b","_insertBefore","_insertAfter","findPosition","before","_ref2","shouldCheckEmpty","childViews","identity","childEventName","CompositeView","renderChildren","_isRendering","resetChildViewContainer","compositeView","$container","getChildViewContainer","containerView","$childViewContainer","container","childViewContainer","charAt","substr","MixinFromView","Behavior","proxyViewProperties","getEvents","behaviorEvents","behaviorHandler","behaviorTriggers","previousMarionette","Object"],"mappings":"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wG,SAASxG,KAAKuC,UAAU,e/B84DhDvC,M+B74DIqB,mBAAmBrB,KAAKiI,MAAO4Q,E/B+4DnC,I+B74DKC,GAAmB9Y,KAAKwG,SAASxG,KAAKuC,UAAU,oB/Bm5DrD,OALAvC,M+B74DIqB,mBAAmBrB,KAAK2Y,WAAYG,G/Bg5DxC9Y,K+B74DIsZ,kCAEEtZ,M/Bi5DR0a,oB+B74DoB,W/B84DlB,G+B74DG1a,KAAK6P,a/B84DN,K+B74DK,IAAIhP,I/B84DPgD,K+B74DK,qB/B84DL5C,Q+B74DQ,eAAiBjB,KAAKgI,IAAM,uD/Bm5D1C+H,Q+B74DQ,W/B84DN,G+B74DG/P,KAAK6P,a/B84DN,M+B94D6B7P,K/Bk5D/B,KAAK,G+Bj5DA+R,KAAwB/R,KAAKuE,Y/Bi5DzB/B,EAAOC,UAAUC,O+Bn5DRC,EAAIC,MAAAJ,GAAAK,EAAA,EAAAL,EAAAK,EAAAA,I/Bo5DpBF,E+Bp5DoBE,GAAAJ,UAAAI,E/Bm7DtB,OA5BA7C,M+Bn5DIkC,cAAaa,MAAlB/C,MAAmB,kBAAgBiD,OAAKN,IACpCoP,G/Bo5DD/R,K+Bn5DIkC,cAAc,gBAAiBlC,M/Bu5DrCA,K+Bn5DI2a,mB/Bu5DJ3a,K+Bn5DI4a,iBAED7I,I/Bo5DD/R,K+Bn5DIuE,aAAc,E/Bo5DlBvE,K+Bn5DIkC,cAAc,SAAUlC,O/Bu5D9BA,K+Bn5DI6a,kB/Bq5DJ7a,K+Bn5DIuZ,kBAAkB5W,G/Bq5DtB3C,K+Bn5DI6P,cAAe,E/Bo5DnB7P,K+Bn5DIgF,aAAc,E/Bo5DlBhF,K+Bn5DIkC,cAAaa,MAAlB/C,MAAmB,WAASiD,OAAKN,I/Bq5DhC3C,K+Bn5DIsM,gBAEEtM,M/Bs5DR8a,e+Bn5De,W/Bu5Db,MAHA9a,M+Bn5DI8X,kB/Bo5DJ9X,K+Bn5DIwZ,0BAEExZ,M/Bu5DR2a,iB+Bn5DiB,W/Bu5Df,MAHA3a,M+Bn5DIiY,oB/Bo5DJjY,K+Bn5DIyZ,4BAEEzZ,M/Bs5DR+a,M+Bn5DM,SAASlX,G/Bq5Db,MADA7D,M+Bn5DI0a,sBACE1a,KAAKkY,OAAOrU,I/Bw5DpBmX,qB+Bn5DqB,Y/Bu5DrB9Y,c+Bn5Dc,W/Bo5DZ,IAAK,GAAImB,GAAQZ,UAAUC,O+Bp5DHC,EAAIC,MAAAS,GAAAC,EAAA,EAAAD,EAAAC,EAAAA,I/Bq5D1BX,E+Br5D0BW,GAAAb,UAAAa,E/Bw5D5B,I+Bv5DK2X,GAAM/Y,EAAca,MAAM/C,KAAM2C,E/B45DrC,OAHA3C,M+Bv5DI0Z,yBAAwB3W,MAA7B/C,KAAiC2C,G/Bw5DhC3C,K+Bv5DIkb,4BAA2BnY,MAAhC/C,KAAoC2C,GAE7BsY,G/B25DRf,mB+Bv5DmB,W/Bw5DjBla,K+Bv5DImb,iBAAmBnb,KAAKwG,SAASxG,KAAKuC,UAAU,oB/Bw5DpDvC,K+Bv5DIob,mBAAqBpb,KAAKwG,SAASxG,KAAKuC,UAAU,uB/B05DxD2Y,4B+Bv5D4B,SAASlZ,G/Bw5DnC,G+Bv5DKqZ,GAAarb,KAAKsb,a/Bw5DvB,I+Bv5DID,E/Bu5DJ,CAQA,IAAK,G+B15DAE,GAAcF,EAAW9Y,UAAU,wBACnCiZ,EAAoBD,EAAc,IAAMvZ,E/By5DpCyB,EAAQhB,UAAUC,O+Bj6DsBC,EAAIC,MAAAa,EAAA,EAAAA,EAAA,EAAA,GAAAC,EAAA,EAAAD,EAAAC,EAAAA,I/Bk6DnDf,E+Bl6DmDe,EAAA,GAAAjB,UAAAiB,E/Bq6DrD2X,G+B35DUnZ,cAAaa,MAAxBsY,GAAyBG,GAAiBvY,OAAKN,G/B85D9C,I+B35DK8Y,GAAkBJ,EAAW5Z,iBAAiB4Z,EAAWF,iBAEzDM,IAAmBxb,EAAE6C,WAAW2Y,EAAgBzZ,K/B45DnDyZ,E+B35DezZ,GAAWe,MAAMsY,EAAY1Y,E/B+5D9C,I+B35DK+Y,GAAoBL,EAAWD,kBAGjCM,IAAqBzb,EAAEkB,SAASua,EAAkB1Z,K/B45DnDqZ,E+B35DUnZ,cAAaa,MAAxBsY,GAAyBK,EAAkB1Z,IAAUiB,OAAKN,M/Bi6D7D2Y,Y+B35DY,W/B85DV,IAFA,G+B35DGlK,GAASpR,KAAK2Q,QAEXS,GAAQ,C/B45DZ,G+B35DGA,YAAkBmJ,I/B45DnB,M+B35DMnJ,E/B65DRA,G+B35DQA,EAAOT,U/Bg6DrB1Q,G+B35DC2H,OAAO+R,GAAWZ,GAAgBtJ,EAAagJ,GAA2BJ,GAAgBX,GC5O5F,IAAI6C,IAAO3a,EAAS2a,KAAK3S,QhC6oEtB2F,YgC3oEU,SAAClH,GhC4oETrG,KgC3oEIuF,OAAStF,EAAE6T,KAAK9T,KAAKuF,OAAQvF,MhC6oEjCA,KgC3oEIwP,YAAYnJ,GhC6oEhB5B,EgC3oEiBzE,MhC6oEjBA,KgC3oEIgZ,iBhC4oEJhZ,KgC3oEIiV,ehC6oEJrV,EgC3oEQ2a,KAAK1S,UAAU0F,YAAY7L,KAAK1B,KAAMA,KAAKqG,ShC6oEnDrG,KgC3oEIwa,wBhCgpENmB,cgC3oEY,WhC4oEV,MgC3oEI3b,MAAKiI,OAAUjI,KAAK2Y,WAKrB3Y,KAAKiI,MACAjI,KAAK4b,kBhCipEXC,MgC3oEM7b,KAAK8b,2BhCmpEfF,egC3oEa,WhC4oEX,MgC3oEI5b,MAAKiI,MACHhI,EAAEyW,MAAM1W,KAAKiI,MAAM8T,gBhCkpE3BD,oBgC7oEkB,WhC8oEhB,MgC7oEI9b,MAAK2Y,WACH3Y,KAAK2Y,WAAW9R,IAAI,SAASoB,GhCgpEjC,MgChpEiDhI,GAAEyW,MAAMzO,EAAM8T,kBhC2pEnExW,OgCjpEK,WhCkqEH,MAhBAvF,MgCjpEI0a,sBhCmpEJ1a,KgCjpEIkC,cAAc,gBAAiBlC,MAIhCA,KAAKgF,ahCkpENhF,KgCjpEIqV,iBhCopENrV,KgCjpEIgc,kBhCkpEJhc,KgCjpEI8a,iBhCmpEJ9a,KgCjpEIgF,aAAc,EhCkpElBhF,KgCjpEIkC,cAAc,SAAUlC,MAEtBA,MhCspERgc,gBgCjpEc,WhCkpEZ,GgCjpEGzH,GAAWvU,KAAKic,ahCopEnB,IgCjpEG1H,KAAa,EhCipEhB,CAKA,GgCjpEGO,GAAO9U,KAAK8Z,qBAAqB9Z,KAAK2b,iBAGtChH,EAAOE,EAAStP,OAAOgP,EAAUO,EAAM9U,KhCkpE1CA,MgCjpEIkc,gBAAgBvH,KhCwpEtBsH,YgCjpEU,WhCkpER,MgCjpEMjc,MAAKuC,UAAU,ahCgqEvB2Z,gBgCjpEc,SAACvH,GhCopEb,MAFA3U,MgCjpEIoQ,IAAIuE,KAAKA,GAEP3U,MhCqpER6a,gBgCjpEc,WhCkpEZ7a,KgCjpEIsW,iBhCopENlS,sBgCjpEsB,WhCkpEpB,MgCj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jB,MAAKuN,alC28FfoO,ckC57FY,WlC67FV,MkC57FM3b,MAAK4b,kBlCg8FbrW,OkC57FK,WlC08FH,MAbAvF,MkC57FI0a,sBlC67FJ1a,KkC57FIwiB,cAAe,ElC67FnBxiB,KkC57FIyiB,0BlC87FJziB,KkC57FIkC,cAAc,gBAAiBlC,MlC87FnCA,KkC57FIgc,kBlC67FJhc,KkC57FI8a,iBlC67FJ9a,KkC57FIuiB,iBlC87FJviB,KkC57FIwiB,cAAe,ElC67FnBxiB,KkC57FIgF,aAAc,ElC67FlBhF,KkC57FIkC,cAAc,SAAUlC,MACtBA,MlC+7FRuiB,ekC57Fa,YACRviB,KAAKgF,aAAehF,KAAKwiB,elC67F1BnG,GkC57FcxU,UAAUkW,gBAAgBrc,KAAK1B,OlCi8FjD6c,akC57FW,SAAC6F,EAAejB,GlC67FzB,GkC57FGkB,GAAa3iB,KAAK4iB,sBAAsBF,ElC67F3CC,GkC57FUlD,OAAOgC,IlCk8FnBK,akC57FW,SAACb,GlC67FV,GkC57FG0B,GAAa3iB,KAAK4iB,sBAAsB5iB,KAAMihB,ElC67FjD0B,GkC57FUlD,OAAOwB,EAAU9S,KlCk8F7BgR,yBkC57FuB,SAACvB,GlC67FtB,GkC57FG+E,GAAa3iB,KAAK4iB,sBAAsB5iB,KlC67F3C2iB,GkC57FUlD,OAAO7B,IlCi8FnBgF,sBkC57FoB,SAACC,EAAe5B,GlC67FlC,GkC57FK4B,EAAcC,oBlC67FjB,MkC57FMD,GAAcC,mBlC+7FtB,IkC57FGC,GACAC,EAAqBzgB,EAAUb,KAAKmhB,EAAe,qBlC67FtD,IkC57FGG,EAAoB,ClC87FrB,GkC57FGtd,GAAWc,EAAS9E,KAAKmhB,EAAeG,ElCo8F3C,IALED,EkC77FwB,MAAvBrd,EAASud,OAAO,IAAcJ,EAAc/L,GAClC+L,EAAc/L,GAAGpR,EAASwd,OAAO,IAEjCL,EAAczU,EAAE1I,GAG1Bqd,EAAUrgB,QAAU,ElC67FrB,KkC57FK,IAAI7B,IlC67FPgD,KkC57FK,iClC67FL5C,QkC57FQ,qDAAuD4hB,EAAcG,yBlCg8FjFD,GkC37FWF,EAAczS,GlC+7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","file":"backbone.marionette.min.js","sourcesContent":["// MarionetteJS (Backbone.Marionette)\n// ----------------------------------\n// v3.0.0\n//\n// Copyright (c)2016 Derick Bailey, Muted Solutions, LLC.\n// Distributed under MIT license\n//\n// http://marionettejs.com\n\n\n/*!\n* Includes BabySitter\n* https://github.com/marionettejs/backbone.babysitter/\n*\n* Includes Radio\n* https://github.com/marionettejs/backbone.radio/\n*/\n\n\n\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('backbone'), require('underscore'), require('backbone.babysitter'), require('backbone.radio')) :\n\ttypeof define === 'function' && define.amd ? define(['backbone', 'underscore', 'backbone.babysitter', 'backbone.radio'], factory) :\n\tglobal.Marionette  = global.Mn = factory(global.Backbone,global._,global.Backbone.ChildViewContainer,global.Backbone.Radio);\n}(this, function (Backbone,_$1,ChildViewContainer,Radio) { 'use strict';\n\n\tBackbone = 'default' in Backbone ? Backbone['default'] : Backbone;\n\t_$1 = 'default' in _$1 ? _$1['default'] : _$1;\n\tChildViewContainer = 'default' in ChildViewContainer ? ChildViewContainer['default'] : ChildViewContainer;\n\tRadio = 'default' in Radio ? Radio['default'] : Radio;\n\n\t// Backbone.BabySitter\n\t// -------------------\n\t// v0.1.10\n\t//\n\t// Copyright (c)2015 Derick Bailey, Muted Solutions, LLC.\n\t// Distributed under MIT license\n\t//\n\t// http://github.com/marionettejs/backbone.babysitter\n\t(function(Backbone, _) {\n\t  \"use strict\";\n\t  var previousChildViewContainer = Backbone.ChildViewContainer;\n\t  // BabySitter.ChildViewContainer\n\t  // -----------------------------\n\t  //\n\t  // Provide a container to store, retrieve and\n\t  // shut down child views.\n\t  Backbone.ChildViewContainer = function(Backbone, _) {\n\t    // Container Constructor\n\t    // ---------------------\n\t    var Container = function(views) {\n\t      this._views = {};\n\t      this._indexByModel = {};\n\t      this._indexByCustom = {};\n\t      this._updateLength();\n\t      _.each(views, this.add, this);\n\t    };\n\t    // Container Methods\n\t    // -----------------\n\t    _.extend(Container.prototype, {\n\t      // Add a view to this container. Stores the view\n\t      // by `cid` and makes it searchable by the model\n\t      // cid (and model itself). Optionally specify\n\t      // a custom key to store an retrieve the view.\n\t      add: function(view, customIndex) {\n\t        var viewCid = view.cid;\n\t        // store the view\n\t        this._views[viewCid] = view;\n\t        // index it by model\n\t        if (view.model) {\n\t          this._indexByModel[view.model.cid] = viewCid;\n\t        }\n\t        // index by custom\n\t        if (customIndex) {\n\t          this._indexByCustom[customIndex] = viewCid;\n\t        }\n\t        this._updateLength();\n\t        return this;\n\t      },\n\t      // Find a view by the model that was attached to\n\t      // it. Uses the model's `cid` to find it.\n\t      findByModel: function(model) {\n\t        return this.findByModelCid(model.cid);\n\t      },\n\t      // Find a view by the `cid` of the model that was attached to\n\t      // it. Uses the model's `cid` to find the view `cid` and\n\t      // retrieve the view using it.\n\t      findByModelCid: function(modelCid) {\n\t        var viewCid = this._indexByModel[modelCid];\n\t        return this.findByCid(viewCid);\n\t      },\n\t      // Find a view by a custom indexer.\n\t      findByCustom: function(index) {\n\t        var viewCid = this._indexByCustom[index];\n\t        return this.findByCid(viewCid);\n\t      },\n\t      // Find by index. This is not guaranteed to be a\n\t      // stable index.\n\t      findByIndex: function(index) {\n\t        return _.values(this._views)[index];\n\t      },\n\t      // retrieve a view by its `cid` directly\n\t      findByCid: function(cid) {\n\t        return this._views[cid];\n\t      },\n\t      // Remove a view\n\t      remove: function(view) {\n\t        var viewCid = view.cid;\n\t        // delete model index\n\t        if (view.model) {\n\t          delete this._indexByModel[view.model.cid];\n\t        }\n\t        // delete custom index\n\t        _.any(this._indexByCustom, function(cid, key) {\n\t          if (cid === viewCid) {\n\t            delete this._indexByCustom[key];\n\t            return true;\n\t          }\n\t        }, this);\n\t        // remove the view from the container\n\t        delete this._views[viewCid];\n\t        // update the length\n\t        this._updateLength();\n\t        return this;\n\t      },\n\t      // Call a method on every view in the container,\n\t      // passing parameters to the call method one at a\n\t      // time, like `function.call`.\n\t      call: function(method) {\n\t        this.apply(method, _.tail(arguments));\n\t      },\n\t      // Apply a method on every view in the container,\n\t      // passing parameters to the call method one at a\n\t      // time, like `function.apply`.\n\t      apply: function(method, args) {\n\t        _.each(this._views, function(view) {\n\t          if (_.isFunction(view[method])) {\n\t            view[method].apply(view, args || []);\n\t          }\n\t        });\n\t      },\n\t      // Update the `.length` attribute on this container\n\t      _updateLength: function() {\n\t        this.length = _.size(this._views);\n\t      }\n\t    });\n\t    // Borrowing this code from Backbone.Collection:\n\t    // http://backbonejs.org/docs/backbone.html#section-106\n\t    //\n\t    // Mix in methods from Underscore, for iteration, and other\n\t    // collection related features.\n\t    var methods = [ \"forEach\", \"each\", \"map\", \"find\", \"detect\", \"filter\", \"select\", \"reject\", \"every\", \"all\", \"some\", \"any\", \"include\", \"contains\", \"invoke\", \"toArray\", \"first\", \"initial\", \"rest\", \"last\", \"without\", \"isEmpty\", \"pluck\", \"reduce\" ];\n\t    _.each(methods, function(method) {\n\t      Container.prototype[method] = function() {\n\t        var views = _.values(this._views);\n\t        var args = [ views ].concat(_.toArray(arguments));\n\t        return _[method].apply(_, args);\n\t      };\n\t    });\n\t    // return the public API\n\t    return Container;\n\t  }(Backbone, _);\n\t  Backbone.ChildViewContainer.VERSION = \"0.1.10\";\n\t  Backbone.ChildViewContainer.noConflict = function() {\n\t    Backbone.ChildViewContainer = previousChildViewContainer;\n\t    return this;\n\t  };\n\t  return Backbone.ChildViewContainer;\n\t})(Backbone, _);// Backbone.Radio v1.0.2\n\t(function(_, Backbone) {\n\t  \"use strict\";\n\t  var previousRadio = Backbone.Radio;\n\t  var Radio = Backbone.Radio = {};\n\t  Radio.VERSION = \"1.0.2\";\n\t  // This allows you to run multiple instances of Radio on the same\n\t  // webapp. After loading the new version, call `noConflict()` to\n\t  // get a reference to it. At the same time the old version will be\n\t  // returned to Backbone.Radio.\n\t  Radio.noConflict = function() {\n\t    Backbone.Radio = previousRadio;\n\t    return this;\n\t  };\n\t  // Whether or not we're in DEBUG mode or not. DEBUG mode helps you\n\t  // get around the issues of lack of warnings when events are mis-typed.\n\t  Radio.DEBUG = false;\n\t  // Format debug text.\n\t  Radio._debugText = function(warning, eventName, channelName) {\n\t    return warning + (channelName ? \" on the \" + channelName + \" channel\" : \"\") + ': \"' + eventName + '\"';\n\t  };\n\t  // This is the method that's called when an unregistered event was called.\n\t  // By default, it logs warning to the console. By overriding this you could\n\t  // make it throw an Error, for instance. This would make firing a nonexistent event\n\t  // have the same consequence as firing a nonexistent method on an Object.\n\t  Radio.debugLog = function(warning, eventName, channelName) {\n\t    if (Radio.DEBUG && console && console.warn) {\n\t      console.warn(Radio._debugText(warning, eventName, channelName));\n\t    }\n\t  };\n\t  var eventSplitter = /\\s+/;\n\t  // An internal method used to handle Radio's method overloading for Requests.\n\t  // It's borrowed from Backbone.Events. It differs from Backbone's overload\n\t  // API (which is used in Backbone.Events) in that it doesn't support space-separated\n\t  // event names.\n\t  Radio._eventsApi = function(obj, action, name, rest) {\n\t    if (!name) {\n\t      return false;\n\t    }\n\t    var results = {};\n\t    // Handle event maps.\n\t    if (typeof name === \"object\") {\n\t      for (var key in name) {\n\t        var result = obj[action].apply(obj, [ key, name[key] ].concat(rest));\n\t        eventSplitter.test(key) ? _.extend(results, result) : results[key] = result;\n\t      }\n\t      return results;\n\t    }\n\t    // Handle space separated event names.\n\t    if (eventSplitter.test(name)) {\n\t      var names = name.split(eventSplitter);\n\t      for (var i = 0, l = names.length; i < l; i++) {\n\t        results[names[i]] = obj[action].apply(obj, [ names[i] ].concat(rest));\n\t      }\n\t      return results;\n\t    }\n\t    return false;\n\t  };\n\t  // An optimized way to execute callbacks.\n\t  Radio._callHandler = function(callback, context, args) {\n\t    var a1 = args[0], a2 = args[1], a3 = args[2];\n\t    switch (args.length) {\n\t     case 0:\n\t      return callback.call(context);\n\n\t     case 1:\n\t      return callback.call(context, a1);\n\n\t     case 2:\n\t      return callback.call(context, a1, a2);\n\n\t     case 3:\n\t      return callback.call(context, a1, a2, a3);\n\n\t     default:\n\t      return callback.apply(context, args);\n\t    }\n\t  };\n\t  // A helper used by `off` methods to the handler from the store\n\t  function removeHandler(store, name, callback, context) {\n\t    var event = store[name];\n\t    if ((!callback || (callback === event.callback || callback === event.callback._callback)) && (!context || context === event.context)) {\n\t      delete store[name];\n\t      return true;\n\t    }\n\t  }\n\t  function removeHandlers(store, name, callback, context) {\n\t    store || (store = {});\n\t    var names = name ? [ name ] : _.keys(store);\n\t    var matched = false;\n\t    for (var i = 0, length = names.length; i < length; i++) {\n\t      name = names[i];\n\t      // If there's no event by this name, log it and continue\n\t      // with the loop\n\t      if (!store[name]) {\n\t        continue;\n\t      }\n\t      if (removeHandler(store, name, callback, context)) {\n\t        matched = true;\n\t      }\n\t    }\n\t    return matched;\n\t  }\n\t  /*\n\t   * tune-in\n\t   * -------\n\t   * Get console logs of a channel's activity\n\t   *\n\t   */\n\t  var _logs = {};\n\t  // This is to produce an identical function in both tuneIn and tuneOut,\n\t  // so that Backbone.Events unregisters it.\n\t  function _partial(channelName) {\n\t    return _logs[channelName] || (_logs[channelName] = _.partial(Radio.log, channelName));\n\t  }\n\t  _.extend(Radio, {\n\t    // Log information about the channel and event\n\t    log: function log(channelName, eventName) {\n\t      var args = _.rest(arguments, 2);\n\t      console.log(\"[\" + channelName + '] \"' + eventName + '\"', args);\n\t    },\n\t    // Logs all events on this channel to the console. It sets an\n\t    // internal value on the channel telling it we're listening,\n\t    // then sets a listener on the Backbone.Events\n\t    tuneIn: function tuneIn(channelName) {\n\t      var channel = Radio.channel(channelName);\n\t      channel._tunedIn = true;\n\t      channel.on(\"all\", _partial(channelName));\n\t      return this;\n\t    },\n\t    // Stop logging all of the activities on this channel to the console\n\t    tuneOut: function tuneOut(channelName) {\n\t      var channel = Radio.channel(channelName);\n\t      channel._tunedIn = false;\n\t      channel.off(\"all\", _partial(channelName));\n\t      delete _logs[channelName];\n\t      return this;\n\t    }\n\t  });\n\t  /*\n\t   * Backbone.Radio.Requests\n\t   * -----------------------\n\t   * A messaging system for requesting data.\n\t   *\n\t   */\n\t  function makeCallback(callback) {\n\t    return _.isFunction(callback) ? callback : function() {\n\t      return callback;\n\t    };\n\t  }\n\t  Radio.Requests = {\n\t    // Make a request\n\t    request: function request(name) {\n\t      var args = _.rest(arguments);\n\t      var results = Radio._eventsApi(this, \"request\", name, args);\n\t      if (results) {\n\t        return results;\n\t      }\n\t      var channelName = this.channelName;\n\t      var requests = this._requests;\n\t      // Check if we should log the request, and if so, do it\n\t      if (channelName && this._tunedIn) {\n\t        Radio.log.apply(this, [ channelName, name ].concat(args));\n\t      }\n\t      // If the request isn't handled, log it in DEBUG mode and exit\n\t      if (requests && (requests[name] || requests[\"default\"])) {\n\t        var handler = requests[name] || requests[\"default\"];\n\t        args = requests[name] ? args : arguments;\n\t        return Radio._callHandler(handler.callback, handler.context, args);\n\t      } else {\n\t        Radio.debugLog(\"An unhandled request was fired\", name, channelName);\n\t      }\n\t    },\n\t    // Set up a handler for a request\n\t    reply: function reply(name, callback, context) {\n\t      if (Radio._eventsApi(this, \"reply\", name, [ callback, context ])) {\n\t        return this;\n\t      }\n\t      this._requests || (this._requests = {});\n\t      if (this._requests[name]) {\n\t        Radio.debugLog(\"A request was overwritten\", name, this.channelName);\n\t      }\n\t      this._requests[name] = {\n\t        callback: makeCallback(callback),\n\t        context: context || this\n\t      };\n\t      return this;\n\t    },\n\t    // Set up a handler that can only be requested once\n\t    replyOnce: function replyOnce(name, callback, context) {\n\t      if (Radio._eventsApi(this, \"replyOnce\", name, [ callback, context ])) {\n\t        return this;\n\t      }\n\t      var self = this;\n\t      var once = _.once(function() {\n\t        self.stopReplying(name);\n\t        return makeCallback(callback).apply(this, arguments);\n\t      });\n\t      return this.reply(name, once, context);\n\t    },\n\t    // Remove handler(s)\n\t    stopReplying: function stopReplying(name, callback, context) {\n\t      if (Radio._eventsApi(this, \"stopReplying\", name)) {\n\t        return this;\n\t      }\n\t      // Remove everything if there are no arguments passed\n\t      if (!name && !callback && !context) {\n\t        delete this._requests;\n\t      } else if (!removeHandlers(this._requests, name, callback, context)) {\n\t        Radio.debugLog(\"Attempted to remove the unregistered request\", name, this.channelName);\n\t      }\n\t      return this;\n\t    }\n\t  };\n\t  /*\n\t   * Backbone.Radio.channel\n\t   * ----------------------\n\t   * Get a reference to a channel by name.\n\t   *\n\t   */\n\t  Radio._channels = {};\n\t  Radio.channel = function(channelName) {\n\t    if (!channelName) {\n\t      throw new Error(\"You must provide a name for the channel.\");\n\t    }\n\t    if (Radio._channels[channelName]) {\n\t      return Radio._channels[channelName];\n\t    } else {\n\t      return Radio._channels[channelName] = new Radio.Channel(channelName);\n\t    }\n\t  };\n\t  /*\n\t   * Backbone.Radio.Channel\n\t   * ----------------------\n\t   * A Channel is an object that extends from Backbone.Events,\n\t   * and Radio.Requests.\n\t   *\n\t   */\n\t  Radio.Channel = function(channelName) {\n\t    this.channelName = channelName;\n\t  };\n\t  _.extend(Radio.Channel.prototype, Backbone.Events, Radio.Requests, {\n\t    // Remove all handlers from the messaging systems of this channel\n\t    reset: function reset() {\n\t      this.off();\n\t      this.stopListening();\n\t      this.stopReplying();\n\t      return this;\n\t    }\n\t  });\n\t  /*\n\t   * Top-level API\n\t   * -------------\n\t   * Supplies the 'top-level API' for working with Channels directly\n\t   * from Backbone.Radio.\n\t   *\n\t   */\n\t  var channel, args, systems = [ Backbone.Events, Radio.Commands, Radio.Requests ];\n\t  _.each(systems, function(system) {\n\t    _.each(system, function(method, methodName) {\n\t      Radio[methodName] = function(channelName) {\n\t        args = _.rest(arguments);\n\t        channel = this.channel(channelName);\n\t        return channel[methodName].apply(channel, args);\n\t      };\n\t    });\n\t  });\n\t  Radio.reset = function(channelName) {\n\t    var channels = !channelName ? this._channels : [ this._channels[channelName] ];\n\t    _.invoke(channels, \"reset\");\n\t  };\n\t  var backbone_radio = Radio;\n\t  return backbone_radio;\n\t})(_, Backbone);\n\n\t// Attach bundled libraries to expected local vars\n\tRadio = Backbone.Radio;\n\tChildViewContainer = Backbone.ChildViewContainer;\n\n\n\tvar babelHelpers = {};\n\n\tbabelHelpers.toConsumableArray = function (arr) {\n\t  if (Array.isArray(arr)) {\n\t    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n\t    return arr2;\n\t  } else {\n\t    return Array.from(arr);\n\t  }\n\t};\n\tvar version = \"3.0.0\";\n\n\t// Borrow the Backbone `extend` method so we can use it as needed\n\tvar extend = Backbone.Model.extend;\n\n\tvar errorProps = ['description', 'fileName', 'lineNumber', 'name', 'message', 'number'];\n\n\tvar MarionetteError = extend.call(Error, {\n\t  urlRoot: 'http://marionettejs.com/docs/v' + version + '/',\n\n\t  constructor: function MarionetteError(message, options) {\n\t    if (_$1.isObject(message)) {\n\t      options = message;\n\t      message = options.message;\n\t    } else if (!options) {\n\t      options = {};\n\t    }\n\n\t    var error = Error.call(this, message);\n\t    _$1.extend(this, _$1.pick(error, errorProps), _$1.pick(options, errorProps));\n\n\t    this.captureStackTrace();\n\n\t    if (options.url) {\n\t      this.url = this.urlRoot + options.url;\n\t    }\n\t  },\n\n\t  captureStackTrace: function captureStackTrace() {\n\t    if (Error.captureStackTrace) {\n\t      Error.captureStackTrace(this, MarionetteError);\n\t    }\n\t  },\n\n\t  toString: function toString() {\n\t    return this.name + ': ' + this.message + (this.url ? ' See: ' + this.url : '');\n\t  }\n\t});\n\n\tMarionetteError.extend = extend;\n\n\t// Bind/unbind the event to handlers specified as a string of\n\t// handler names on the target object\n\tfunction bindFromStrings(target, entity, evt, methods, actionName) {\n\t  var methodNames = methods.split(/\\s+/);\n\n\t  _$1.each(methodNames, function (methodName) {\n\t    var method = target[methodName];\n\t    if (!method) {\n\t      throw new MarionetteError('Method \"' + methodName + '\" was configured as an event handler, but does not exist.');\n\t    }\n\n\t    target[actionName](entity, evt, method);\n\t  });\n\t}\n\n\t// generic looping function\n\tfunction iterateEvents(target, entity, bindings, actionName) {\n\t  if (!entity || !bindings) {\n\t    return;\n\t  }\n\n\t  // type-check bindings\n\t  if (!_$1.isObject(bindings)) {\n\t    throw new MarionetteError({\n\t      message: 'Bindings must be an object.',\n\t      url: 'marionette.functions.html#marionettebindentityevents'\n\t    });\n\t  }\n\n\t  // iterate the bindings and bind/unbind them\n\t  _$1.each(bindings, function (method, evt) {\n\n\t    // allow for a list of method names as a string\n\t    if (_$1.isString(method)) {\n\t      bindFromStrings(target, entity, evt, method, actionName);\n\t      return;\n\t    }\n\n\t    target[actionName](entity, evt, method);\n\t  });\n\t}\n\n\tfunction bindEntityEvents(entity, bindings) {\n\t  iterateEvents(this, entity, bindings, 'listenTo');\n\t}\n\n\tfunction unbindEntityEvents(entity, bindings) {\n\t  iterateEvents(this, entity, bindings, 'stopListening');\n\t}\n\n\tvar proxy = function proxy(method) {\n\t  return function (context) {\n\t    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t      args[_key - 1] = arguments[_key];\n\t    }\n\n\t    return method.apply(context, args);\n\t  };\n\t};\n\n\t// Marionette.normalizeMethods\n\t// ----------------------\n\n\t// Pass in a mapping of events => functions or function names\n\t// and return a mapping of events => functions\n\tvar normalizeMethods = function normalizeMethods(hash) {\n\t  return _$1.reduce(hash, function (normalizedHash, method, name) {\n\t    if (!_$1.isFunction(method)) {\n\t      method = this[method];\n\t    }\n\t    if (method) {\n\t      normalizedHash[name] = method;\n\t    }\n\t    return normalizedHash;\n\t  }, {}, this);\n\t};\n\n\tfunction iterateReplies(target, channel, bindings, actionName) {\n\t  if (!channel || !bindings) {\n\t    return;\n\t  }\n\n\t  // type-check bindings\n\t  if (!_$1.isObject(bindings)) {\n\t    throw new MarionetteError({\n\t      message: 'Bindings must be an object.',\n\t      url: 'marionette.functions.html#marionettebindradiorequests'\n\t    });\n\t  }\n\n\t  var normalizedRadioRequests = normalizeMethods.call(target, bindings);\n\n\t  channel[actionName](normalizedRadioRequests, target);\n\t}\n\n\tfunction bindRadioRequests(channel, bindings) {\n\t  iterateReplies(this, channel, bindings, 'reply');\n\t}\n\n\tfunction unbindRadioRequests(channel, bindings) {\n\t  iterateReplies(this, channel, bindings, 'stopReplying');\n\t}\n\n\t// Merge `keys` from `options` onto `this`\n\tvar mergeOptions = function mergeOptions(options, keys) {\n\t  if (!options) {\n\t    return;\n\t  }\n\t  _$1.extend(this, _$1.pick(options, keys));\n\t};\n\n\tvar getOption = function getOption(optionName) {\n\t  if (!optionName) {\n\t    return;\n\t  }\n\t  if (this.options && this.options[optionName] !== undefined) {\n\t    return this.options[optionName];\n\t  } else {\n\t    return this[optionName];\n\t  }\n\t};\n\n\t// Determine if `el` is a child of the document\n\tvar isNodeAttached = function isNodeAttached(el) {\n\t  return Backbone.$.contains(document.documentElement, el);\n\t};\n\n\tvar deprecate = function deprecate(message, test) {\n\t  if (_$1.isObject(message)) {\n\t    message = message.prev + ' is going to be removed in the future. ' + 'Please use ' + message.next + ' instead.' + (message.url ? ' See: ' + message.url : '');\n\t  }\n\n\t  if (!Marionette.DEV_MODE) {\n\t    return;\n\t  }\n\n\t  if ((test === undefined || !test) && !deprecate._cache[message]) {\n\t    deprecate._warn('Deprecation warning: ' + message);\n\t    deprecate._cache[message] = true;\n\t  }\n\t};\n\n\tdeprecate._console = typeof console !== 'undefined' ? console : {};\n\tdeprecate._warn = function () {\n\t  var warn = deprecate._console.warn || deprecate._console.log || function () {};\n\t  return warn.apply(deprecate._console, arguments);\n\t};\n\tdeprecate._cache = {};\n\n\t// split the event name on the \":\"\n\tvar splitter = /(^|:)(\\w)/gi;\n\n\t// take the event section (\"section1:section2:section3\")\n\t// and turn it in to uppercase name onSection1Section2Section3\n\tfunction getEventName(match, prefix, eventName) {\n\t  return eventName.toUpperCase();\n\t}\n\n\t// Trigger an event and/or a corresponding method name. Examples:\n\t//\n\t// `this.triggerMethod(\"foo\")` will trigger the \"foo\" event and\n\t// call the \"onFoo\" method.\n\t//\n\t// `this.triggerMethod(\"foo:bar\")` will trigger the \"foo:bar\" event and\n\t// call the \"onFooBar\" method.\n\n\tfunction triggerMethod(event) {\n\t  // get the method name from the event name\n\t  var methodName = 'on' + event.replace(splitter, getEventName);\n\t  var method = getOption.call(this, methodName);\n\t  var result;\n\n\t  // call the onMethodName if it exists\n\n\t  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t    args[_key - 1] = arguments[_key];\n\t  }\n\n\t  if (_$1.isFunction(method)) {\n\t    // pass all args, except the event name\n\t    result = method.apply(this, args);\n\t  }\n\n\t  // trigger the event\n\t  this.trigger.apply(this, [event].concat(args));\n\n\t  return result;\n\t}\n\n\t// triggerMethodOn invokes triggerMethod on a specific context\n\t//\n\t// e.g. `Marionette.triggerMethodOn(view, 'show')`\n\t// will trigger a \"show\" event or invoke onShow the view.\n\n\tfunction triggerMethodOn(context) {\n\t  var fnc = _$1.isFunction(context.triggerMethod) ? context.triggerMethod : triggerMethod;\n\n\t  for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n\t    args[_key2 - 1] = arguments[_key2];\n\t  }\n\n\t  return fnc.apply(context, args);\n\t}\n\n\t// triggerMethodMany invokes triggerMethod on many targets from a source\n\t// it's useful for standardizing a pattern where we propagate an event from a source\n\t// to many targets.\n\t//\n\t// For each target we want to follow the pattern\n\t// target.triggerMethod(event, target, ...args)\n\t// e.g childview.triggerMethod('attach', childView, ...args)\n\n\tfunction triggerMethodMany(targets, eventName) {\n\t  for (var _len3 = arguments.length, args = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n\t    args[_key3 - 2] = arguments[_key3];\n\t  }\n\n\t  _$1.each(targets, function (target) {\n\t    triggerMethodOn.apply(undefined, [target, eventName, target].concat(args));\n\t  });\n\t}\n\n\tvar FEATURES = {};\n\n\tfunction isEnabled(name) {\n\t  return !!FEATURES[name];\n\t}\n\n\tfunction setEnabled(name, state) {\n\t  return FEATURES[name] = state;\n\t}\n\n\t// Trigger method on children unless a pure Backbone.View\n\tfunction triggerMethodChildren(view, event, beforeEachTrigger) {\n\t  if (!view._getImmediateChildren) {\n\t    return;\n\t  }\n\t  _.each(view._getImmediateChildren(), function (child) {\n\t    if (beforeEachTrigger) {\n\t      beforeEachTrigger(child);\n\t    }\n\t    triggerMethodOn(child, event, child);\n\t  });\n\t}\n\n\tfunction setIsAttached(view) {\n\t  view._isAttached = true;\n\t}\n\n\tfunction unsetIsAttached(view) {\n\t  view._isAttached = false;\n\t}\n\n\t// Monitor a view's state, propagating attach/detach events to children and firing dom:refresh\n\t// whenever a rendered view is attached or an attached view is rendered.\n\tfunction MonitorViewEvents(view) {\n\t  if (view._areViewEventsMonitored) {\n\t    return;\n\t  }\n\n\t  view._areViewEventsMonitored = true;\n\n\t  function handleBeforeAttach() {\n\t    triggerMethodChildren(view, 'before:attach');\n\t  }\n\n\t  function handleAttach() {\n\t    triggerMethodChildren(view, 'attach', setIsAttached);\n\t    triggerDOMRefresh();\n\t  }\n\n\t  function handleBeforeDetach() {\n\t    triggerMethodChildren(view, 'before:detach');\n\t  }\n\n\t  function handleDetach() {\n\t    triggerMethodChildren(view, 'detach', unsetIsAttached);\n\t  }\n\n\t  function handleRender() {\n\t    triggerDOMRefresh();\n\t  }\n\n\t  function triggerDOMRefresh() {\n\t    if (view._isAttached && view._isRendered) {\n\t      triggerMethodOn(view, 'dom:refresh', view);\n\t    }\n\t  }\n\n\t  view.on({\n\t    'before:attach': handleBeforeAttach,\n\t    'attach': handleAttach,\n\t    'before:detach': handleBeforeDetach,\n\t    'detach': handleDetach,\n\t    'render': handleRender\n\t  });\n\t}\n\n\t// Placeholder method to be extended by the user.\n\t// The method should define the object that stores the behaviors.\n\t// i.e.\n\t//\n\t// ```js\n\t// Marionette.Behaviors.behaviorsLookup: function() {\n\t//   return App.Behaviors\n\t// }\n\t// ```\n\n\tfunction behaviorsLookup() {\n\t  throw new MarionetteError({\n\t    message: 'You must define where your behaviors are stored.',\n\t    url: 'marionette.behaviors.md#behaviorslookup'\n\t  });\n\t}\n\n\tvar RadioMixin = {\n\n\t  _initRadio: function _initRadio() {\n\t    var channelName = this.getValue(this.getOption('channelName'));\n\n\t    if (!channelName) {\n\t      return;\n\t    }\n\n\t    var channel = this._channel = Radio.channel(channelName);\n\n\t    var radioEvents = this.getValue(this.getOption('radioEvents'));\n\t    this.bindRadioEvents(channel, radioEvents);\n\n\t    var radioRequests = this.getValue(this.getOption('radioRequests'));\n\t    this.bindRadioRequests(channel, radioRequests);\n\n\t    this.on('destroy', this._destroyRadio);\n\t  },\n\n\t  _destroyRadio: function _destroyRadio() {\n\t    this._channel.stopReplying(null, null, this);\n\t  },\n\n\t  getChannel: function getChannel() {\n\t    return this._channel;\n\t  },\n\n\t  // Proxy `bindRadioEvents`\n\t  bindRadioEvents: bindEntityEvents,\n\n\t  // Proxy `unbindRadioEvents`\n\t  unbindRadioEvents: unbindEntityEvents,\n\n\t  // Proxy `bindRadioRequests`\n\t  bindRadioRequests: bindRadioRequests,\n\n\t  // Proxy `unbindRadioRequests`\n\t  unbindRadioRequests: unbindRadioRequests\n\n\t};\n\n\t// Internal utility for setting options consistently across Mn\n\tvar _setOptions = function _setOptions() {\n\t  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t    args[_key] = arguments[_key];\n\t  }\n\n\t  this.options = _$1.extend.apply(_$1, [{}, _$1.result(this, 'options')].concat(args));\n\t};\n\n\t// Similar to `_.result`, this is a simple helper\n\t// If a function is provided we call it with context\n\t// otherwise just return the value. If the value is\n\t// undefined return a default value\n\tvar getValue = function getValue(value) {\n\t  if (_$1.isFunction(value)) {\n\t    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t      args[_key - 1] = arguments[_key];\n\t    }\n\n\t    return value.apply(this, args);\n\t  }\n\t  return value;\n\t};\n\n\tvar CommonMixin = {\n\t  getValue: getValue,\n\n\t  // Imports the \"normalizeMethods\" to transform hashes of\n\t  // events=>function references/names to a hash of events=>function references\n\t  normalizeMethods: normalizeMethods,\n\n\t  _setOptions: _setOptions,\n\n\t  // A handy way to merge passed-in options onto the instance\n\t  mergeOptions: mergeOptions,\n\n\t  // Enable getting options from this or this.options by name.\n\t  getOption: getOption,\n\n\t  // Enable binding view's events from another entity.\n\t  bindEntityEvents: bindEntityEvents,\n\n\t  // Enable unbinding view's events from another entity.\n\t  unbindEntityEvents: unbindEntityEvents\n\t};\n\n\t// A Base Class that other Classes should descend from.\n\t// Object borrows many conventions and utilities from Backbone.\n\tvar MarionetteObject = function MarionetteObject(options) {\n\t  this._setOptions(options);\n\t  this.cid = _$1.uniqueId(this.cidPrefix);\n\t  this._initRadio();\n\t  this.initialize.apply(this, arguments);\n\t};\n\n\tMarionetteObject.extend = extend;\n\n\t// Object Methods\n\t// --------------\n\n\t// Ensure it can trigger events with Backbone.Events\n\t_$1.extend(MarionetteObject.prototype, Backbone.Events, CommonMixin, RadioMixin, {\n\t  cidPrefix: 'mno',\n\n\t  // for parity with Marionette.AbstractView lifecyle\n\t  _isDestroyed: false,\n\n\t  isDestroyed: function isDestroyed() {\n\t    return this._isDestroyed();\n\t  },\n\n\t  //this is a noop method intended to be overridden by classes that extend from this base\n\t  initialize: function initialize() {},\n\n\t  destroy: function destroy() {\n\t    if (this._isDestroyed) {\n\t      return this;\n\t    }\n\n\t    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t      args[_key] = arguments[_key];\n\t    }\n\n\t    this.triggerMethod.apply(this, ['before:destroy'].concat(args));\n\n\t    // mark as destroyed before doing the actual destroy, to\n\t    // prevent infinite loops within \"destroy\" event handlers\n\t    this._isDestroyed = true;\n\t    this.triggerMethod.apply(this, ['destroy'].concat(args));\n\t    this.stopListening();\n\n\t    return this;\n\t  },\n\n\t  triggerMethod: triggerMethod\n\t});\n\n\tvar Region = MarionetteObject.extend({\n\t  cidPrefix: 'mnr',\n\t  replaceElement: false,\n\t  _isReplaced: false,\n\n\t  constructor: function constructor(options) {\n\t    this._setOptions(options);\n\t    this._initEl = this.el = this.getOption('el');\n\n\t    // Handle when this.el is passed in as a $ wrapped element.\n\t    this.el = this.el instanceof Backbone.$ ? this.el[0] : this.el;\n\n\t    if (!this.el) {\n\t      throw new MarionetteError({\n\t        name: 'NoElError',\n\t        message: 'An \"el\" must be specified for a region.'\n\t      });\n\t    }\n\n\t    this.$el = this.getEl(this.el);\n\t    MarionetteObject.call(this, options);\n\t  },\n\n\t  // Displays a backbone view instance inside of the region. Handles calling the `render`\n\t  // method for you. Reads content directly from the `el` attribute. The `preventDestroy`\n\t  // option can be used to prevent a view from the old view being destroyed on show.\n\t  show: function show(view, options) {\n\t    if (!this._ensureElement()) {\n\t      return;\n\t    }\n\t    this._ensureView(view);\n\t    if (view === this.currentView) {\n\t      return this;\n\t    }\n\n\t    this.triggerMethod('before:show', this, view, options);\n\n\t    MonitorViewEvents(view);\n\n\t    this.empty(options);\n\n\t    // We need to listen for if a view is destroyed in a way other than through the region.\n\t    // If this happens we need to remove the reference to the currentView since once a view\n\t    // has been destroyed we can not reuse it.\n\t    view.on('destroy', this.empty, this);\n\n\t    // Make this region the view's parent.\n\t    // It's important that this parent binding happens before rendering so that any events\n\t    // the child may trigger during render can also be triggered on the child's ancestor views.\n\t    view._parent = this;\n\n\t    this._renderView(view);\n\n\t    this._attachView(view, options);\n\n\t    this.triggerMethod('show', this, view, options);\n\t    return this;\n\t  },\n\n\t  _renderView: function _renderView(view) {\n\t    if (view._isRendered) {\n\t      return;\n\t    }\n\n\t    if (!view.supportsRenderLifecycle) {\n\t      triggerMethodOn(view, 'before:render', view);\n\t    }\n\n\t    view.render();\n\n\t    if (!view.supportsRenderLifecycle) {\n\t      view._isRendered = true;\n\t      triggerMethodOn(view, 'render', view);\n\t    }\n\t  },\n\n\t  _attachView: function _attachView(view) {\n\t    var shouldTriggerAttach = !view._isAttached && isNodeAttached(this.el);\n\t    var shouldReplaceEl = !!this.replaceElement;\n\n\t    if (shouldTriggerAttach) {\n\t      triggerMethodOn(view, 'before:attach', view);\n\t    }\n\n\t    this.attachHtml(view, shouldReplaceEl);\n\n\t    if (shouldTriggerAttach) {\n\t      view._isAttached = true;\n\t      triggerMethodOn(view, 'attach', view);\n\t    }\n\n\t    this.currentView = view;\n\t  },\n\n\t  _ensureElement: function _ensureElement() {\n\t    if (!_$1.isObject(this.el)) {\n\t      this.$el = this.getEl(this.el);\n\t      this.el = this.$el[0];\n\t    }\n\n\t    if (!this.$el || this.$el.length === 0) {\n\t      if (this.getOption('allowMissingEl')) {\n\t        return false;\n\t      } else {\n\t        throw new MarionetteError('An \"el\" ' + this.$el.selector + ' must exist in DOM');\n\t      }\n\t    }\n\t    return true;\n\t  },\n\n\t  _ensureView: function _ensureView(view) {\n\t    if (!view) {\n\t      throw new MarionetteError({\n\t        name: 'ViewNotValid',\n\t        message: 'The view passed is undefined and therefore invalid. You must pass a view instance to show.'\n\t      });\n\t    }\n\n\t    if (view._isDestroyed) {\n\t      throw new MarionetteError({\n\t        name: 'ViewDestroyedError',\n\t        message: 'View (cid: \"' + view.cid + '\") has already been destroyed and cannot be used.'\n\t      });\n\t    }\n\t  },\n\n\t  // Override this method to change how the region finds the DOM element that it manages. Return\n\t  // a jQuery selector object scoped to a provided parent el or the document if none exists.\n\t  getEl: function getEl(el) {\n\t    return Backbone.$(el, this.getValue(this.getOption('parentEl')));\n\t  },\n\n\t  _replaceEl: function _replaceEl(view) {\n\t    // always restore the el to ensure the regions el is present before replacing\n\t    this._restoreEl();\n\n\t    var parent = this.el.parentNode;\n\n\t    parent.replaceChild(view.el, this.el);\n\t    this._isReplaced = true;\n\t  },\n\n\t  // Restore the region's element in the DOM.\n\t  _restoreEl: function _restoreEl() {\n\t    if (!this.currentView) {\n\t      return;\n\t    }\n\n\t    var view = this.currentView;\n\t    var parent = view.el.parentNode;\n\n\t    if (!parent) {\n\t      return;\n\t    }\n\n\t    parent.replaceChild(this.el, view.el);\n\t    this._isReplaced = false;\n\t  },\n\n\t  isReplaced: function isReplaced() {\n\t    return !!this._isReplaced;\n\t  },\n\n\t  // Override this method to change how the new view is appended to the `$el` that the\n\t  // region is managing\n\t  attachHtml: function attachHtml(view, shouldReplace) {\n\t    if (shouldReplace) {\n\t      // replace the region's node with the view's node\n\t      this._replaceEl(view);\n\t    } else {\n\t      this.el.appendChild(view.el);\n\t    }\n\t  },\n\n\t  // Destroy the current view, if there is one. If there is no current view, it does\n\t  // nothing and returns immediately.\n\t  empty: function empty() {\n\t    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n\t    var preventDestroy = _ref.preventDestroy;\n\n\t    var shouldPreventDestroy = !!preventDestroy;\n\t    var view = this.currentView;\n\n\t    // If there is no view in the region we should not remove anything\n\t    if (!view) {\n\t      return this;\n\t    }\n\n\t    view.off('destroy', this.empty, this);\n\t    this.triggerMethod('before:empty', this, view);\n\n\t    if (this._isReplaced) {\n\t      this._restoreEl();\n\t    }\n\n\t    if (shouldPreventDestroy) {\n\t      this._detachView(view);\n\t    } else {\n\t      this._destroyView(view);\n\t    }\n\n\t    delete this.currentView._parent;\n\t    delete this.currentView;\n\n\t    this.triggerMethod('empty', this, view);\n\t    return this;\n\t  },\n\n\t  _detachView: function _detachView(view) {\n\t    var shouldTriggerDetach = !!view._isAttached;\n\n\t    if (shouldTriggerDetach) {\n\t      triggerMethodOn(view, 'before:detach', view);\n\t    }\n\n\t    this.$el.contents().detach();\n\n\t    if (shouldTriggerDetach) {\n\t      view._isAttached = false;\n\t      triggerMethodOn(view, 'detach', view);\n\t    }\n\t  },\n\n\t  // Call 'destroy' or 'remove', depending on which is found on the view (if showing a raw\n\t  // Backbone view or a Marionette View)\n\t  _destroyView: function _destroyView(view) {\n\t    if (view._isDestroyed) {\n\t      return;\n\t    }\n\n\t    if (!view.supportsDestroyLifecycle) {\n\t      triggerMethodOn(view, 'before:destroy', view);\n\t    }\n\t    if (view.destroy) {\n\t      view.destroy();\n\t    } else {\n\t      var shouldTriggerDetach = !!view._isAttached;\n\n\t      if (shouldTriggerDetach) {\n\t        triggerMethodOn(view, 'before:detach', view);\n\t      }\n\n\t      view.remove();\n\n\t      if (shouldTriggerDetach) {\n\t        view._isAttached = false;\n\t        triggerMethodOn(view, 'detach', view);\n\t      }\n\n\t      // appending _isDestroyed to raw Backbone View allows regions to throw a\n\t      // ViewDestroyedError for this view\n\t      view._isDestroyed = true;\n\t    }\n\n\t    if (!view.supportsDestroyLifecycle) {\n\t      triggerMethodOn(view, 'destroy', view);\n\t    }\n\t  },\n\n\t  // Checks whether a view is currently present within the region. Returns `true` if there is\n\t  // and `false` if no view is present.\n\t  hasView: function hasView() {\n\t    return !!this.currentView;\n\t  },\n\n\t  // Reset the region by destroying any existing view and clearing out the cached `$el`.\n\t  // The next time a view is shown via this region, the region will re-query the DOM for\n\t  // the region's `el`.\n\t  reset: function reset() {\n\t    this.empty();\n\n\t    if (this.$el) {\n\t      this.el = this._initEl;\n\t    }\n\n\t    delete this.$el;\n\t    return this;\n\t  },\n\n\t  destroy: function destroy() {\n\t    this.reset();\n\t    return MarionetteObject.prototype.destroy.apply(this, arguments);\n\t  }\n\t});\n\n\t// A container for a Marionette application.\n\tvar Application = MarionetteObject.extend({\n\t  cidPrefix: 'mna',\n\n\t  constructor: function constructor(options) {\n\t    this._setOptions(options);\n\n\t    this._initRegion();\n\n\t    MarionetteObject.prototype.constructor.apply(this, arguments);\n\t  },\n\n\t  regionClass: Region,\n\n\t  _initRegion: function _initRegion(options) {\n\t    var region = this.getOption('region');\n\t    var RegionClass = this.getOption('regionClass');\n\n\t    // if the region is a string expect an el or selector\n\t    // and instantiate a region\n\t    if (_$1.isString(region)) {\n\t      this._region = new RegionClass({\n\t        el: region\n\t      });\n\t      return;\n\t    }\n\n\t    this._region = region;\n\t  },\n\n\t  getRegion: function getRegion() {\n\t    return this._region;\n\t  },\n\n\t  showView: function showView(view) {\n\t    var region = this.getRegion();\n\n\t    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t      args[_key - 1] = arguments[_key];\n\t    }\n\n\t    return region.show.apply(region, [view].concat(args));\n\t  },\n\n\t  getView: function getView() {\n\t    return this.getRegion().currentView;\n\t  },\n\n\t  // kick off all of the application's processes.\n\t  start: function start(options) {\n\t    this.triggerMethod('before:start', options);\n\t    this.triggerMethod('start', options);\n\t  }\n\n\t});\n\n\tvar AppRouter = Backbone.Router.extend({\n\n\t  constructor: function constructor(options) {\n\t    this._setOptions(options);\n\n\t    Backbone.Router.apply(this, arguments);\n\n\t    var appRoutes = this.getOption('appRoutes');\n\t    var controller = this._getController();\n\t    this.processAppRoutes(controller, appRoutes);\n\t    this.on('route', this._processOnRoute, this);\n\t  },\n\n\t  // Similar to route method on a Backbone Router but\n\t  // method is called on the controller\n\t  appRoute: function appRoute(route, methodName) {\n\t    var controller = this._getController();\n\t    this._addAppRoute(controller, route, methodName);\n\t  },\n\n\t  // process the route event and trigger the onRoute\n\t  // method call, if it exists\n\t  _processOnRoute: function _processOnRoute(routeName, routeArgs) {\n\t    // make sure an onRoute before trying to call it\n\t    if (_$1.isFunction(this.onRoute)) {\n\t      // find the path that matches the current route\n\t      var routePath = _$1.invert(this.getOption('appRoutes'))[routeName];\n\t      this.onRoute(routeName, routePath, routeArgs);\n\t    }\n\t  },\n\n\t  // Internal method to process the `appRoutes` for the\n\t  // router, and turn them in to routes that trigger the\n\t  // specified method on the specified `controller`.\n\t  processAppRoutes: function processAppRoutes(controller, appRoutes) {\n\t    if (!appRoutes) {\n\t      return;\n\t    }\n\n\t    var routeNames = _$1.keys(appRoutes).reverse(); // Backbone requires reverted order of routes\n\n\t    _$1.each(routeNames, function (route) {\n\t      this._addAppRoute(controller, route, appRoutes[route]);\n\t    }, this);\n\t  },\n\n\t  _getController: function _getController() {\n\t    return this.getOption('controller');\n\t  },\n\n\t  _addAppRoute: function _addAppRoute(controller, route, methodName) {\n\t    var method = controller[methodName];\n\n\t    if (!method) {\n\t      throw new MarionetteError('Method \"' + methodName + '\" was not found on the controller');\n\t    }\n\n\t    this.route(route, methodName, _$1.bind(method, controller));\n\t  },\n\n\t  triggerMethod: triggerMethod\n\t});\n\n\t_$1.extend(AppRouter.prototype, CommonMixin);\n\n\t// Manage templates stored in `<script>` blocks,\n\t// caching them for faster access.\n\tvar TemplateCache = function TemplateCache(templateId) {\n\t  this.templateId = templateId;\n\t};\n\n\t// TemplateCache object-level methods. Manage the template\n\t// caches from these method calls instead of creating\n\t// your own TemplateCache instances\n\t_$1.extend(TemplateCache, {\n\t  templateCaches: {},\n\n\t  // Get the specified template by id. Either\n\t  // retrieves the cached version, or loads it\n\t  // from the DOM.\n\t  get: function get(templateId, options) {\n\t    var cachedTemplate = this.templateCaches[templateId];\n\n\t    if (!cachedTemplate) {\n\t      cachedTemplate = new TemplateCache(templateId);\n\t      this.templateCaches[templateId] = cachedTemplate;\n\t    }\n\n\t    return cachedTemplate.load(options);\n\t  },\n\n\t  // Clear templates from the cache. If no arguments\n\t  // are specified, clears all templates:\n\t  // `clear()`\n\t  //\n\t  // If arguments are specified, clears each of the\n\t  // specified templates from the cache:\n\t  // `clear(\"#t1\", \"#t2\", \"...\")`\n\t  clear: function clear() {\n\t    var i;\n\n\t    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t      args[_key] = arguments[_key];\n\t    }\n\n\t    var length = args.length;\n\n\t    if (length > 0) {\n\t      for (i = 0; i < length; i++) {\n\t        delete this.templateCaches[args[i]];\n\t      }\n\t    } else {\n\t      this.templateCaches = {};\n\t    }\n\t  }\n\t});\n\n\t// TemplateCache instance methods, allowing each\n\t// template cache object to manage its own state\n\t// and know whether or not it has been loaded\n\t_$1.extend(TemplateCache.prototype, {\n\n\t  // Internal method to load the template\n\t  load: function load(options) {\n\t    // Guard clause to prevent loading this template more than once\n\t    if (this.compiledTemplate) {\n\t      return this.compiledTemplate;\n\t    }\n\n\t    // Load the template and compile it\n\t    var template = this.loadTemplate(this.templateId, options);\n\t    this.compiledTemplate = this.compileTemplate(template, options);\n\n\t    return this.compiledTemplate;\n\t  },\n\n\t  // Load a template from the DOM, by default. Override\n\t  // this method to provide your own template retrieval\n\t  // For asynchronous loading with AMD/RequireJS, consider\n\t  // using a template-loader plugin as described here:\n\t  // https://github.com/marionettejs/backbone.marionette/wiki/Using-marionette-with-requirejs\n\t  loadTemplate: function loadTemplate(templateId, options) {\n\t    var $template = Backbone.$(templateId);\n\n\t    if (!$template.length) {\n\t      throw new MarionetteError({\n\t        name: 'NoTemplateError',\n\t        message: 'Could not find template: \"' + templateId + '\"'\n\t      });\n\t    }\n\t    return $template.html();\n\t  },\n\n\t  // Pre-compile the template before caching it. Override\n\t  // this method if you do not need to pre-compile a template\n\t  // (JST / RequireJS for example) or if you want to change\n\t  // the template engine used (Handebars, etc).\n\t  compileTemplate: function compileTemplate(rawTemplate, options) {\n\t    return _$1.template(rawTemplate, options);\n\t  }\n\t});\n\n\t// Render a template with data by passing in the template\n\t// selector and the data to render.\n\tvar Renderer = {\n\n\t  // Render a template with data. The `template` parameter is\n\t  // passed to the `TemplateCache` object to retrieve the\n\t  // template function. Override this method to provide your own\n\t  // custom rendering and template handling for all of Marionette.\n\t  render: function render(template, data) {\n\t    if (!template) {\n\t      throw new MarionetteError({\n\t        name: 'TemplateNotFoundError',\n\t        message: 'Cannot render the template since its false, null or undefined.'\n\t      });\n\t    }\n\n\t    var templateFunc = _$1.isFunction(template) ? template : TemplateCache.get(template);\n\n\t    return templateFunc(data);\n\t  }\n\t};\n\n\tvar RegionsMixin = {\n\t  regionClass: Region,\n\n\t  // Internal method to initialize the regions that have been defined in a\n\t  // `regions` attribute on this View.\n\t  _initRegions: function _initRegions() {\n\n\t    // init regions hash\n\t    this.regions = this.regions || {};\n\t    this._regions = {};\n\n\t    this.addRegions(this.getValue(this.getOption('regions')));\n\t  },\n\n\t  // Internal method to re-initialize all of the regions by updating\n\t  // the `el` that they point to\n\t  _reInitRegions: function _reInitRegions() {\n\t    _$1.invoke(this._regions, 'reset');\n\t  },\n\n\t  // Add a single region, by name, to the View\n\t  addRegion: function addRegion(name, definition) {\n\t    var regions = {};\n\t    regions[name] = definition;\n\t    return this.addRegions(regions)[name];\n\t  },\n\n\t  // Add multiple regions as a {name: definition, name2: def2} object literal\n\t  addRegions: function addRegions(regions) {\n\t    // If there's nothing to add, stop here.\n\t    if (_$1.isEmpty(regions)) {\n\t      return;\n\t    }\n\n\t    // Normalize region selectors hash to allow\n\t    // a user to use the @ui. syntax.\n\t    regions = this.normalizeUIValues(regions, ['selector', 'el']);\n\n\t    // Add the regions definitions to the regions property\n\t    this.regions = _$1.extend({}, this.regions, regions);\n\n\t    return this._addRegions(regions);\n\t  },\n\n\t  // internal method to build and add regions\n\t  _addRegions: function _addRegions(regionDefinitions) {\n\t    return _$1.reduce(regionDefinitions, function (regions, definition, name) {\n\t      regions[name] = this._buildRegion(definition);\n\t      this._addRegion(regions[name], name);\n\t      return regions;\n\t    }, {}, this);\n\t  },\n\n\t  // return the region instance from the definition\n\t  _buildRegion: function _buildRegion(definition) {\n\t    if (definition instanceof Region) {\n\t      return definition;\n\t    }\n\n\t    return this._buildRegionFromDefinition(definition);\n\t  },\n\n\t  _buildRegionFromDefinition: function _buildRegionFromDefinition(definition) {\n\t    if (_$1.isString(definition)) {\n\t      return this._buildRegionFromObject({ el: definition });\n\t    }\n\n\t    if (_$1.isFunction(definition)) {\n\t      return this._buildRegionFromRegionClass(definition);\n\t    }\n\n\t    if (_$1.isObject(definition)) {\n\t      return this._buildRegionFromObject(definition);\n\t    }\n\n\t    throw new MarionetteError({\n\t      message: 'Improper region configuration type.',\n\t      url: 'marionette.region.html#region-configuration-types'\n\t    });\n\t  },\n\n\t  _buildRegionFromObject: function _buildRegionFromObject(definition) {\n\t    var RegionClass = definition.regionClass || this.getOption('regionClass');\n\n\t    var options = _$1.omit(definition, 'regionClass');\n\n\t    _$1.defaults(options, {\n\t      el: definition.selector,\n\t      parentEl: _$1.partial(_$1.result, this, 'el')\n\t    });\n\n\t    return new RegionClass(options);\n\t  },\n\n\t  // Build the region directly from a given `RegionClass`\n\t  _buildRegionFromRegionClass: function _buildRegionFromRegionClass(RegionClass) {\n\t    return new RegionClass({\n\t      parentEl: _$1.partial(_$1.result, this, 'el')\n\t    });\n\t  },\n\n\t  _addRegion: function _addRegion(region, name) {\n\t    this.triggerMethod('before:add:region', name, region);\n\n\t    region._parent = this;\n\n\t    this._regions[name] = region;\n\n\t    this.triggerMethod('add:region', name, region);\n\t  },\n\n\t  // Remove a single region from the View, by name\n\t  removeRegion: function removeRegion(name) {\n\t    var region = this._regions[name];\n\n\t    this._removeRegion(region, name);\n\n\t    return region;\n\t  },\n\n\t  // Remove all regions from the View\n\t  removeRegions: function removeRegions() {\n\t    var regions = this.getRegions();\n\n\t    _$1.each(this._regions, this._removeRegion, this);\n\n\t    return regions;\n\t  },\n\n\t  _removeRegion: function _removeRegion(region, name) {\n\t    this.triggerMethod('before:remove:region', name, region);\n\n\t    region.empty();\n\t    region.stopListening();\n\n\t    delete this.regions[name];\n\t    delete this._regions[name];\n\n\t    this.triggerMethod('remove:region', name, region);\n\t  },\n\n\t  // Empty all regions in the region manager, but\n\t  // leave them attached\n\t  emptyRegions: function emptyRegions() {\n\t    var regions = this.getRegions();\n\t    _$1.invoke(regions, 'empty');\n\t    return regions;\n\t  },\n\n\t  // Checks to see if view contains region\n\t  // Accepts the region name\n\t  // hasRegion('main')\n\t  hasRegion: function hasRegion(name) {\n\t    return !!this.getRegion(name);\n\t  },\n\n\t  // Provides access to regions\n\t  // Accepts the region name\n\t  // getRegion('main')\n\t  getRegion: function getRegion(name) {\n\t    return this._regions[name];\n\t  },\n\n\t  // Get all regions\n\t  getRegions: function getRegions() {\n\t    return _$1.clone(this._regions);\n\t  },\n\n\t  showChildView: function showChildView(name, view) {\n\t    var region = this.getRegion(name);\n\n\t    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n\t      args[_key - 2] = arguments[_key];\n\t    }\n\n\t    return region.show.apply(region, [view].concat(args));\n\t  },\n\n\t  getChildView: function getChildView(name) {\n\t    return this.getRegion(name).currentView;\n\t  }\n\n\t};\n\n\t// allows for the use of the @ui. syntax within\n\t// a given key for triggers and events\n\t// swaps the @ui with the associated selector.\n\t// Returns a new, non-mutated, parsed events hash.\n\tvar _normalizeUIKeys = function _normalizeUIKeys(hash, ui) {\n\t  return _$1.reduce(hash, function (memo, val, key) {\n\t    var normalizedKey = normalizeUIString(key, ui);\n\t    memo[normalizedKey] = val;\n\t    return memo;\n\t  }, {});\n\t};\n\n\t// utility method for parsing @ui. syntax strings\n\t// into associated selector\n\tvar normalizeUIString = function normalizeUIString(uiString, ui) {\n\t  return uiString.replace(/@ui\\.[a-zA-Z_$0-9]*/g, function (r) {\n\t    return ui[r.slice(4)];\n\t  });\n\t};\n\n\t// allows for the use of the @ui. syntax within\n\t// a given value for regions\n\t// swaps the @ui with the associated selector\n\tvar _normalizeUIValues = function _normalizeUIValues(hash, ui, properties) {\n\t  _$1.each(hash, function (val, key) {\n\t    if (_$1.isString(val)) {\n\t      hash[key] = normalizeUIString(val, ui);\n\t    } else if (_$1.isObject(val) && _$1.isArray(properties)) {\n\t      _$1.extend(val, _normalizeUIValues(_$1.pick(val, properties), ui));\n\t      /* Value is an object, and we got an array of embedded property names to normalize. */\n\t      _$1.each(properties, function (property) {\n\t        var propertyVal = val[property];\n\t        if (_$1.isString(propertyVal)) {\n\t          val[property] = normalizeUIString(propertyVal, ui);\n\t        }\n\t      });\n\t    }\n\t  });\n\t  return hash;\n\t};\n\n\tvar UIMixin = {\n\n\t  // normalize the keys of passed hash with the views `ui` selectors.\n\t  // `{\"@ui.foo\": \"bar\"}`\n\t  normalizeUIKeys: function normalizeUIKeys(hash) {\n\t    var uiBindings = this._getUIBindings();\n\t    return _normalizeUIKeys(hash, uiBindings);\n\t  },\n\n\t  // normalize the values of passed hash with the views `ui` selectors.\n\t  // `{foo: \"@ui.bar\"}`\n\t  normalizeUIValues: function normalizeUIValues(hash, properties) {\n\t    var uiBindings = this._getUIBindings();\n\t    return _normalizeUIValues(hash, uiBindings, properties);\n\t  },\n\n\t  _getUIBindings: function _getUIBindings() {\n\t    var uiBindings = _$1.result(this, '_uiBindings');\n\t    var ui = _$1.result(this, 'ui');\n\t    return uiBindings || ui;\n\t  },\n\n\t  // This method binds the elements specified in the \"ui\" hash inside the view's code with\n\t  // the associated jQuery selectors.\n\t  _bindUIElements: function _bindUIElements() {\n\t    if (!this.ui) {\n\t      return;\n\t    }\n\n\t    // store the ui hash in _uiBindings so they can be reset later\n\t    // and so re-rendering the view will be able to find the bindings\n\t    if (!this._uiBindings) {\n\t      this._uiBindings = this.ui;\n\t    }\n\n\t    // get the bindings result, as a function or otherwise\n\t    var bindings = _$1.result(this, '_uiBindings');\n\n\t    // empty the ui so we don't have anything to start with\n\t    this._ui = {};\n\n\t    // bind each of the selectors\n\t    _$1.each(bindings, function (selector, key) {\n\t      this._ui[key] = this.$(selector);\n\t    }, this);\n\n\t    this.ui = this._ui;\n\t  },\n\n\t  _unbindUIElements: function _unbindUIElements() {\n\t    if (!this.ui || !this._uiBindings) {\n\t      return;\n\t    }\n\n\t    // delete all of the existing ui bindings\n\t    _$1.each(this.ui, function ($el, name) {\n\t      delete this.ui[name];\n\t    }, this);\n\n\t    // reset the ui element to the original bindings configuration\n\t    this.ui = this._uiBindings;\n\t    delete this._uiBindings;\n\t    delete this._ui;\n\t  },\n\n\t  _getUI: function _getUI(name) {\n\t    return this._ui[name];\n\t  }\n\t};\n\n\t// Borrow event splitter from Backbone\n\tvar delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\n\tfunction uniqueName(eventName, selector) {\n\t  return [eventName + _$1.uniqueId('.evt'), selector].join(' ');\n\t}\n\n\t// Set event name to be namespaced using a unique index\n\t// to generate a non colliding event namespace\n\t// http://api.jquery.com/event.namespace/\n\tvar getUniqueEventName = function getUniqueEventName(eventName) {\n\t  var match = eventName.match(delegateEventSplitter);\n\t  return uniqueName(match[1], match[2]);\n\t};\n\n\t// Internal method to create an event handler for a given `triggerDef` like\n\t// 'click:foo'\n\tfunction buildViewTrigger(view, triggerDef) {\n\t  if (_$1.isString(triggerDef)) {\n\t    triggerDef = { event: triggerDef };\n\t  }\n\n\t  var eventName = triggerDef.event;\n\t  var shouldPreventDefault = triggerDef.preventDefault !== false;\n\t  var shouldStopPropagation = triggerDef.stopPropagation !== false;\n\n\t  return function (e) {\n\t    if (shouldPreventDefault) {\n\t      e.preventDefault();\n\t    }\n\n\t    if (shouldStopPropagation) {\n\t      e.stopPropagation();\n\t    }\n\n\t    view.triggerMethod(eventName, view);\n\t  };\n\t}\n\n\tvar TriggersMixin = {\n\n\t  // Configure `triggers` to forward DOM events to view\n\t  // events. `triggers: {\"click .foo\": \"do:foo\"}`\n\t  _getViewTriggers: function _getViewTriggers(view, triggers) {\n\t    // Configure the triggers, prevent default\n\t    // action and stop propagation of DOM events\n\t    return _$1.reduce(triggers, function (events, value, key) {\n\t      key = getUniqueEventName(key);\n\t      events[key] = buildViewTrigger(view, value);\n\t      return events;\n\t    }, {}, this);\n\t  }\n\n\t};\n\n\tvar DelegateEntityEventsMixin = {\n\t  // Handle `modelEvents`, and `collectionEvents` configuration\n\t  _delegateEntityEvents: function _delegateEntityEvents(model, collection) {\n\t    this._undelegateEntityEvents(model, collection);\n\n\t    var modelEvents = this.getValue(this.getOption('modelEvents'));\n\t    bindEntityEvents.call(this, model, modelEvents);\n\n\t    var collectionEvents = this.getValue(this.getOption('collectionEvents'));\n\t    bindEntityEvents.call(this, collection, collectionEvents);\n\t  },\n\n\t  _undelegateEntityEvents: function _undelegateEntityEvents(model, collection) {\n\t    var modelEvents = this.getValue(this.getOption('modelEvents'));\n\t    unbindEntityEvents.call(this, model, modelEvents);\n\n\t    var collectionEvents = this.getValue(this.getOption('collectionEvents'));\n\t    unbindEntityEvents.call(this, collection, collectionEvents);\n\t  }\n\t};\n\n\t// Takes care of getting the behavior class\n\t// given options and a key.\n\t// If a user passes in options.behaviorClass\n\t// default to using that.\n\t// If a user passes in a Behavior Class directly, use that\n\t// Otherwise delegate the lookup to the users `behaviorsLookup` implementation.\n\tfunction getBehaviorClass(options, key) {\n\t  if (options.behaviorClass) {\n\t    return options.behaviorClass;\n\t    //treat functions as a Behavior constructor\n\t  } else if (_$1.isFunction(options)) {\n\t      return options;\n\t    }\n\n\t  // behaviorsLookup can be either a flat object or a method\n\t  return getValue(Marionette.Behaviors.behaviorsLookup, options, key)[key];\n\t}\n\n\t// Iterate over the behaviors object, for each behavior\n\t// instantiate it and get its grouped behaviors.\n\t// This accepts a list of behaviors in either an object or array form\n\tfunction parseBehaviors(view, behaviors) {\n\t  return _$1.chain(behaviors).map(function (options, key) {\n\t    var BehaviorClass = getBehaviorClass(options, key);\n\t    //if we're passed a class directly instead of an object\n\t    var _options = options === BehaviorClass ? {} : options;\n\t    var behavior = new BehaviorClass(_options, view);\n\t    var nestedBehaviors = parseBehaviors(view, _$1.result(behavior, 'behaviors'));\n\n\t    return [behavior].concat(nestedBehaviors);\n\t  }).flatten().value();\n\t}\n\n\tvar BehaviorsMixin = {\n\t  _initBehaviors: function _initBehaviors() {\n\t    var behaviors = this.getValue(this.getOption('behaviors'));\n\n\t    // Behaviors defined on a view can be a flat object literal\n\t    // or it can be a function that returns an object.\n\t    this._behaviors = _$1.isObject(behaviors) ? parseBehaviors(this, behaviors) : {};\n\t  },\n\n\t  _getBehaviorTriggers: function _getBehaviorTriggers() {\n\t    var triggers = _$1.invoke(this._behaviors, 'getTriggers');\n\t    return _$1.extend.apply(_$1, [{}].concat(babelHelpers.toConsumableArray(triggers)));\n\t  },\n\n\t  _getBehaviorEvents: function _getBehaviorEvents() {\n\t    var events = _$1.invoke(this._behaviors, 'getEvents');\n\t    return _$1.extend.apply(_$1, [{}].concat(babelHelpers.toConsumableArray(events)));\n\t  },\n\n\t  // proxy behavior $el to the view's $el.\n\t  _proxyBehaviorViewProperties: function _proxyBehaviorViewProperties() {\n\t    _$1.invoke(this._behaviors, 'proxyViewProperties');\n\t  },\n\n\t  // delegate modelEvents and collectionEvents\n\t  _delegateBehaviorEntityEvents: function _delegateBehaviorEntityEvents() {\n\t    _$1.invoke(this._behaviors, 'delegateEntityEvents');\n\t  },\n\n\t  // undelegate modelEvents and collectionEvents\n\t  _undelegateBehaviorEntityEvents: function _undelegateBehaviorEntityEvents() {\n\t    _$1.invoke(this._behaviors, 'undelegateEntityEvents');\n\t  },\n\n\t  _destroyBehaviors: function _destroyBehaviors(options) {\n\t    // Call destroy on each behavior after\n\t    // destroying the view.\n\t    // This unbinds event listeners\n\t    // that behaviors have registered for.\n\t    _$1.invoke(this._behaviors, 'destroy', options);\n\t  },\n\n\t  _bindBehaviorUIElements: function _bindBehaviorUIElements() {\n\t    _$1.invoke(this._behaviors, 'bindUIElements');\n\t  },\n\n\t  _unbindBehaviorUIElements: function _unbindBehaviorUIElements() {\n\t    _$1.invoke(this._behaviors, 'unbindUIElements');\n\t  },\n\n\t  _triggerEventOnBehaviors: function _triggerEventOnBehaviors() {\n\t    var behaviors = this._behaviors;\n\t    // Use good ol' for as this is a very hot function\n\n\t    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t      args[_key] = arguments[_key];\n\t    }\n\n\t    for (var i = 0, length = behaviors && behaviors.length; i < length; i++) {\n\t      triggerMethod.apply(behaviors[i], args);\n\t    }\n\t  }\n\t};\n\n\tvar ViewMixin = {\n\n\t  supportsRenderLifecycle: true,\n\t  supportsDestroyLifecycle: true,\n\n\t  _isDestroyed: false,\n\n\t  isDestroyed: function isDestroyed() {\n\t    return !!this._isDestroyed;\n\t  },\n\n\t  _isRendered: false,\n\n\t  isRendered: function isRendered() {\n\t    return !!this._isRendered;\n\t  },\n\n\t  _isAttached: false,\n\n\t  isAttached: function isAttached() {\n\t    return !!this._isAttached;\n\t  },\n\n\t  // Mix in template context methods. Looks for a\n\t  // `templateContext` attribute, which can either be an\n\t  // object literal, or a function that returns an object\n\t  // literal. All methods and attributes from this object\n\t  // are copies to the object passed in.\n\t  mixinTemplateContext: function mixinTemplateContext() {\n\t    var target = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n\t    var templateContext = this.getValue(this.getOption('templateContext'));\n\t    return _$1.extend(target, templateContext);\n\t  },\n\n\t  // Overriding Backbone.View's `delegateEvents` to handle\n\t  // `events` and `triggers`\n\t  delegateEvents: function delegateEvents(eventsArg) {\n\n\t    this._proxyBehaviorViewProperties();\n\t    this._buildEventProxies();\n\n\t    var viewEvents = this._getEvents(eventsArg);\n\n\t    if (typeof eventsArg === 'undefined') {\n\t      this.events = viewEvents;\n\t    }\n\n\t    var combinedEvents = _$1.extend({}, this._getBehaviorEvents(), viewEvents, this._getBehaviorTriggers(), this.getTriggers());\n\n\t    Backbone.View.prototype.delegateEvents.call(this, combinedEvents);\n\n\t    return this;\n\t  },\n\n\t  _getEvents: function _getEvents(eventsArg) {\n\t    var events = this.getValue(eventsArg || this.events);\n\n\t    return this.normalizeUIKeys(events);\n\t  },\n\n\t  // Configure `triggers` to forward DOM events to view\n\t  // events. `triggers: {\"click .foo\": \"do:foo\"}`\n\t  getTriggers: function getTriggers() {\n\t    if (!this.triggers) {\n\t      return;\n\t    }\n\n\t    // Allow `triggers` to be configured as a function\n\t    var triggers = this.normalizeUIKeys(_$1.result(this, 'triggers'));\n\n\t    // Configure the triggers, prevent default\n\t    // action and stop propagation of DOM events\n\t    return this._getViewTriggers(this, triggers);\n\t  },\n\n\t  // Handle `modelEvents`, and `collectionEvents` configuration\n\t  delegateEntityEvents: function delegateEntityEvents() {\n\t    var modelEvents = this.getValue(this.getOption('modelEvents'));\n\t    this.bindEntityEvents(this.model, modelEvents);\n\n\t    var collectionEvents = this.getValue(this.getOption('collectionEvents'));\n\t    this.bindEntityEvents(this.collection, collectionEvents);\n\n\t    // bind each behaviors model and collection events\n\t    this._delegateBehaviorEntityEvents();\n\n\t    return this;\n\t  },\n\n\t  // Handle unbinding `modelEvents`, and `collectionEvents` configuration\n\t  undelegateEntityEvents: function undelegateEntityEvents() {\n\t    var modelEvents = this.getValue(this.getOption('modelEvents'));\n\t    this.unbindEntityEvents(this.model, modelEvents);\n\n\t    var collectionEvents = this.getValue(this.getOption('collectionEvents'));\n\t    this.unbindEntityEvents(this.collection, collectionEvents);\n\n\t    // unbind each behaviors model and collection events\n\t    this._undelegateBehaviorEntityEvents();\n\n\t    return this;\n\t  },\n\n\t  // Internal helper method to verify whether the view hasn't been destroyed\n\t  _ensureViewIsIntact: function _ensureViewIsIntact() {\n\t    if (this._isDestroyed) {\n\t      throw new MarionetteError({\n\t        name: 'ViewDestroyedError',\n\t        message: 'View (cid: \"' + this.cid + '\") has already been destroyed and cannot be used.'\n\t      });\n\t    }\n\t  },\n\n\t  // Handle destroying the view and its children.\n\t  destroy: function destroy() {\n\t    if (this._isDestroyed) {\n\t      return this;\n\t    }\n\t    var shouldTriggerDetach = !!this._isAttached;\n\n\t    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t      args[_key] = arguments[_key];\n\t    }\n\n\t    this.triggerMethod.apply(this, ['before:destroy'].concat(args));\n\t    if (shouldTriggerDetach) {\n\t      this.triggerMethod('before:detach', this);\n\t    }\n\n\t    // unbind UI elements\n\t    this.unbindUIElements();\n\n\t    // remove the view from the DOM\n\t    // https://github.com/jashkenas/backbone/blob/1.2.3/backbone.js#L1235\n\t    this._removeElement();\n\n\t    if (shouldTriggerDetach) {\n\t      this._isAttached = false;\n\t      this.triggerMethod('detach', this);\n\t    }\n\n\t    // remove children after the remove to prevent extra paints\n\t    this._removeChildren();\n\n\t    this._destroyBehaviors(args);\n\n\t    this._isDestroyed = true;\n\t    this._isRendered = false;\n\t    this.triggerMethod.apply(this, ['destroy'].concat(args));\n\n\t    this.stopListening();\n\n\t    return this;\n\t  },\n\n\t  bindUIElements: function bindUIElements() {\n\t    this._bindUIElements();\n\t    this._bindBehaviorUIElements();\n\n\t    return this;\n\t  },\n\n\t  // This method unbinds the elements specified in the \"ui\" hash\n\t  unbindUIElements: function unbindUIElements() {\n\t    this._unbindUIElements();\n\t    this._unbindBehaviorUIElements();\n\n\t    return this;\n\t  },\n\n\t  getUI: function getUI(name) {\n\t    this._ensureViewIsIntact();\n\t    return this._getUI(name);\n\t  },\n\n\t  // used as the prefix for child view events\n\t  // that are forwarded through the layoutview\n\t  childViewEventPrefix: 'childview',\n\n\t  // import the `triggerMethod` to trigger events with corresponding\n\t  // methods if the method exists\n\t  triggerMethod: function triggerMethod$$() {\n\t    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n\t      args[_key2] = arguments[_key2];\n\t    }\n\n\t    var ret = triggerMethod.apply(this, args);\n\n\t    this._triggerEventOnBehaviors.apply(this, args);\n\t    this._triggerEventOnParentLayout.apply(this, args);\n\n\t    return ret;\n\t  },\n\n\t  // Cache `childViewEvents` and `childViewTriggers`\n\t  _buildEventProxies: function _buildEventProxies() {\n\t    this._childViewEvents = this.getValue(this.getOption('childViewEvents'));\n\t    this._childViewTriggers = this.getValue(this.getOption('childViewTriggers'));\n\t  },\n\n\t  _triggerEventOnParentLayout: function _triggerEventOnParentLayout(eventName) {\n\t    var layoutView = this._parentView();\n\t    if (!layoutView) {\n\t      return;\n\t    }\n\n\t    // invoke triggerMethod on parent view\n\t    var eventPrefix = layoutView.getOption('childViewEventPrefix');\n\t    var prefixedEventName = eventPrefix + ':' + eventName;\n\n\t    for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n\t      args[_key3 - 1] = arguments[_key3];\n\t    }\n\n\t    layoutView.triggerMethod.apply(layoutView, [prefixedEventName].concat(args));\n\n\t    // use the parent view's childViewEvents handler\n\t    var childViewEvents = layoutView.normalizeMethods(layoutView._childViewEvents);\n\n\t    if (!!childViewEvents && _$1.isFunction(childViewEvents[eventName])) {\n\t      childViewEvents[eventName].apply(layoutView, args);\n\t    }\n\n\t    // use the parent view's proxyEvent handlers\n\t    var childViewTriggers = layoutView._childViewTriggers;\n\n\t    // Call the event with the proxy name on the parent layout\n\t    if (childViewTriggers && _$1.isString(childViewTriggers[eventName])) {\n\t      layoutView.triggerMethod.apply(layoutView, [childViewTriggers[eventName]].concat(args));\n\t    }\n\t  },\n\n\t  // Walk the _parent tree until we find a view (if one exists).\n\t  // Returns the parent view hierarchically closest to this view.\n\t  _parentView: function _parentView() {\n\t    var parent = this._parent;\n\n\t    while (parent) {\n\t      if (parent instanceof View) {\n\t        return parent;\n\t      }\n\t      parent = parent._parent;\n\t    }\n\t  }\n\t};\n\n\t_$1.extend(ViewMixin, BehaviorsMixin, CommonMixin, DelegateEntityEventsMixin, TriggersMixin, UIMixin);\n\n\t// The standard view. Includes view events, automatic rendering\n\t// of Underscore templates, nested views, and more.\n\tvar View = Backbone.View.extend({\n\n\t  constructor: function constructor(options) {\n\t    this.render = _$1.bind(this.render, this);\n\n\t    this._setOptions(options);\n\n\t    MonitorViewEvents(this);\n\n\t    this._initBehaviors();\n\t    this._initRegions();\n\n\t    Backbone.View.prototype.constructor.call(this, this.options);\n\n\t    this.delegateEntityEvents();\n\t  },\n\n\t  // Serialize the view's model *or* collection, if\n\t  // it exists, for the template\n\t  serializeData: function serializeData() {\n\t    if (!this.model && !this.collection) {\n\t      return {};\n\t    }\n\n\t    // If we have a model, we serialize that\n\t    if (this.model) {\n\t      return this.serializeModel();\n\t    }\n\n\t    // Otherwise, we serialize the collection,\n\t    // making it available under the `items` property\n\t    return {\n\t      items: this.serializeCollection()\n\t    };\n\t  },\n\n\t  // Prepares the special `model` property of a view\n\t  // for being displayed in the template. By default\n\t  // we simply clone the attributes. Override this if\n\t  // you need a custom transformation for your view's model\n\t  serializeModel: function serializeModel() {\n\t    if (!this.model) {\n\t      return {};\n\t    }\n\t    return _$1.clone(this.model.attributes);\n\t  },\n\n\t  // Serialize a collection by cloning each of\n\t  // its model's attributes\n\t  serializeCollection: function serializeCollection() {\n\t    if (!this.collection) {\n\t      return {};\n\t    }\n\t    return this.collection.map(function (model) {\n\t      return _$1.clone(model.attributes);\n\t    });\n\t  },\n\n\t  // Render the view, defaulting to underscore.js templates.\n\t  // You can override this in your view definition to provide\n\t  // a very specific rendering for your view. In general, though,\n\t  // you should override the `Marionette.Renderer` object to\n\t  // change how Marionette renders views.\n\t  // Subsequent renders after the first will re-render all nested\n\t  // views.\n\t  render: function render() {\n\t    this._ensureViewIsIntact();\n\n\t    this.triggerMethod('before:render', this);\n\n\t    // If this is not the first render call, then we need to\n\t    // re-initialize the `el` for each region\n\t    if (this._isRendered) {\n\t      this._reInitRegions();\n\t    }\n\n\t    this._renderTemplate();\n\t    this.bindUIElements();\n\n\t    this._isRendered = true;\n\t    this.triggerMethod('render', this);\n\n\t    return this;\n\t  },\n\n\t  // Internal method to render the template with the serialized data\n\t  // and template context via the `Marionette.Renderer` object.\n\t  _renderTemplate: function _renderTemplate() {\n\t    var template = this.getTemplate();\n\n\t    // Allow template-less views\n\t    if (template === false) {\n\t      return;\n\t    }\n\n\t    // Add in entity data and template context\n\t    var data = this.mixinTemplateContext(this.serializeData());\n\n\t    // Render and add to el\n\t    var html = Renderer.render(template, data, this);\n\t    this.attachElContent(html);\n\t  },\n\n\t  // Get the template for this view\n\t  // instance. You can set a `template` attribute in the view\n\t  // definition or pass a `template: \"whatever\"` parameter in\n\t  // to the constructor options.\n\t  getTemplate: function getTemplate() {\n\t    return this.getOption('template');\n\t  },\n\n\t  // Attaches the content of a given view.\n\t  // This method can be overridden to optimize rendering,\n\t  // or to render in a non standard way.\n\t  //\n\t  // For example, using `innerHTML` instead of `$el.html`\n\t  //\n\t  // ```js\n\t  // attachElContent(html) {\n\t  //   this.el.innerHTML = html;\n\t  //   return this;\n\t  // }\n\t  // ```\n\t  attachElContent: function attachElContent(html) {\n\t    this.$el.html(html);\n\n\t    return this;\n\t  },\n\n\t  // called by ViewMixin destroy\n\t  _removeChildren: function _removeChildren() {\n\t    this.removeRegions();\n\t  },\n\n\t  _getImmediateChildren: function _getImmediateChildren() {\n\t    return _$1.chain(this.getRegions()).pluck('currentView').compact().value();\n\t  }\n\t});\n\n\t_$1.extend(View.prototype, ViewMixin, RegionsMixin);\n\n\t// A view that iterates over a Backbone.Collection\n\t// and renders an individual child view for each model.\n\tvar CollectionView = Backbone.View.extend({\n\n\t  // flag for maintaining the sorted order of the collection\n\t  sort: true,\n\n\t  // constructor\n\t  // option to pass `{sort: false}` to prevent the `CollectionView` from\n\t  // maintaining the sorted order of the collection.\n\t  // This will fallback onto appending childView's to the end.\n\t  //\n\t  // option to pass `{comparator: compFunction()}` to allow the `CollectionView`\n\t  // to use a custom sort order for the collection.\n\t  constructor: function constructor(options) {\n\t    this.render = _$1.bind(this.render, this);\n\n\t    this._setOptions(options);\n\n\t    MonitorViewEvents(this);\n\n\t    this._initBehaviors();\n\t    this.once('render', this._initialEvents);\n\t    this._initChildViewStorage();\n\t    this._bufferedChildren = [];\n\n\t    Backbone.View.prototype.constructor.call(this, this.options);\n\n\t    this.delegateEntityEvents();\n\t  },\n\n\t  // Instead of inserting elements one by one into the page, it's much more performant to insert\n\t  // elements into a document fragment and then insert that document fragment into the page\n\t  _startBuffering: function _startBuffering() {\n\t    this._isBuffering = true;\n\t  },\n\n\t  _endBuffering: function _endBuffering() {\n\t    var shouldTriggerAttach = !!this._isAttached;\n\n\t    this._isBuffering = false;\n\n\t    if (shouldTriggerAttach) {\n\t      _$1.each(this._getImmediateChildren(), function (child) {\n\t        triggerMethodOn(child, 'before:attach', child);\n\t      });\n\t    }\n\n\t    this.attachBuffer(this, this._createBuffer());\n\n\t    if (shouldTriggerAttach) {\n\t      _$1.each(this._getImmediateChildren(), function (child) {\n\t        child._isAttached = true;\n\t        triggerMethodOn(child, 'attach', child);\n\t      });\n\t    }\n\n\t    this._bufferedChildren = [];\n\t  },\n\n\t  // Configured the initial events that the collection view binds to.\n\t  _initialEvents: function _initialEvents() {\n\t    if (this.collection) {\n\t      this.listenTo(this.collection, 'add', this._onCollectionAdd);\n\t      this.listenTo(this.collection, 'remove', this._onCollectionRemove);\n\t      this.listenTo(this.collection, 'reset', this.render);\n\n\t      if (this.getOption('sort')) {\n\t        this.listenTo(this.collection, 'sort', this._sortViews);\n\t      }\n\t    }\n\t  },\n\n\t  // Handle a child added to the collection\n\t  _onCollectionAdd: function _onCollectionAdd(child, collection, opts) {\n\t    // `index` is present when adding with `at` since BB 1.2; indexOf fallback for < 1.2\n\t    var index = opts.at !== undefined && (opts.index || collection.indexOf(child));\n\n\t    // When filtered or when there is no initial index, calculate index.\n\t    if (this.getOption('filter') || index === false) {\n\t      index = _$1.indexOf(this._filteredSortedModels(index), child);\n\t    }\n\n\t    if (this._shouldAddChild(child, index)) {\n\t      this._destroyEmptyView();\n\t      var ChildView = this._getChildView(child);\n\t      this._addChild(child, ChildView, index);\n\t    }\n\t  },\n\n\t  // get the child view by model it holds, and remove it\n\t  _onCollectionRemove: function _onCollectionRemove(model) {\n\t    var view = this.children.findByModel(model);\n\t    this._removeChildView(view);\n\t    this._checkEmpty();\n\t  },\n\n\t  // Render children views. Override this method to provide your own implementation of a\n\t  // render function for the collection view.\n\t  render: function render() {\n\t    this._ensureViewIsIntact();\n\t    this.triggerMethod('before:render', this);\n\t    this._renderChildren();\n\t    this._isRendered = true;\n\t    this.triggerMethod('render', this);\n\t    return this;\n\t  },\n\n\t  // An efficient rendering used for filtering. Instead of modifying the whole DOM for the\n\t  // collection view, we are only adding or removing the related childrenViews.\n\t  setFilter: function setFilter(filter) {\n\t    var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n\t    var preventRender = _ref.preventRender;\n\n\t    var viewCanBeRendered = this._isRendered && !this._isDestroyed;\n\t    // The same filter or a `prevent` option won't render the filter.\n\t    // Nevertheless, a `prevent` option will modify the value.\n\t    if (!viewCanBeRendered || this.filter === filter) {\n\t      return;\n\t    }\n\t    if (!preventRender) {\n\t      this.triggerMethod('before:apply:filter', this);\n\t      var previousModels = this._filteredSortedModels();\n\t      this.filter = filter;\n\t      var models = this._filteredSortedModels();\n\t      this._applyModelDeltas(models, previousModels);\n\t      this.triggerMethod('apply:filter', this);\n\t    } else {\n\t      this.filter = filter;\n\t    }\n\t  },\n\n\t  // `removeFilter` is actually an alias for removing filters.\n\t  removeFilter: function removeFilter(options) {\n\t    this.setFilter(null, options);\n\t  },\n\n\t  // Calculate and apply difference by cid between `models` and `previousModels`.\n\t  _applyModelDeltas: function _applyModelDeltas(models, previousModels) {\n\t    var currentIds = {};\n\t    _$1.each(models, function (model, index) {\n\t      var addedChildNotExists = !this.children.findByModel(model);\n\t      if (addedChildNotExists) {\n\t        this._onCollectionAdd(model, this.collection, { at: index });\n\t      }\n\t      currentIds[model.cid] = true;\n\t    }, this);\n\t    _$1.each(previousModels, function (prevModel) {\n\t      var removedChildExists = !currentIds[prevModel.cid] && this.children.findByModel(prevModel);\n\t      if (removedChildExists) {\n\t        this._onCollectionRemove(prevModel);\n\t      }\n\t    }, this);\n\t  },\n\n\t  // Reorder DOM after sorting. When your element's rendering do not use their index,\n\t  // you can pass reorderOnSort: true to only reorder the DOM after a sort instead of\n\t  // rendering all the collectionView.\n\t  reorder: function reorder() {\n\t    var _this = this;\n\n\t    var children = this.children;\n\t    var models = this._filteredSortedModels();\n\t    var anyModelsAdded = _$1.some(models, function (model) {\n\t      return !children.findByModel(model);\n\t    });\n\n\t    // If there are any new models added due to filtering we need to add child views,\n\t    // so render as normal.\n\t    if (anyModelsAdded) {\n\t      this.render();\n\t    } else {\n\t      (function () {\n\t        // Get the DOM nodes in the same order as the models.\n\t        var elsToReorder = _$1.map(models, function (model, index) {\n\t          var view = children.findByModel(model);\n\t          view._index = index;\n\t          return view.el;\n\t        });\n\n\t        // Find the views that were children before but aren't in this new ordering.\n\t        var filteredOutViews = children.filter(function (view) {\n\t          return !_$1.contains(elsToReorder, view.el);\n\t        });\n\n\t        _this.triggerMethod('before:reorder', _this);\n\n\t        // Since append moves elements that are already in the DOM, appending the elements\n\t        // will effectively reorder them.\n\t        _this._appendReorderedChildren(elsToReorder);\n\n\t        // remove any views that have been filtered out\n\t        _$1.each(filteredOutViews, _this._removeChildView, _this);\n\t        _this._checkEmpty();\n\n\t        _this.triggerMethod('reorder', _this);\n\t      })();\n\t    }\n\t  },\n\n\t  // Render view after sorting. Override this method to change how the view renders\n\t  // after a `sort` on the collection.\n\t  resortView: function resortView() {\n\t    if (this.getOption('reorderOnSort')) {\n\t      this.reorder();\n\t    } else {\n\t      this._renderChildren();\n\t    }\n\t  },\n\n\t  // Internal method. This checks for any changes in the order of the collection.\n\t  // If the index of any view doesn't match, it will render.\n\t  _sortViews: function _sortViews() {\n\t    var models = this._filteredSortedModels();\n\n\t    // check for any changes in sort order of views\n\t    var orderChanged = _$1.find(models, function (item, index) {\n\t      var view = this.children.findByModel(item);\n\t      return !view || view._index !== index;\n\t    }, this);\n\n\t    if (orderChanged) {\n\t      this.resortView();\n\t    }\n\t  },\n\n\t  // Internal reference to what index a `emptyView` is.\n\t  _emptyViewIndex: -1,\n\n\t  // Internal method. Separated so that CompositeView can append to the childViewContainer\n\t  // if necessary\n\t  _appendReorderedChildren: function _appendReorderedChildren(children) {\n\t    this.$el.append(children);\n\t  },\n\n\t  // Internal method. Separated so that CompositeView can have more control over events\n\t  // being triggered, around the rendering process\n\t  _renderChildren: function _renderChildren() {\n\t    this._destroyEmptyView();\n\t    this._destroyChildren({ checkEmpty: false });\n\n\t    var models = this._filteredSortedModels();\n\t    if (this.isEmpty(this.collection, { processedModels: models })) {\n\t      this._showEmptyView();\n\t    } else {\n\t      this.triggerMethod('before:render:children', this);\n\t      this._startBuffering();\n\t      this._showCollection(models);\n\t      this._endBuffering();\n\t      this.triggerMethod('render:children', this);\n\t    }\n\t  },\n\n\t  // Internal method to loop through collection and show each child view.\n\t  _showCollection: function _showCollection(models) {\n\t    _$1.each(models, function (child, index) {\n\t      var ChildView = this._getChildView(child);\n\t      this._addChild(child, ChildView, index);\n\t    }, this);\n\t  },\n\n\t  // Allow the collection to be sorted by a custom view comparator\n\t  _filteredSortedModels: function _filteredSortedModels(addedAt) {\n\t    if (!this.collection) {\n\t      return [];\n\t    }\n\n\t    var viewComparator = this.getViewComparator();\n\t    var models = this.collection.models;\n\t    addedAt = Math.min(Math.max(addedAt, 0), models.length - 1);\n\n\t    if (viewComparator) {\n\t      var addedModel = undefined;\n\t      // Preserve `at` location, even for a sorted view\n\t      if (addedAt) {\n\t        addedModel = models[addedAt];\n\t        models = models.slice(0, addedAt).concat(models.slice(addedAt + 1));\n\t      }\n\t      models = this._sortModelsBy(models, viewComparator);\n\t      if (addedModel) {\n\t        models.splice(addedAt, 0, addedModel);\n\t      }\n\t    }\n\n\t    // Filter after sorting in case the filter uses the index\n\t    models = this._filterModels(models);\n\n\t    return models;\n\t  },\n\n\t  // Filter an array of models, if a filter exists\n\t  _filterModels: function _filterModels(models) {\n\t    if (this.getOption('filter')) {\n\t      models = _$1.filter(models, function (model, index) {\n\t        return this._shouldAddChild(model, index);\n\t      }, this);\n\t    }\n\t    return models;\n\t  },\n\n\t  _sortModelsBy: function _sortModelsBy(models, comparator) {\n\t    if (typeof comparator === 'string') {\n\t      return _$1.sortBy(models, function (model) {\n\t        return model.get(comparator);\n\t      }, this);\n\t    } else if (comparator.length === 1) {\n\t      return _$1.sortBy(models, comparator, this);\n\t    } else {\n\t      return models.sort(_$1.bind(comparator, this));\n\t    }\n\t  },\n\n\t  // Internal method to show an empty view in place of a collection of child views,\n\t  // when the collection is empty\n\t  _showEmptyView: function _showEmptyView() {\n\t    var EmptyView = this.getEmptyView();\n\n\t    if (EmptyView && !this._showingEmptyView) {\n\t      this._showingEmptyView = true;\n\n\t      var model = new Backbone.Model();\n\t      var emptyViewOptions = this.getOption('emptyViewOptions') || this.getOption('childViewOptions');\n\t      if (_$1.isFunction(emptyViewOptions)) {\n\t        emptyViewOptions = emptyViewOptions.call(this, model, this._emptyViewIndex);\n\t      }\n\n\t      var view = this._buildChildView(model, EmptyView, emptyViewOptions);\n\n\t      this.triggerMethod('before:render:empty', this, view);\n\t      this._addChildView(view, 0);\n\t      this.triggerMethod('render:empty', this, view);\n\n\t      view._parent = this;\n\t    }\n\t  },\n\n\t  // Internal method to destroy an existing emptyView instance if one exists. Called when\n\t  // a collection view has been rendered empty, and then a child is added to the collection.\n\t  _destroyEmptyView: function _destroyEmptyView() {\n\t    if (this._showingEmptyView) {\n\t      this.triggerMethod('before:remove:empty', this);\n\n\t      this._destroyChildren();\n\t      delete this._showingEmptyView;\n\n\t      this.triggerMethod('remove:empty', this);\n\t    }\n\t  },\n\n\t  // Retrieve the empty view class\n\t  getEmptyView: function getEmptyView() {\n\t    return this.getOption('emptyView');\n\t  },\n\n\t  // Retrieve the `childView` class, either from `this.options.childView` or from\n\t  // the `childView` in the object definition. The \"options\" takes precedence.\n\t  // The `childView` property can be either a view class or a function that\n\t  // returns a view class. If it is a function, it will receive the model that\n\t  // will be passed to the view instance (created from the returned view class)\n\t  _getChildView: function _getChildView(child) {\n\t    var childView = this.getOption('childView');\n\n\t    if (!childView) {\n\t      throw new MarionetteError({\n\t        name: 'NoChildViewError',\n\t        message: 'A \"childView\" must be specified'\n\t      });\n\t    }\n\n\t    // first check if the `childView` is a view class (the common case)\n\t    // then check if it's a function (which we assume that returns a view class)\n\t    if (childView.prototype instanceof Backbone.View || childView === Backbone.View) {\n\t      return childView;\n\t    } else if (_$1.isFunction(childView)) {\n\t      return childView.call(this, child);\n\t    } else {\n\t      throw new MarionetteError({\n\t        name: 'InvalidChildViewError',\n\t        message: '\"childView\" must be a view class or a function that returns a view class'\n\t      });\n\t    }\n\t  },\n\n\t  // Render the child's view and add it to the HTML for the collection view at a given index.\n\t  // This will also update the indices of later views in the collection in order to keep the\n\t  // children in sync with the collection.\n\t  _addChild: function _addChild(child, ChildView, index) {\n\t    var childViewOptions = this.getValue(this.getOption('childViewOptions'), child, index);\n\n\t    var view = this._buildChildView(child, ChildView, childViewOptions);\n\n\t    // increment indices of views after this one\n\t    this._updateIndices(view, true, index);\n\n\t    this.triggerMethod('before:add:child', this, view);\n\t    this._addChildView(view, index);\n\t    this.triggerMethod('add:child', this, view);\n\n\t    view._parent = this;\n\n\t    return view;\n\t  },\n\n\t  // Internal method. This decrements or increments the indices of views after the added/removed\n\t  // view to keep in sync with the collection.\n\t  _updateIndices: function _updateIndices(view, increment, index) {\n\t    if (!this.getOption('sort')) {\n\t      return;\n\t    }\n\n\t    if (increment) {\n\t      // assign the index to the view\n\t      view._index = index;\n\t    }\n\n\t    // update the indexes of views after this one\n\t    this.children.each(function (laterView) {\n\t      if (laterView._index >= view._index) {\n\t        laterView._index += increment ? 1 : -1;\n\t      }\n\t    });\n\t  },\n\n\t  // Internal Method. Add the view to children and render it at the given index.\n\t  _addChildView: function _addChildView(view, index) {\n\t    // Only trigger attach if already attached and not buffering,\n\t    // otherwise _endBuffering() or Region#show() handles this.\n\t    var shouldTriggerAttach = !this._isBuffering && this._isAttached;\n\n\t    // set up the child view event forwarding\n\t    this._proxyChildEvents(view);\n\n\t    // Store the child view itself so we can properly remove and/or destroy it later\n\t    this.children.add(view);\n\n\t    if (!view.supportsRenderLifecycle) {\n\t      triggerMethodOn(view, 'before:render', view);\n\t    }\n\n\t    // Render view\n\t    view.render();\n\n\t    if (!view.supportsRenderLifecycle) {\n\t      view._isRendered = true;\n\t      triggerMethodOn(view, 'render', view);\n\t    }\n\n\t    if (shouldTriggerAttach) {\n\t      triggerMethodOn(view, 'before:attach', view);\n\t    }\n\n\t    // Attach view\n\t    this.attachHtml(this, view, index);\n\n\t    if (shouldTriggerAttach) {\n\t      view._isAttached = true;\n\t      triggerMethodOn(view, 'attach', view);\n\t    }\n\t  },\n\n\t  // Build a `childView` for a model in the collection.\n\t  _buildChildView: function _buildChildView(child, ChildViewClass, childViewOptions) {\n\t    var options = _$1.extend({ model: child }, childViewOptions);\n\t    var childView = new ChildViewClass(options);\n\t    MonitorViewEvents(childView);\n\t    return childView;\n\t  },\n\n\t  // Remove the child view and destroy it. This function also updates the indices of later views\n\t  // in the collection in order to keep the children in sync with the collection.\n\t  _removeChildView: function _removeChildView(view) {\n\t    if (!view) {\n\t      return view;\n\t    }\n\n\t    this.triggerMethod('before:remove:child', this, view);\n\n\t    if (!view.supportsDestroyLifecycle) {\n\t      triggerMethodOn(view, 'before:destroy', view);\n\t    }\n\n\t    // call 'destroy' or 'remove', depending on which is found\n\t    if (view.destroy) {\n\t      view.destroy();\n\t    } else {\n\t      var shouldTriggerDetach = !!view._isAttached;\n\n\t      if (shouldTriggerDetach) {\n\t        triggerMethodOn(view, 'before:detach', view);\n\t      }\n\n\t      view.remove();\n\n\t      if (shouldTriggerDetach) {\n\t        view._isAttached = false;\n\t        triggerMethodOn(view, 'detach', view);\n\t      }\n\n\t      view._isDestroyed = true;\n\t    }\n\n\t    if (!view.supportsDestroyLifecycle) {\n\t      triggerMethodOn(view, 'destroy', view);\n\t    }\n\n\t    delete view._parent;\n\t    this.stopListening(view);\n\t    this.children.remove(view);\n\t    this.triggerMethod('remove:child', this, view);\n\n\t    // decrement the index of views after this one\n\t    this._updateIndices(view, false);\n\n\t    return view;\n\t  },\n\n\t  // check if the collection is empty or optionally whether an array of pre-processed models is empty\n\t  isEmpty: function isEmpty(collection, options) {\n\t    var models = undefined;\n\t    if (_$1.result(options, 'processedModels')) {\n\t      models = options.processedModels;\n\t    } else {\n\t      models = this.collection ? this.collection.models : [];\n\t      models = this._filterModels(models);\n\t    }\n\t    return models.length === 0;\n\t  },\n\n\t  // If empty, show the empty view\n\t  _checkEmpty: function _checkEmpty() {\n\t    if (this.isEmpty(this.collection)) {\n\t      this._showEmptyView();\n\t    }\n\t  },\n\n\t  // You might need to override this if you've overridden attachHtml\n\t  attachBuffer: function attachBuffer(collectionView, buffer) {\n\t    collectionView.$el.append(buffer);\n\t  },\n\n\t  // Create a fragment buffer from the currently buffered children\n\t  _createBuffer: function _createBuffer() {\n\t    var elBuffer = document.createDocumentFragment();\n\t    _$1.each(this._bufferedChildren, function (b) {\n\t      elBuffer.appendChild(b.el);\n\t    });\n\t    return elBuffer;\n\t  },\n\n\t  // Append the HTML to the collection's `el`. Override this method to do something other\n\t  // than `.append`.\n\t  attachHtml: function attachHtml(collectionView, childView, index) {\n\t    if (collectionView._isBuffering) {\n\t      // buffering happens on reset events and initial renders\n\t      // in order to reduce the number of inserts into the\n\t      // document, which are expensive.\n\t      collectionView._bufferedChildren.splice(index, 0, childView);\n\t    } else {\n\t      // If we've already rendered the main collection, append\n\t      // the new child into the correct order if we need to. Otherwise\n\t      // append to the end.\n\t      if (!collectionView._insertBefore(childView, index)) {\n\t        collectionView._insertAfter(childView);\n\t      }\n\t    }\n\t  },\n\n\t  // Internal method. Check whether we need to insert the view into the correct position.\n\t  _insertBefore: function _insertBefore(childView, index) {\n\t    var currentView = undefined;\n\t    var findPosition = this.getOption('sort') && index < this.children.length - 1;\n\t    if (findPosition) {\n\t      // Find the view after this one\n\t      currentView = this.children.find(function (view) {\n\t        return view._index === index + 1;\n\t      });\n\t    }\n\n\t    if (currentView) {\n\t      currentView.$el.before(childView.el);\n\t      return true;\n\t    }\n\n\t    return false;\n\t  },\n\n\t  // Internal method. Append a view to the end of the $el\n\t  _insertAfter: function _insertAfter(childView) {\n\t    this.$el.append(childView.el);\n\t  },\n\n\t  // Internal method to set up the `children` object for storing all of the child views\n\t  _initChildViewStorage: function _initChildViewStorage() {\n\t    this.children = new ChildViewContainer();\n\t  },\n\n\t  // called by ViewMixin destroy\n\t  _removeChildren: function _removeChildren() {\n\t    this._destroyChildren({ checkEmpty: false });\n\t  },\n\n\t  // Destroy the child views that this collection view is holding on to, if any\n\t  _destroyChildren: function _destroyChildren() {\n\t    var _ref2 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n\t    var checkEmpty = _ref2.checkEmpty;\n\n\t    this.triggerMethod('before:destroy:children', this);\n\t    var shouldCheckEmpty = checkEmpty !== false;\n\t    var childViews = this.children.map(_$1.identity);\n\n\t    this.children.each(this._removeChildView, this);\n\n\t    if (shouldCheckEmpty) {\n\t      this._checkEmpty();\n\t    }\n\n\t    this.triggerMethod('destroy:children', this);\n\t    return childViews;\n\t  },\n\n\t  // Return true if the given child should be shown. Return false otherwise.\n\t  // The filter will be passed (child, index, collection), where\n\t  //  'child' is the given model\n\t  //  'index' is the index of that model in the collection\n\t  //  'collection' is the collection referenced by this CollectionView\n\t  _shouldAddChild: function _shouldAddChild(child, index) {\n\t    var filter = this.getOption('filter');\n\t    return !_$1.isFunction(filter) || filter.call(this, child, index, this.collection);\n\t  },\n\n\t  // Set up the child view event forwarding. Uses a \"childview:\" prefix in front of all forwarded events.\n\t  _proxyChildEvents: function _proxyChildEvents(view) {\n\t    var prefix = this.getOption('childViewEventPrefix');\n\n\t    // Forward all child view events through the parent,\n\t    // prepending \"childview:\" to the event name\n\t    this.listenTo(view, 'all', function (eventName) {\n\n\t      var childEventName = prefix + ':' + eventName;\n\n\t      var childViewEvents = this.normalizeMethods(this._childViewEvents);\n\n\t      // call collectionView childViewEvent if defined\n\n\t      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t        args[_key - 1] = arguments[_key];\n\t      }\n\n\t      if (typeof childViewEvents !== 'undefined' && _$1.isFunction(childViewEvents[eventName])) {\n\t        childViewEvents[eventName].apply(this, args);\n\t      }\n\n\t      // use the parent view's proxyEvent handlers\n\t      var childViewTriggers = this._childViewTriggers;\n\n\t      // Call the event with the proxy name on the parent layout\n\t      if (childViewTriggers && _$1.isString(childViewTriggers[eventName])) {\n\t        this.triggerMethod.apply(this, [childViewTriggers[eventName]].concat(args));\n\t      }\n\n\t      this.triggerMethod.apply(this, [childEventName].concat(args));\n\t    });\n\t  },\n\n\t  _getImmediateChildren: function _getImmediateChildren() {\n\t    return _$1.values(this.children._views);\n\t  },\n\n\t  getViewComparator: function getViewComparator() {\n\t    return this.getOption('viewComparator');\n\t  }\n\t});\n\n\t_$1.extend(CollectionView.prototype, ViewMixin);\n\n\t// Used for rendering a branch-leaf, hierarchical structure.\n\t// Extends directly from CollectionView and also renders an\n\t// a child view as `modelView`, for the top leaf\n\tvar CompositeView = CollectionView.extend({\n\n\t  // Setting up the inheritance chain which allows changes to\n\t  // Marionette.CollectionView.prototype.constructor which allows overriding\n\t  // option to pass '{sort: false}' to prevent the CompositeView from\n\t  // maintaining the sorted order of the collection.\n\t  // This will fallback onto appending childView's to the end.\n\t  constructor: function constructor() {\n\t    deprecate('CompositeView is deprecated. Convert to View at your earliest convenience');\n\t    CollectionView.prototype.constructor.apply(this, arguments);\n\t  },\n\n\t  // Configured the initial events that the composite view\n\t  // binds to. Override this method to prevent the initial\n\t  // events, or to add your own initial events.\n\t  _initialEvents: function _initialEvents() {\n\n\t    // Bind only after composite view is rendered to avoid adding child views\n\t    // to nonexistent childViewContainer\n\n\t    if (this.collection) {\n\t      this.listenTo(this.collection, 'add', this._onCollectionAdd);\n\t      this.listenTo(this.collection, 'remove', this._onCollectionRemove);\n\t      this.listenTo(this.collection, 'reset', this.renderChildren);\n\n\t      if (this.getOption('sort')) {\n\t        this.listenTo(this.collection, 'sort', this._sortViews);\n\t      }\n\t    }\n\t  },\n\n\t  // Retrieve the `childView` to be used when rendering each of\n\t  // the items in the collection. The default is to return\n\t  // `this.childView` or Marionette.CompositeView if no `childView`\n\t  // has been defined. As happens in CollectionView, `childView` can\n\t  // be a function (which should return a view class).\n\t  _getChildView: function _getChildView(child) {\n\t    var childView = this.getOption('childView');\n\n\t    // for CompositeView, if `childView` is not specified, we'll get the same\n\t    // composite view class rendered for each child in the collection\n\t    // then check if the `childView` is a view class (the common case)\n\t    // finally check if it's a function (which we assume that returns a view class)\n\t    if (!childView) {\n\t      return this.constructor;\n\t    } else if (childView.prototype instanceof Backbone.View || childView === Backbone.View) {\n\t      return childView;\n\t    } else if (_$1.isFunction(childView)) {\n\t      return childView.call(this, child);\n\t    } else {\n\t      throw new MarionetteError({\n\t        name: 'InvalidChildViewError',\n\t        message: '\"childView\" must be a view class or a function that returns a view class'\n\t      });\n\t    }\n\t  },\n\n\t  // Return the serialized model\n\t  serializeData: function serializeData() {\n\t    return this.serializeModel();\n\t  },\n\n\t  // Renders the model and the collection.\n\t  render: function render() {\n\t    this._ensureViewIsIntact();\n\t    this._isRendering = true;\n\t    this.resetChildViewContainer();\n\n\t    this.triggerMethod('before:render', this);\n\n\t    this._renderTemplate();\n\t    this.bindUIElements();\n\t    this.renderChildren();\n\n\t    this._isRendering = false;\n\t    this._isRendered = true;\n\t    this.triggerMethod('render', this);\n\t    return this;\n\t  },\n\n\t  renderChildren: function renderChildren() {\n\t    if (this._isRendered || this._isRendering) {\n\t      CollectionView.prototype._renderChildren.call(this);\n\t    }\n\t  },\n\n\t  // You might need to override this if you've overridden attachHtml\n\t  attachBuffer: function attachBuffer(compositeView, buffer) {\n\t    var $container = this.getChildViewContainer(compositeView);\n\t    $container.append(buffer);\n\t  },\n\n\t  // Internal method. Append a view to the end of the $el.\n\t  // Overidden from CollectionView to ensure view is appended to\n\t  // childViewContainer\n\t  _insertAfter: function _insertAfter(childView) {\n\t    var $container = this.getChildViewContainer(this, childView);\n\t    $container.append(childView.el);\n\t  },\n\n\t  // Internal method. Append reordered childView'.\n\t  // Overidden from CollectionView to ensure reordered views\n\t  // are appended to childViewContainer\n\t  _appendReorderedChildren: function _appendReorderedChildren(children) {\n\t    var $container = this.getChildViewContainer(this);\n\t    $container.append(children);\n\t  },\n\n\t  // Internal method to ensure an `$childViewContainer` exists, for the\n\t  // `attachHtml` method to use.\n\t  getChildViewContainer: function getChildViewContainer(containerView, childView) {\n\t    if (!!containerView.$childViewContainer) {\n\t      return containerView.$childViewContainer;\n\t    }\n\n\t    var container;\n\t    var childViewContainer = getOption.call(containerView, 'childViewContainer');\n\t    if (childViewContainer) {\n\n\t      var selector = getValue.call(containerView, childViewContainer);\n\n\t      if (selector.charAt(0) === '@' && containerView.ui) {\n\t        container = containerView.ui[selector.substr(4)];\n\t      } else {\n\t        container = containerView.$(selector);\n\t      }\n\n\t      if (container.length <= 0) {\n\t        throw new MarionetteError({\n\t          name: 'ChildViewContainerMissingError',\n\t          message: 'The specified \"childViewContainer\" was not found: ' + containerView.childViewContainer\n\t        });\n\t      }\n\t    } else {\n\t      container = containerView.$el;\n\t    }\n\n\t    containerView.$childViewContainer = container;\n\t    return container;\n\t  },\n\n\t  // Internal method to reset the `$childViewContainer` on render\n\t  resetChildViewContainer: function resetChildViewContainer() {\n\t    if (this.$childViewContainer) {\n\t      this.$childViewContainer = undefined;\n\t    }\n\t  }\n\t});\n\n\t// To prevent duplication but allow the best View organization\n\t// Certain View methods are mixed directly into the deprecated CompositeView\n\tvar MixinFromView = _$1.pick(View.prototype, 'serializeModel', 'getTemplate', '_renderTemplate', 'attachElContent');\n\t_$1.extend(CompositeView.prototype, MixinFromView);\n\n\tvar Behavior = MarionetteObject.extend({\n\t  cidPrefix: 'mnb',\n\n\t  constructor: function constructor(options, view) {\n\t    // Setup reference to the view.\n\t    // this comes in handle when a behavior\n\t    // wants to directly talk up the chain\n\t    // to the view.\n\t    this.view = view;\n\t    this.defaults = _$1.clone(_$1.result(this, 'defaults', {}));\n\t    this._setOptions(this.defaults, options);\n\t    // Construct an internal UI hash using\n\t    // the behaviors UI hash and then the view UI hash.\n\t    // This allows the user to use UI hash elements\n\t    // defined in the parent view as well as those\n\t    // defined in the given behavior.\n\t    // This order will help the reuse and share of a behavior\n\t    // between multiple views, while letting a view override a\n\t    // selector under an UI key.\n\t    this.ui = _$1.extend({}, _$1.result(this, 'ui'), _$1.result(view, 'ui'));\n\n\t    MarionetteObject.apply(this, arguments);\n\t  },\n\n\t  // proxy behavior $ method to the view\n\t  // this is useful for doing jquery DOM lookups\n\t  // scoped to behaviors view.\n\t  $: function $() {\n\t    return this.view.$.apply(this.view, arguments);\n\t  },\n\n\t  // Stops the behavior from listening to events.\n\t  // Overrides Object#destroy to prevent additional events from being triggered.\n\t  destroy: function destroy() {\n\t    this.stopListening();\n\n\t    return this;\n\t  },\n\n\t  proxyViewProperties: function proxyViewProperties() {\n\t    this.$el = this.view.$el;\n\t    this.el = this.view.el;\n\n\t    return this;\n\t  },\n\n\t  bindUIElements: function bindUIElements() {\n\t    this._bindUIElements();\n\n\t    return this;\n\t  },\n\n\t  unbindUIElements: function unbindUIElements() {\n\t    this._unbindUIElements();\n\n\t    return this;\n\t  },\n\n\t  getUI: function getUI(name) {\n\t    this.view._ensureViewIsIntact();\n\t    return this._getUI(name);\n\t  },\n\n\t  // Handle `modelEvents`, and `collectionEvents` configuration\n\t  delegateEntityEvents: function delegateEntityEvents() {\n\t    this._delegateEntityEvents(this.view.model, this.view.collection);\n\n\t    return this;\n\t  },\n\n\t  undelegateEntityEvents: function undelegateEntityEvents() {\n\t    this._undelegateEntityEvents(this.view.model, this.view.collection);\n\n\t    return this;\n\t  },\n\n\t  getEvents: function getEvents() {\n\t    // Normalize behavior events hash to allow\n\t    // a user to use the @ui. syntax.\n\t    var behaviorEvents = this.normalizeUIKeys(_$1.result(this, 'events'));\n\n\t    // binds the handler to the behavior and builds a unique eventName\n\t    return _$1.reduce(behaviorEvents, function (events, behaviorHandler, key) {\n\t      if (!_$1.isFunction(behaviorHandler)) {\n\t        behaviorHandler = this[behaviorHandler];\n\t      }\n\t      if (!behaviorHandler) {\n\t        return;\n\t      }\n\t      key = getUniqueEventName(key);\n\t      events[key] = _$1.bind(behaviorHandler, this);\n\t      return events;\n\t    }, {}, this);\n\t  },\n\n\t  // Internal method to build all trigger handlers for a given behavior\n\t  getTriggers: function getTriggers() {\n\t    if (!this.triggers) {\n\t      return;\n\t    }\n\n\t    // Normalize behavior triggers hash to allow\n\t    // a user to use the @ui. syntax.\n\t    var behaviorTriggers = this.normalizeUIKeys(_$1.result(this, 'triggers'));\n\n\t    return this._getViewTriggers(this.view, behaviorTriggers);\n\t  }\n\n\t});\n\n\t_$1.extend(Behavior.prototype, DelegateEntityEventsMixin, TriggersMixin, UIMixin);\n\n\tvar previousMarionette = Backbone.Marionette;\n\tvar Marionette = Backbone.Marionette = {};\n\n\t// This allows you to run multiple instances of Marionette on the same\n\t// webapp. After loading the new version, call `noConflict()` to\n\t// get a reference to it. At the same time the old version will be\n\t// returned to Backbone.Marionette.\n\tMarionette.noConflict = function () {\n\t  Backbone.Marionette = previousMarionette;\n\t  return this;\n\t};\n\n\t// Utilities\n\tMarionette.bindEntityEvents = proxy(bindEntityEvents);\n\tMarionette.unbindEntityEvents = proxy(unbindEntityEvents);\n\tMarionette.bindRadioEvents = proxy(bindEntityEvents);\n\tMarionette.unbindRadioEvents = proxy(unbindEntityEvents);\n\tMarionette.bindRadioRequests = proxy(bindRadioRequests);\n\tMarionette.unbindRadioRequests = proxy(unbindRadioRequests);\n\tMarionette.mergeOptions = proxy(mergeOptions);\n\tMarionette.getOption = proxy(getOption);\n\tMarionette.normalizeMethods = proxy(normalizeMethods);\n\tMarionette.extend = extend;\n\tMarionette.isNodeAttached = isNodeAttached;\n\tMarionette.deprecate = deprecate;\n\tMarionette.triggerMethod = proxy(triggerMethod);\n\tMarionette.triggerMethodOn = triggerMethodOn;\n\tMarionette.triggerMethodMany = triggerMethodMany;\n\tMarionette.isEnabled = isEnabled;\n\tMarionette.setEnabled = setEnabled;\n\tMarionette.MonitorViewEvents = MonitorViewEvents;\n\n\tMarionette.Behaviors = {};\n\tMarionette.Behaviors.behaviorsLookup = behaviorsLookup;\n\n\t// Classes\n\tMarionette.Application = Application;\n\tMarionette.AppRouter = AppRouter;\n\tMarionette.Renderer = Renderer;\n\tMarionette.TemplateCache = TemplateCache;\n\tMarionette.View = View;\n\tMarionette.CollectionView = CollectionView;\n\tMarionette.CompositeView = CompositeView;\n\tMarionette.Behavior = Behavior;\n\tMarionette.Region = Region;\n\tMarionette.Error = MarionetteError;\n\tMarionette.Object = MarionetteObject;\n\n\t// Configuration\n\tMarionette.DEV_MODE = false;\n\tMarionette.FEATURES = FEATURES;\n\tMarionette.VERSION = version;\n\n\treturn Marionette;\n\n}));\n\n//# sourceMappingURL=backbone.marionette.js.map\n","// Bind Entity Events & Unbind Entity Events\n// -----------------------------------------\n//\n// These methods are used to bind/unbind a backbone \"entity\" (e.g. collection/model)\n// to methods on a target object.\n//\n// The first parameter, `target`, must have the Backbone.Events module mixed in.\n//\n// The second parameter is the `entity` (Backbone.Model, Backbone.Collection or\n// any object that has Backbone.Events mixed in) to bind the events from.\n//\n// The third parameter is a hash of { \"event:name\": \"eventHandler\" }\n// configuration. Multiple handlers can be separated by a space. A\n// function can be supplied instead of a string handler name.\n\nimport _               from 'underscore';\nimport MarionetteError from './error';\n\n// Bind/unbind the event to handlers specified as a string of\n// handler names on the target object\nfunction bindFromStrings(target, entity, evt, methods, actionName) {\n  var methodNames = methods.split(/\\s+/);\n\n  _.each(methodNames, function(methodName) {\n    var method = target[methodName];\n    if (!method) {\n      throw new MarionetteError(`Method \"${methodName}\" was configured as an event handler, but does not exist.`);\n    }\n\n    target[actionName](entity, evt, method);\n  });\n}\n\n// generic looping function\nfunction iterateEvents(target, entity, bindings, actionName) {\n  if (!entity || !bindings) { return; }\n\n  // type-check bindings\n  if (!_.isObject(bindings)) {\n    throw new MarionetteError({\n      message: 'Bindings must be an object.',\n      url: 'marionette.functions.html#marionettebindentityevents'\n    });\n  }\n\n  // iterate the bindings and bind/unbind them\n  _.each(bindings, function(method, evt) {\n\n    // allow for a list of method names as a string\n    if (_.isString(method)) {\n      bindFromStrings(target, entity, evt, method, actionName);\n      return;\n    }\n\n    target[actionName](entity, evt, method);\n  });\n}\n\nfunction bindEntityEvents(entity, bindings) {\n  iterateEvents(this, entity, bindings, 'listenTo');\n}\n\nfunction unbindEntityEvents(entity, bindings) {\n  iterateEvents(this, entity, bindings, 'stopListening');\n}\n\n// Export Public API\nexport {\n  bindEntityEvents,\n  unbindEntityEvents\n};\n","// Bind/Unbind Radio Requests\n// -----------------------------------------\n//\n// These methods are used to bind/unbind a backbone.radio request\n// to methods on a target object.\n//\n// The first parameter, `target`, will set the context of the reply method\n//\n// The second parameter is the `Radio.channel` to bind the reply to.\n//\n// The third parameter is a hash of { \"request:name\": \"replyHandler\" }\n// configuration. A function can be supplied instead of a string handler name.\n\nimport _ from 'underscore';\nimport normalizeMethods from './utils/normalizeMethods';\nimport MarionetteError from './error';\n\nfunction iterateReplies(target, channel, bindings, actionName) {\n  if (!channel || !bindings) { return; }\n\n  // type-check bindings\n  if (!_.isObject(bindings)) {\n    throw new MarionetteError({\n      message: 'Bindings must be an object.',\n      url: 'marionette.functions.html#marionettebindradiorequests'\n    });\n  }\n\n  var normalizedRadioRequests = normalizeMethods.call(target, bindings);\n\n  channel[actionName](normalizedRadioRequests, target);\n}\n\nfunction bindRadioRequests(channel, bindings) {\n  iterateReplies(this, channel, bindings, 'reply');\n}\n\nfunction unbindRadioRequests(channel, bindings) {\n  iterateReplies(this, channel, bindings, 'stopReplying');\n}\n\nexport {\n  bindRadioRequests,\n  unbindRadioRequests\n};\n","/* jshint maxstatements: 14, maxcomplexity: 7 */\n\n// Trigger Method\n// --------------\n\nimport _         from 'underscore';\nimport getOption from './utils/getOption';\n\n// split the event name on the \":\"\nvar splitter = /(^|:)(\\w)/gi;\n\n// take the event section (\"section1:section2:section3\")\n// and turn it in to uppercase name onSection1Section2Section3\nfunction getEventName(match, prefix, eventName) {\n  return eventName.toUpperCase();\n}\n\n// Trigger an event and/or a corresponding method name. Examples:\n//\n// `this.triggerMethod(\"foo\")` will trigger the \"foo\" event and\n// call the \"onFoo\" method.\n//\n// `this.triggerMethod(\"foo:bar\")` will trigger the \"foo:bar\" event and\n// call the \"onFooBar\" method.\nexport function triggerMethod(event, ...args) {\n  // get the method name from the event name\n  var methodName = 'on' + event.replace(splitter, getEventName);\n  var method = getOption.call(this, methodName);\n  var result;\n\n  // call the onMethodName if it exists\n  if (_.isFunction(method)) {\n    // pass all args, except the event name\n    result = method.apply(this, args);\n  }\n\n  // trigger the event\n  this.trigger(event, ...args);\n\n  return result;\n}\n\n// triggerMethodOn invokes triggerMethod on a specific context\n//\n// e.g. `Marionette.triggerMethodOn(view, 'show')`\n// will trigger a \"show\" event or invoke onShow the view.\nexport function triggerMethodOn(context, ...args) {\n  var fnc = _.isFunction(context.triggerMethod) ? context.triggerMethod : triggerMethod;\n  return fnc.apply(context, args);\n}\n\n// triggerMethodMany invokes triggerMethod on many targets from a source\n// it's useful for standardizing a pattern where we propagate an event from a source\n// to many targets.\n//\n// For each target we want to follow the pattern\n// target.triggerMethod(event, target, ...args)\n// e.g childview.triggerMethod('attach', childView, ...args)\nexport function triggerMethodMany(targets, eventName, ...args) {\n  _.each(targets, function(target) {\n    triggerMethodOn(target, eventName, target, ...args);\n  });\n}\n","// Add Feature flags here\n// e.g. 'class' => false\nvar FEATURES = {\n};\n\nfunction isEnabled(name) {\n  return !!FEATURES[name];\n}\n\nfunction setEnabled(name, state) {\n  return FEATURES[name] = state;\n}\n\nexport {\n  FEATURES,\n  setEnabled,\n  isEnabled\n};\n","// DOM Refresh\n// -----------\n\nimport { triggerMethodOn } from './trigger-method';\n\n// Trigger method on children unless a pure Backbone.View\nfunction triggerMethodChildren(view, event, beforeEachTrigger) {\n  if (!view._getImmediateChildren) { return; }\n  _.each(view._getImmediateChildren(), child => {\n    if (beforeEachTrigger) {\n      beforeEachTrigger(child);\n    }\n    triggerMethodOn(child, event, child);\n  });\n}\n\nfunction setIsAttached(view) {\n  view._isAttached = true;\n}\n\nfunction unsetIsAttached(view) {\n  view._isAttached = false;\n}\n\n// Monitor a view's state, propagating attach/detach events to children and firing dom:refresh\n// whenever a rendered view is attached or an attached view is rendered.\nfunction MonitorViewEvents(view) {\n  if (view._areViewEventsMonitored) { return; }\n\n  view._areViewEventsMonitored = true;\n\n  function handleBeforeAttach() {\n    triggerMethodChildren(view, 'before:attach');\n  }\n\n  function handleAttach() {\n    triggerMethodChildren(view, 'attach', setIsAttached);\n    triggerDOMRefresh();\n  }\n\n  function handleBeforeDetach() {\n    triggerMethodChildren(view, 'before:detach');\n  }\n\n  function handleDetach() {\n    triggerMethodChildren(view, 'detach', unsetIsAttached);\n  }\n\n  function handleRender() {\n    triggerDOMRefresh();\n  }\n\n  function triggerDOMRefresh() {\n    if (view._isAttached && view._isRendered) {\n      triggerMethodOn(view, 'dom:refresh', view);\n    }\n  }\n\n  view.on({\n    'before:attach': handleBeforeAttach,\n    'attach':        handleAttach,\n    'before:detach': handleBeforeDetach,\n    'detach':        handleDetach,\n    'render':        handleRender\n  });\n}\n\nexport default MonitorViewEvents;\n","import MarionetteError          from '../error';\n\n// Placeholder method to be extended by the user.\n// The method should define the object that stores the behaviors.\n// i.e.\n//\n// ```js\n// Marionette.Behaviors.behaviorsLookup: function() {\n//   return App.Behaviors\n// }\n// ```\nexport default function behaviorsLookup() {\n  throw new MarionetteError({\n    message: 'You must define where your behaviors are stored.',\n    url: 'marionette.behaviors.md#behaviorslookup'\n  });\n}\n","import _ from 'underscore';\n\n// Borrow event splitter from Backbone\nvar delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\nfunction uniqueName(eventName, selector) {\n  return [eventName + _.uniqueId('.evt'), selector].join(' ');\n}\n\n// Set event name to be namespaced using a unique index\n// to generate a non colliding event namespace\n// http://api.jquery.com/event.namespace/\nvar getUniqueEventName = function(eventName) {\n  var match = eventName.match(delegateEventSplitter);\n  return uniqueName(match[1], match[2]);\n};\n\nexport default getUniqueEventName;\n","import _ from 'underscore';\nimport getUniqueEventName from '../utils/getUniqueEventName';\n\n// Internal method to create an event handler for a given `triggerDef` like\n// 'click:foo'\nfunction buildViewTrigger(view, triggerDef) {\n  if (_.isString(triggerDef)) {\n    triggerDef = {event: triggerDef};\n  }\n\n  const eventName = triggerDef.event;\n  const shouldPreventDefault = triggerDef.preventDefault !== false;\n  const shouldStopPropagation = triggerDef.stopPropagation !== false;\n\n  return function(e) {\n    if (shouldPreventDefault) {\n      e.preventDefault();\n    }\n\n    if (shouldStopPropagation) {\n      e.stopPropagation();\n    }\n\n    view.triggerMethod(eventName, view);\n  };\n}\n\nexport default {\n\n  // Configure `triggers` to forward DOM events to view\n  // events. `triggers: {\"click .foo\": \"do:foo\"}`\n  _getViewTriggers: function(view, triggers) {\n    // Configure the triggers, prevent default\n    // action and stop propagation of DOM events\n    return _.reduce(triggers, function(events, value, key) {\n      key = getUniqueEventName(key);\n      events[key] = buildViewTrigger(view, value);\n      return events;\n    }, {}, this);\n  }\n\n};\n","import _                        from 'underscore';\nimport getValue                 from '../utils/getValue';\nimport { triggerMethod }        from '../trigger-method';\nimport Marionette               from '../backbone.marionette';\n\n// Takes care of getting the behavior class\n// given options and a key.\n// If a user passes in options.behaviorClass\n// default to using that.\n// If a user passes in a Behavior Class directly, use that\n// Otherwise delegate the lookup to the users `behaviorsLookup` implementation.\nfunction getBehaviorClass(options, key) {\n  if (options.behaviorClass) {\n    return options.behaviorClass;\n    //treat functions as a Behavior constructor\n  } else if (_.isFunction(options)) {\n    return options;\n  }\n\n  // behaviorsLookup can be either a flat object or a method\n  return getValue(Marionette.Behaviors.behaviorsLookup, options, key)[key];\n}\n\n// Iterate over the behaviors object, for each behavior\n// instantiate it and get its grouped behaviors.\n// This accepts a list of behaviors in either an object or array form\nfunction parseBehaviors(view, behaviors) {\n  return _.chain(behaviors).map(function(options, key) {\n    var BehaviorClass = getBehaviorClass(options, key);\n    //if we're passed a class directly instead of an object\n    var _options = options === BehaviorClass ? {} : options;\n    var behavior = new BehaviorClass(_options, view);\n    var nestedBehaviors = parseBehaviors(view, _.result(behavior, 'behaviors'));\n\n    return [behavior].concat(nestedBehaviors);\n  }).flatten().value();\n}\n\nexport default {\n  _initBehaviors: function() {\n    var behaviors = this.getValue(this.getOption('behaviors'));\n\n    // Behaviors defined on a view can be a flat object literal\n    // or it can be a function that returns an object.\n    this._behaviors = _.isObject(behaviors) ? parseBehaviors(this, behaviors) : {};\n  },\n\n  _getBehaviorTriggers: function() {\n    var triggers = _.invoke(this._behaviors, 'getTriggers');\n    return _.extend({}, ...triggers);\n  },\n\n  _getBehaviorEvents: function() {\n    var events = _.invoke(this._behaviors, 'getEvents');\n    return _.extend({}, ...events);\n  },\n\n  // proxy behavior $el to the view's $el.\n  _proxyBehaviorViewProperties: function() {\n    _.invoke(this._behaviors, 'proxyViewProperties');\n  },\n\n  // delegate modelEvents and collectionEvents\n  _delegateBehaviorEntityEvents: function() {\n    _.invoke(this._behaviors, 'delegateEntityEvents');\n  },\n\n  // undelegate modelEvents and collectionEvents\n  _undelegateBehaviorEntityEvents: function() {\n    _.invoke(this._behaviors, 'undelegateEntityEvents');\n  },\n\n  _destroyBehaviors: function(options) {\n    // Call destroy on each behavior after\n    // destroying the view.\n    // This unbinds event listeners\n    // that behaviors have registered for.\n    _.invoke(this._behaviors, 'destroy', options);\n  },\n\n  _bindBehaviorUIElements: function() {\n    _.invoke(this._behaviors, 'bindUIElements');\n  },\n\n  _unbindBehaviorUIElements: function() {\n    _.invoke(this._behaviors, 'unbindUIElements');\n  },\n\n  _triggerEventOnBehaviors: function(...args) {\n    var behaviors = this._behaviors;\n    // Use good ol' for as this is a very hot function\n    for (var i = 0, length = behaviors && behaviors.length; i < length; i++) {\n      triggerMethod.apply(behaviors[i], args);\n    }\n  }\n};\n","// Marionette.extend\n// -----------------\n\nimport Backbone from 'backbone';\n\n// Borrow the Backbone `extend` method so we can use it as needed\nvar extend = Backbone.Model.extend;\n\nexport default extend;\n","// Error\n// -----\n\nimport _      from 'underscore';\nimport extend from './utils/extend';\nimport {version} from '../package.json';\n\nvar errorProps = ['description', 'fileName', 'lineNumber', 'name', 'message', 'number'];\n\nvar MarionetteError = extend.call(Error, {\n  urlRoot: 'http://marionettejs.com/docs/v' + version + '/',\n\n  constructor: function MarionetteError(message, options) {\n    if (_.isObject(message)) {\n      options = message;\n      message = options.message;\n    } else if (!options) {\n      options = {};\n    }\n\n    var error = Error.call(this, message);\n    _.extend(this, _.pick(error, errorProps), _.pick(options, errorProps));\n\n    this.captureStackTrace();\n\n    if (options.url) {\n      this.url = this.urlRoot + options.url;\n    }\n  },\n\n  captureStackTrace: function() {\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, MarionetteError);\n    }\n  },\n\n  toString: function() {\n    return this.name + ': ' + this.message + (this.url ? ' See: ' + this.url : '');\n  }\n});\n\nMarionetteError.extend = extend;\n\nexport default MarionetteError;\n","//Internal utility for creating context style global utils\nvar proxy = function(method) {\n  return function(context, ...args) {\n    return method.apply(context, args);\n  };\n};\n\nexport default proxy;\n","import _ from 'underscore';\n\n// Marionette.normalizeMethods\n// ----------------------\n\n// Pass in a mapping of events => functions or function names\n// and return a mapping of events => functions\nvar normalizeMethods = function(hash) {\n  return _.reduce(hash, function(normalizedHash, method, name) {\n    if (!_.isFunction(method)) {\n      method = this[method];\n    }\n    if (method) {\n      normalizedHash[name] = method;\n    }\n    return normalizedHash;\n  }, {}, this);\n};\n\nexport default normalizeMethods;\n","import _ from 'underscore';\n\n// Merge `keys` from `options` onto `this`\nvar mergeOptions = function(options, keys) {\n  if (!options) { return; }\n  _.extend(this, _.pick(options, keys));\n};\n\nexport default mergeOptions;\n","// Marionette.getOption\n// --------------------\n\n// Retrieve an object, function or other value from the\n// object or its `options`, with `options` taking precedence.\nvar getOption = function(optionName) {\n  if (!optionName) { return; }\n  if (this.options && (this.options[optionName] !== undefined)) {\n    return this.options[optionName];\n  } else {\n    return this[optionName];\n  }\n};\n\nexport default getOption;\n","// Marionette.isNodeAttached\n// -------------------------\n\nimport Backbone from 'backbone';\n\n// Determine if `el` is a child of the document\nvar isNodeAttached = function(el) {\n  return Backbone.$.contains(document.documentElement, el);\n};\n\nexport default isNodeAttached;\n","/* global console */\n\nimport _ from 'underscore';\n\nimport Marionette from '../backbone.marionette';\n\nvar deprecate = function(message, test) {\n  if (_.isObject(message)) {\n    message = (\n      message.prev + ' is going to be removed in the future. ' +\n      'Please use ' + message.next + ' instead.' +\n      (message.url ? ' See: ' + message.url : '')\n    );\n  }\n\n  if (!Marionette.DEV_MODE) {\n    return;\n  }\n\n  if ((test === undefined || !test) && !deprecate._cache[message]) {\n    deprecate._warn('Deprecation warning: ' + message);\n    deprecate._cache[message] = true;\n  }\n};\n\ndeprecate._console = typeof console !== 'undefined' ? console : {};\ndeprecate._warn = function() {\n  var warn = deprecate._console.warn || deprecate._console.log || function() {};\n  return warn.apply(deprecate._console, arguments);\n};\ndeprecate._cache = {};\n\nexport default deprecate;\n","import Radio from 'backbone.radio';\n\nimport {\n  bindRadioRequests,\n  unbindRadioRequests\n} from '../bind-radio-requests';\n\nimport {\n  bindEntityEvents as bindRadioEvents,\n  unbindEntityEvents as unbindRadioEvents\n} from '../bind-entity-events';\n\nexport default {\n\n  _initRadio: function() {\n    var channelName = this.getValue(this.getOption('channelName'));\n\n    if (!channelName) {\n      return;\n    }\n\n    var channel = this._channel = Radio.channel(channelName);\n\n    var radioEvents = this.getValue(this.getOption('radioEvents'));\n    this.bindRadioEvents(channel, radioEvents);\n\n    var radioRequests = this.getValue(this.getOption('radioRequests'));\n    this.bindRadioRequests(channel, radioRequests);\n\n    this.on('destroy', this._destroyRadio);\n  },\n\n  _destroyRadio: function() {\n    this._channel.stopReplying(null, null, this);\n  },\n\n  getChannel: function() {\n    return this._channel;\n  },\n\n  // Proxy `bindRadioEvents`\n  bindRadioEvents: bindRadioEvents,\n\n  // Proxy `unbindRadioEvents`\n  unbindRadioEvents: unbindRadioEvents,\n\n  // Proxy `bindRadioRequests`\n  bindRadioRequests: bindRadioRequests,\n\n  // Proxy `unbindRadioRequests`\n  unbindRadioRequests: unbindRadioRequests\n\n};\n","import _ from 'underscore';\n\n// Internal utility for setting options consistently across Mn\nvar _setOptions = function(...args) {\n  this.options = _.extend({}, _.result(this, 'options'), ...args);\n};\n\nexport default _setOptions;\n","import _ from 'underscore';\n\n// Similar to `_.result`, this is a simple helper\n// If a function is provided we call it with context\n// otherwise just return the value. If the value is\n// undefined return a default value\nvar getValue = function(value, ...args) {\n  if (_.isFunction(value)) {\n    return value.apply(this, args);\n  }\n  return value;\n};\n\nexport default getValue;\n","import getOption                from '../utils/getOption';\nimport getValue                 from '../utils/getValue';\nimport mergeOptions             from '../utils/mergeOptions';\nimport normalizeMethods         from '../utils/normalizeMethods';\nimport _setOptions              from '../utils/_setOptions';\nimport {\n  bindEntityEvents,\n  unbindEntityEvents\n}                               from '../bind-entity-events';\n\nexport default {\n  getValue: getValue,\n\n  // Imports the \"normalizeMethods\" to transform hashes of\n  // events=>function references/names to a hash of events=>function references\n  normalizeMethods: normalizeMethods,\n\n  _setOptions: _setOptions,\n\n  // A handy way to merge passed-in options onto the instance\n  mergeOptions: mergeOptions,\n\n  // Enable getting options from this or this.options by name.\n  getOption: getOption,\n\n  // Enable binding view's events from another entity.\n  bindEntityEvents: bindEntityEvents,\n\n  // Enable unbinding view's events from another entity.\n  unbindEntityEvents: unbindEntityEvents\n};\n","// Object\n// ------\n\nimport _ from 'underscore';\nimport Backbone from 'backbone';\nimport extend from './utils/extend';\nimport CommonMixin from './mixins/common';\nimport RadioMixin from './mixins/radio';\nimport { triggerMethod } from './trigger-method';\n\n// A Base Class that other Classes should descend from.\n// Object borrows many conventions and utilities from Backbone.\nvar MarionetteObject = function(options) {\n  this._setOptions(options);\n  this.cid = _.uniqueId(this.cidPrefix);\n  this._initRadio();\n  this.initialize.apply(this, arguments);\n};\n\nMarionetteObject.extend = extend;\n\n// Object Methods\n// --------------\n\n// Ensure it can trigger events with Backbone.Events\n_.extend(MarionetteObject.prototype, Backbone.Events, CommonMixin, RadioMixin, {\n  cidPrefix: 'mno',\n\n  // for parity with Marionette.AbstractView lifecyle\n  _isDestroyed: false,\n\n  isDestroyed: function() {\n    return this._isDestroyed();\n  },\n\n  //this is a noop method intended to be overridden by classes that extend from this base\n  initialize: function() {},\n\n  destroy: function(...args) {\n    if (this._isDestroyed) { return this; }\n\n    this.triggerMethod('before:destroy', ...args);\n\n    // mark as destroyed before doing the actual destroy, to\n    // prevent infinite loops within \"destroy\" event handlers\n    this._isDestroyed = true;\n    this.triggerMethod('destroy', ...args);\n    this.stopListening();\n\n    return this;\n  },\n\n  triggerMethod: triggerMethod\n});\n\nexport default MarionetteObject;\n","// Region\n// ------\n\nimport _ from 'underscore';\nimport Backbone from 'backbone';\nimport isNodeAttached from './utils/isNodeAttached';\nimport MarionetteObject from './object';\nimport MarionetteError from './error';\nimport MonitorViewEvents from './monitor-view-events';\nimport { triggerMethodOn } from './trigger-method';\n\nconst Region = MarionetteObject.extend({\n  cidPrefix: 'mnr',\n  replaceElement: false,\n  _isReplaced: false,\n\n  constructor(options) {\n    this._setOptions(options);\n    this._initEl = this.el = this.getOption('el');\n\n    // Handle when this.el is passed in as a $ wrapped element.\n    this.el = this.el instanceof Backbone.$ ? this.el[0] : this.el;\n\n    if (!this.el) {\n      throw new MarionetteError({\n        name: 'NoElError',\n        message: 'An \"el\" must be specified for a region.'\n      });\n    }\n\n    this.$el = this.getEl(this.el);\n    MarionetteObject.call(this, options);\n  },\n\n  // Displays a backbone view instance inside of the region. Handles calling the `render`\n  // method for you. Reads content directly from the `el` attribute. The `preventDestroy`\n  // option can be used to prevent a view from the old view being destroyed on show.\n  show(view, options) {\n    if (!this._ensureElement()) {\n      return;\n    }\n    this._ensureView(view);\n    if (view === this.currentView) { return this; }\n\n    this.triggerMethod('before:show', this, view, options);\n\n    MonitorViewEvents(view);\n\n    this.empty(options);\n\n    // We need to listen for if a view is destroyed in a way other than through the region.\n    // If this happens we need to remove the reference to the currentView since once a view\n    // has been destroyed we can not reuse it.\n    view.on('destroy', this.empty, this);\n\n    // Make this region the view's parent.\n    // It's important that this parent binding happens before rendering so that any events\n    // the child may trigger during render can also be triggered on the child's ancestor views.\n    view._parent = this;\n\n    this._renderView(view);\n\n    this._attachView(view, options);\n\n    this.triggerMethod('show', this, view, options);\n    return this;\n  },\n\n  _renderView(view) {\n    if (view._isRendered) {\n      return;\n    }\n\n    if (!view.supportsRenderLifecycle) {\n      triggerMethodOn(view, 'before:render', view);\n    }\n\n    view.render();\n\n    if (!view.supportsRenderLifecycle) {\n      view._isRendered = true;\n      triggerMethodOn(view, 'render', view);\n    }\n  },\n\n  _attachView(view) {\n    const shouldTriggerAttach = !view._isAttached && isNodeAttached(this.el);\n    const shouldReplaceEl = !!this.replaceElement;\n\n    if (shouldTriggerAttach) {\n      triggerMethodOn(view, 'before:attach', view);\n    }\n\n    this.attachHtml(view, shouldReplaceEl);\n\n    if (shouldTriggerAttach) {\n      view._isAttached = true;\n      triggerMethodOn(view, 'attach', view);\n    }\n\n    this.currentView = view;\n  },\n\n  _ensureElement() {\n    if (!_.isObject(this.el)) {\n      this.$el = this.getEl(this.el);\n      this.el = this.$el[0];\n    }\n\n    if (!this.$el || this.$el.length === 0) {\n      if (this.getOption('allowMissingEl')) {\n        return false;\n      } else {\n        throw new MarionetteError('An \"el\" ' + this.$el.selector + ' must exist in DOM');\n      }\n    }\n    return true;\n  },\n\n  _ensureView(view) {\n    if (!view) {\n      throw new MarionetteError({\n        name: 'ViewNotValid',\n        message: 'The view passed is undefined and therefore invalid. You must pass a view instance to show.'\n      });\n    }\n\n    if (view._isDestroyed) {\n      throw new MarionetteError({\n        name: 'ViewDestroyedError',\n        message: 'View (cid: \"' + view.cid + '\") has already been destroyed and cannot be used.'\n      });\n    }\n  },\n\n  // Override this method to change how the region finds the DOM element that it manages. Return\n  // a jQuery selector object scoped to a provided parent el or the document if none exists.\n  getEl(el) {\n    return Backbone.$(el, this.getValue(this.getOption('parentEl')));\n  },\n\n  _replaceEl(view) {\n    // always restore the el to ensure the regions el is present before replacing\n    this._restoreEl();\n\n    const parent = this.el.parentNode;\n\n    parent.replaceChild(view.el, this.el);\n    this._isReplaced = true;\n  },\n\n  // Restore the region's element in the DOM.\n  _restoreEl() {\n    if (!this.currentView) {\n      return;\n    }\n\n    const view = this.currentView;\n    const parent = view.el.parentNode;\n\n    if (!parent) {\n      return;\n    }\n\n    parent.replaceChild(this.el, view.el);\n    this._isReplaced = false;\n  },\n\n  isReplaced() {\n    return !!this._isReplaced;\n  },\n\n  // Override this method to change how the new view is appended to the `$el` that the\n  // region is managing\n  attachHtml(view, shouldReplace) {\n    if (shouldReplace) {\n      // replace the region's node with the view's node\n      this._replaceEl(view);\n    } else {\n      this.el.appendChild(view.el);\n    }\n  },\n\n  // Destroy the current view, if there is one. If there is no current view, it does\n  // nothing and returns immediately.\n  empty({preventDestroy} = {}) {\n    const shouldPreventDestroy = !!preventDestroy;\n    const view = this.currentView;\n\n    // If there is no view in the region we should not remove anything\n    if (!view) { return this; }\n\n    view.off('destroy', this.empty, this);\n    this.triggerMethod('before:empty', this, view);\n\n    if (this._isReplaced) {\n      this._restoreEl();\n    }\n\n    if (shouldPreventDestroy) {\n      this._detachView(view);\n    } else {\n      this._destroyView(view);\n    }\n\n    delete this.currentView._parent;\n    delete this.currentView;\n\n    this.triggerMethod('empty', this, view);\n    return this;\n  },\n\n  _detachView(view) {\n    const shouldTriggerDetach = !!view._isAttached;\n\n    if (shouldTriggerDetach) {\n      triggerMethodOn(view, 'before:detach', view);\n    }\n\n    this.$el.contents().detach();\n\n    if (shouldTriggerDetach) {\n      view._isAttached = false;\n      triggerMethodOn(view, 'detach', view);\n    }\n  },\n\n  // Call 'destroy' or 'remove', depending on which is found on the view (if showing a raw\n  // Backbone view or a Marionette View)\n  _destroyView(view) {\n    if (view._isDestroyed) { return; }\n\n    if (!view.supportsDestroyLifecycle) {\n      triggerMethodOn(view, 'before:destroy', view);\n    }\n    if (view.destroy) {\n      view.destroy();\n    } else {\n      const shouldTriggerDetach = !!view._isAttached;\n\n      if (shouldTriggerDetach) {\n        triggerMethodOn(view, 'before:detach', view);\n      }\n\n      view.remove();\n\n      if (shouldTriggerDetach) {\n        view._isAttached = false;\n        triggerMethodOn(view, 'detach', view);\n      }\n\n      // appending _isDestroyed to raw Backbone View allows regions to throw a\n      // ViewDestroyedError for this view\n      view._isDestroyed = true;\n    }\n\n    if (!view.supportsDestroyLifecycle) {\n      triggerMethodOn(view, 'destroy', view);\n    }\n  },\n\n  // Checks whether a view is currently present within the region. Returns `true` if there is\n  // and `false` if no view is present.\n  hasView() {\n    return !!this.currentView;\n  },\n\n  // Reset the region by destroying any existing view and clearing out the cached `$el`.\n  // The next time a view is shown via this region, the region will re-query the DOM for\n  // the region's `el`.\n  reset() {\n    this.empty();\n\n    if (this.$el) {\n      this.el = this._initEl;\n    }\n\n    delete this.$el;\n    return this;\n  },\n\n  destroy: function() {\n    this.reset();\n    return MarionetteObject.prototype.destroy.apply(this, arguments);\n  }\n});\n\nexport default Region;\n","// Application\n// -----------\nimport _                from 'underscore';\nimport MarionetteObject from './object';\nimport Region           from './region';\n\n// A container for a Marionette application.\nvar Application = MarionetteObject.extend({\n  cidPrefix: 'mna',\n\n  constructor: function(options) {\n    this._setOptions(options);\n\n    this._initRegion();\n\n    MarionetteObject.prototype.constructor.apply(this, arguments);\n  },\n\n  regionClass: Region,\n\n  _initRegion: function(options) {\n    var region = this.getOption('region');\n    var RegionClass = this.getOption('regionClass');\n\n    // if the region is a string expect an el or selector\n    // and instantiate a region\n    if (_.isString(region)) {\n      this._region = new RegionClass({\n        el: region\n      });\n      return;\n    }\n\n    this._region = region;\n  },\n\n  getRegion: function() {\n    return this._region;\n  },\n\n  showView: function(view, ...args) {\n    var region = this.getRegion();\n    return region.show(view, ...args);\n  },\n\n  getView: function() {\n    return this.getRegion().currentView;\n  },\n\n  // kick off all of the application's processes.\n  start: function(options) {\n    this.triggerMethod('before:start', options);\n    this.triggerMethod('start', options);\n  }\n\n});\n\nexport default Application;\n","// App Router\n// ----------\n\n// Reduce the boilerplate code of handling route events\n// and then calling a single method on another object,\n// called a controller.\n// Have your routers configured to call the method on\n// your controller, directly.\n//\n// Configure an AppRouter with `appRoutes`.\n//\n// App routers can only take one `controller` object.\n// It is recommended that you divide your controller\n// objects in to smaller pieces of related functionality\n// and have multiple routers / controllers, instead of\n// just one giant router and controller.\n//\n// You can also add standard routes to an AppRouter.\n\nimport Backbone                from 'backbone';\nimport _                       from 'underscore';\nimport MarionetteError         from './error';\nimport CommonMixin             from './mixins/common';\nimport { triggerMethod }       from './trigger-method';\n\nvar AppRouter = Backbone.Router.extend({\n\n  constructor: function(options) {\n    this._setOptions(options);\n\n    Backbone.Router.apply(this, arguments);\n\n    var appRoutes = this.getOption('appRoutes');\n    var controller = this._getController();\n    this.processAppRoutes(controller, appRoutes);\n    this.on('route', this._processOnRoute, this);\n  },\n\n  // Similar to route method on a Backbone Router but\n  // method is called on the controller\n  appRoute: function(route, methodName) {\n    var controller = this._getController();\n    this._addAppRoute(controller, route, methodName);\n  },\n\n  // process the route event and trigger the onRoute\n  // method call, if it exists\n  _processOnRoute: function(routeName, routeArgs) {\n    // make sure an onRoute before trying to call it\n    if (_.isFunction(this.onRoute)) {\n      // find the path that matches the current route\n      var routePath = _.invert(this.getOption('appRoutes'))[routeName];\n      this.onRoute(routeName, routePath, routeArgs);\n    }\n  },\n\n  // Internal method to process the `appRoutes` for the\n  // router, and turn them in to routes that trigger the\n  // specified method on the specified `controller`.\n  processAppRoutes: function(controller, appRoutes) {\n    if (!appRoutes) { return; }\n\n    var routeNames = _.keys(appRoutes).reverse(); // Backbone requires reverted order of routes\n\n    _.each(routeNames, function(route) {\n      this._addAppRoute(controller, route, appRoutes[route]);\n    }, this);\n  },\n\n  _getController: function() {\n    return this.getOption('controller');\n  },\n\n  _addAppRoute: function(controller, route, methodName) {\n    var method = controller[methodName];\n\n    if (!method) {\n      throw new MarionetteError('Method \"' + methodName + '\" was not found on the controller');\n    }\n\n    this.route(route, methodName, _.bind(method, controller));\n  },\n\n  triggerMethod: triggerMethod\n});\n\n_.extend(AppRouter.prototype, CommonMixin);\n\nexport default AppRouter;\n","// Template Cache\n// --------------\n\nimport _               from 'underscore';\nimport Backbone        from 'backbone';\nimport MarionetteError from './error';\n\n// Manage templates stored in `<script>` blocks,\n// caching them for faster access.\nvar TemplateCache = function(templateId) {\n  this.templateId = templateId;\n};\n\n// TemplateCache object-level methods. Manage the template\n// caches from these method calls instead of creating\n// your own TemplateCache instances\n_.extend(TemplateCache, {\n  templateCaches: {},\n\n  // Get the specified template by id. Either\n  // retrieves the cached version, or loads it\n  // from the DOM.\n  get: function(templateId, options) {\n    var cachedTemplate = this.templateCaches[templateId];\n\n    if (!cachedTemplate) {\n      cachedTemplate = new TemplateCache(templateId);\n      this.templateCaches[templateId] = cachedTemplate;\n    }\n\n    return cachedTemplate.load(options);\n  },\n\n  // Clear templates from the cache. If no arguments\n  // are specified, clears all templates:\n  // `clear()`\n  //\n  // If arguments are specified, clears each of the\n  // specified templates from the cache:\n  // `clear(\"#t1\", \"#t2\", \"...\")`\n  clear: function(...args) {\n    var i;\n    var length = args.length;\n\n    if (length > 0) {\n      for (i = 0; i < length; i++) {\n        delete this.templateCaches[args[i]];\n      }\n    } else {\n      this.templateCaches = {};\n    }\n  }\n});\n\n// TemplateCache instance methods, allowing each\n// template cache object to manage its own state\n// and know whether or not it has been loaded\n_.extend(TemplateCache.prototype, {\n\n  // Internal method to load the template\n  load: function(options) {\n    // Guard clause to prevent loading this template more than once\n    if (this.compiledTemplate) {\n      return this.compiledTemplate;\n    }\n\n    // Load the template and compile it\n    var template = this.loadTemplate(this.templateId, options);\n    this.compiledTemplate = this.compileTemplate(template, options);\n\n    return this.compiledTemplate;\n  },\n\n  // Load a template from the DOM, by default. Override\n  // this method to provide your own template retrieval\n  // For asynchronous loading with AMD/RequireJS, consider\n  // using a template-loader plugin as described here:\n  // https://github.com/marionettejs/backbone.marionette/wiki/Using-marionette-with-requirejs\n  loadTemplate: function(templateId, options) {\n    var $template = Backbone.$(templateId);\n\n    if (!$template.length) {\n      throw new MarionetteError({\n        name: 'NoTemplateError',\n        message: 'Could not find template: \"' + templateId + '\"'\n      });\n    }\n    return $template.html();\n  },\n\n  // Pre-compile the template before caching it. Override\n  // this method if you do not need to pre-compile a template\n  // (JST / RequireJS for example) or if you want to change\n  // the template engine used (Handebars, etc).\n  compileTemplate: function(rawTemplate, options) {\n    return _.template(rawTemplate, options);\n  }\n});\n\nexport default TemplateCache;\n","// Renderer\n// --------\n\nimport _               from 'underscore';\nimport MarionetteError from './error';\nimport TemplateCache   from './template-cache';\n\n// Render a template with data by passing in the template\n// selector and the data to render.\nvar Renderer = {\n\n  // Render a template with data. The `template` parameter is\n  // passed to the `TemplateCache` object to retrieve the\n  // template function. Override this method to provide your own\n  // custom rendering and template handling for all of Marionette.\n  render: function(template, data) {\n    if (!template) {\n      throw new MarionetteError({\n        name: 'TemplateNotFoundError',\n        message: 'Cannot render the template since its false, null or undefined.'\n      });\n    }\n\n    var templateFunc = _.isFunction(template) ? template : TemplateCache.get(template);\n\n    return templateFunc(data);\n  }\n};\n\nexport default Renderer;\n","import _                    from 'underscore';\nimport Region               from '../region';\nimport MarionetteError      from '../error';\n\nexport default {\n  regionClass: Region,\n\n  // Internal method to initialize the regions that have been defined in a\n  // `regions` attribute on this View.\n  _initRegions: function() {\n\n    // init regions hash\n    this.regions =  this.regions || {};\n    this._regions = {};\n\n    this.addRegions(this.getValue(this.getOption('regions')));\n  },\n\n  // Internal method to re-initialize all of the regions by updating\n  // the `el` that they point to\n  _reInitRegions: function() {\n    _.invoke(this._regions, 'reset');\n  },\n\n  // Add a single region, by name, to the View\n  addRegion: function(name, definition) {\n    var regions = {};\n    regions[name] = definition;\n    return this.addRegions(regions)[name];\n  },\n\n  // Add multiple regions as a {name: definition, name2: def2} object literal\n  addRegions: function(regions) {\n    // If there's nothing to add, stop here.\n    if (_.isEmpty(regions)) {\n      return;\n    }\n\n    // Normalize region selectors hash to allow\n    // a user to use the @ui. syntax.\n    regions = this.normalizeUIValues(regions, ['selector', 'el']);\n\n    // Add the regions definitions to the regions property\n    this.regions = _.extend({}, this.regions, regions);\n\n    return this._addRegions(regions);\n  },\n\n  // internal method to build and add regions\n  _addRegions: function(regionDefinitions) {\n    return _.reduce(regionDefinitions, function(regions, definition, name) {\n      regions[name] = this._buildRegion(definition);\n      this._addRegion(regions[name], name);\n      return regions;\n    }, {}, this);\n  },\n\n  // return the region instance from the definition\n  _buildRegion: function(definition) {\n    if (definition instanceof Region) {\n      return definition;\n    }\n\n    return this._buildRegionFromDefinition(definition);\n  },\n\n  _buildRegionFromDefinition: function(definition) {\n    if (_.isString(definition)) {\n      return this._buildRegionFromObject({el: definition});\n    }\n\n    if (_.isFunction(definition)) {\n      return this._buildRegionFromRegionClass(definition);\n    }\n\n    if (_.isObject(definition)) {\n      return this._buildRegionFromObject(definition);\n    }\n\n    throw new MarionetteError({\n      message: 'Improper region configuration type.',\n      url: 'marionette.region.html#region-configuration-types'\n    });\n  },\n\n  _buildRegionFromObject: function(definition) {\n    var RegionClass = definition.regionClass || this.getOption('regionClass');\n\n    var options = _.omit(definition, 'regionClass');\n\n    _.defaults(options, {\n      el: definition.selector,\n      parentEl: _.partial(_.result, this, 'el')\n    });\n\n    return new RegionClass(options);\n  },\n\n  // Build the region directly from a given `RegionClass`\n  _buildRegionFromRegionClass: function(RegionClass) {\n    return new RegionClass({\n      parentEl: _.partial(_.result, this, 'el')\n    });\n  },\n\n  _addRegion: function(region, name) {\n    this.triggerMethod('before:add:region', name, region);\n\n    region._parent = this;\n\n    this._regions[name] = region;\n\n    this.triggerMethod('add:region', name, region);\n  },\n\n  // Remove a single region from the View, by name\n  removeRegion: function(name) {\n    var region = this._regions[name];\n\n    this._removeRegion(region, name);\n\n    return region;\n  },\n\n  // Remove all regions from the View\n  removeRegions: function() {\n    var regions = this.getRegions();\n\n    _.each(this._regions, this._removeRegion, this);\n\n    return regions;\n  },\n\n  _removeRegion: function(region, name) {\n    this.triggerMethod('before:remove:region', name, region);\n\n    region.empty();\n    region.stopListening();\n\n    delete this.regions[name];\n    delete this._regions[name];\n\n    this.triggerMethod('remove:region', name, region);\n  },\n\n  // Empty all regions in the region manager, but\n  // leave them attached\n  emptyRegions: function() {\n    var regions = this.getRegions();\n    _.invoke(regions, 'empty');\n    return regions;\n  },\n\n  // Checks to see if view contains region\n  // Accepts the region name\n  // hasRegion('main')\n  hasRegion: function(name) {\n    return !!this.getRegion(name);\n  },\n\n  // Provides access to regions\n  // Accepts the region name\n  // getRegion('main')\n  getRegion: function(name) {\n    return this._regions[name];\n  },\n\n  // Get all regions\n  getRegions: function() {\n    return _.clone(this._regions);\n  },\n\n  showChildView: function(name, view, ...args) {\n    var region = this.getRegion(name);\n    return region.show(view, ...args);\n  },\n\n  getChildView: function(name) {\n    return this.getRegion(name).currentView;\n  }\n\n};\n","import _ from 'underscore';\n// allows for the use of the @ui. syntax within\n// a given key for triggers and events\n// swaps the @ui with the associated selector.\n// Returns a new, non-mutated, parsed events hash.\nvar normalizeUIKeys = function(hash, ui) {\n  return _.reduce(hash, function(memo, val, key) {\n    var normalizedKey = normalizeUIString(key, ui);\n    memo[normalizedKey] = val;\n    return memo;\n  }, {});\n};\n\n// utility method for parsing @ui. syntax strings\n// into associated selector\nvar normalizeUIString = function(uiString, ui) {\n  return uiString.replace(/@ui\\.[a-zA-Z_$0-9]*/g, function(r) {\n    return ui[r.slice(4)];\n  });\n};\n\n// allows for the use of the @ui. syntax within\n// a given value for regions\n// swaps the @ui with the associated selector\nvar normalizeUIValues = function(hash, ui, properties) {\n  _.each(hash, function(val, key) {\n    if (_.isString(val)) {\n      hash[key] = normalizeUIString(val, ui);\n    } else if (_.isObject(val) && _.isArray(properties)) {\n      _.extend(val, normalizeUIValues(_.pick(val, properties), ui));\n      /* Value is an object, and we got an array of embedded property names to normalize. */\n      _.each(properties, function(property) {\n        var propertyVal = val[property];\n        if (_.isString(propertyVal)) {\n          val[property] = normalizeUIString(propertyVal, ui);\n        }\n      });\n    }\n  });\n  return hash;\n};\n\nexport default {\n\n  // normalize the keys of passed hash with the views `ui` selectors.\n  // `{\"@ui.foo\": \"bar\"}`\n  normalizeUIKeys: function(hash) {\n    var uiBindings = this._getUIBindings();\n    return normalizeUIKeys(hash, uiBindings);\n  },\n\n  // normalize the values of passed hash with the views `ui` selectors.\n  // `{foo: \"@ui.bar\"}`\n  normalizeUIValues: function(hash, properties) {\n    var uiBindings = this._getUIBindings();\n    return normalizeUIValues(hash, uiBindings, properties);\n  },\n\n  _getUIBindings: function() {\n    var uiBindings = _.result(this, '_uiBindings');\n    var ui = _.result(this, 'ui');\n    return uiBindings || ui;\n  },\n\n  // This method binds the elements specified in the \"ui\" hash inside the view's code with\n  // the associated jQuery selectors.\n  _bindUIElements: function() {\n    if (!this.ui) { return; }\n\n    // store the ui hash in _uiBindings so they can be reset later\n    // and so re-rendering the view will be able to find the bindings\n    if (!this._uiBindings) {\n      this._uiBindings = this.ui;\n    }\n\n    // get the bindings result, as a function or otherwise\n    var bindings = _.result(this, '_uiBindings');\n\n    // empty the ui so we don't have anything to start with\n    this._ui = {};\n\n    // bind each of the selectors\n    _.each(bindings, function(selector, key) {\n      this._ui[key] = this.$(selector);\n    }, this);\n\n    this.ui = this._ui;\n  },\n\n  _unbindUIElements: function() {\n    if (!this.ui || !this._uiBindings) { return; }\n\n    // delete all of the existing ui bindings\n    _.each(this.ui, function($el, name) {\n      delete this.ui[name];\n    }, this);\n\n    // reset the ui element to the original bindings configuration\n    this.ui = this._uiBindings;\n    delete this._uiBindings;\n    delete this._ui;\n  },\n\n  _getUI: function(name) {\n    return this._ui[name];\n  }\n};\n","import {\n  bindEntityEvents,\n  unbindEntityEvents\n} from '../bind-entity-events';\n\nexport default {\n  // Handle `modelEvents`, and `collectionEvents` configuration\n  _delegateEntityEvents: function(model, collection) {\n    this._undelegateEntityEvents(model, collection);\n\n    var modelEvents = this.getValue(this.getOption('modelEvents'));\n    bindEntityEvents.call(this, model, modelEvents);\n\n    var collectionEvents = this.getValue(this.getOption('collectionEvents'));\n    bindEntityEvents.call(this, collection, collectionEvents);\n  },\n\n  _undelegateEntityEvents: function(model, collection) {\n    var modelEvents = this.getValue(this.getOption('modelEvents'));\n    unbindEntityEvents.call(this, model, modelEvents);\n\n    var collectionEvents = this.getValue(this.getOption('collectionEvents'));\n    unbindEntityEvents.call(this, collection, collectionEvents);\n  }\n};\n","// ViewMixin\n//  ---------\n\nimport Backbone from 'backbone';\nimport _ from 'underscore';\nimport MarionetteError from '../error';\nimport BehaviorsMixin from './behaviors';\nimport CommonMixin from './common';\nimport DelegateEntityEventsMixin from './delegate-entity-events';\nimport TriggersMixin from './triggers';\nimport UIMixin from './ui';\nimport View from '../view';\nimport { triggerMethod } from '../trigger-method';\n\nvar ViewMixin = {\n\n  supportsRenderLifecycle: true,\n  supportsDestroyLifecycle: true,\n\n  _isDestroyed: false,\n\n  isDestroyed: function() {\n    return !!this._isDestroyed;\n  },\n\n  _isRendered: false,\n\n  isRendered: function() {\n    return !!this._isRendered;\n  },\n\n  _isAttached: false,\n\n  isAttached() {\n    return !!this._isAttached;\n  },\n\n  // Mix in template context methods. Looks for a\n  // `templateContext` attribute, which can either be an\n  // object literal, or a function that returns an object\n  // literal. All methods and attributes from this object\n  // are copies to the object passed in.\n  mixinTemplateContext: function(target = {}) {\n    const templateContext = this.getValue(this.getOption('templateContext'));\n    return _.extend(target, templateContext);\n  },\n\n  // Overriding Backbone.View's `delegateEvents` to handle\n  // `events` and `triggers`\n  delegateEvents: function(eventsArg) {\n\n    this._proxyBehaviorViewProperties();\n    this._buildEventProxies();\n\n    const viewEvents = this._getEvents(eventsArg);\n\n    if (typeof eventsArg === 'undefined') {\n      this.events = viewEvents;\n    }\n\n    const combinedEvents = _.extend({},\n      this._getBehaviorEvents(),\n      viewEvents,\n      this._getBehaviorTriggers(),\n      this.getTriggers()\n    );\n\n    Backbone.View.prototype.delegateEvents.call(this, combinedEvents);\n\n    return this;\n  },\n\n  _getEvents: function(eventsArg) {\n    const events = this.getValue(eventsArg || this.events);\n\n    return this.normalizeUIKeys(events);\n  },\n\n  // Configure `triggers` to forward DOM events to view\n  // events. `triggers: {\"click .foo\": \"do:foo\"}`\n  getTriggers: function() {\n    if (!this.triggers) { return; }\n\n    // Allow `triggers` to be configured as a function\n    const triggers = this.normalizeUIKeys(_.result(this, 'triggers'));\n\n    // Configure the triggers, prevent default\n    // action and stop propagation of DOM events\n    return this._getViewTriggers(this, triggers);\n  },\n\n  // Handle `modelEvents`, and `collectionEvents` configuration\n  delegateEntityEvents: function() {\n    const modelEvents = this.getValue(this.getOption('modelEvents'));\n    this.bindEntityEvents(this.model, modelEvents);\n\n    const collectionEvents = this.getValue(this.getOption('collectionEvents'));\n    this.bindEntityEvents(this.collection, collectionEvents);\n\n    // bind each behaviors model and collection events\n    this._delegateBehaviorEntityEvents();\n\n    return this;\n  },\n\n  // Handle unbinding `modelEvents`, and `collectionEvents` configuration\n  undelegateEntityEvents: function() {\n    const modelEvents = this.getValue(this.getOption('modelEvents'));\n    this.unbindEntityEvents(this.model, modelEvents);\n\n    const collectionEvents = this.getValue(this.getOption('collectionEvents'));\n    this.unbindEntityEvents(this.collection, collectionEvents);\n\n    // unbind each behaviors model and collection events\n    this._undelegateBehaviorEntityEvents();\n\n    return this;\n  },\n\n  // Internal helper method to verify whether the view hasn't been destroyed\n  _ensureViewIsIntact: function() {\n    if (this._isDestroyed) {\n      throw new MarionetteError({\n        name: 'ViewDestroyedError',\n        message: 'View (cid: \"' + this.cid + '\") has already been destroyed and cannot be used.'\n      });\n    }\n  },\n\n  // Handle destroying the view and its children.\n  destroy: function(...args) {\n    if (this._isDestroyed) { return this; }\n    const shouldTriggerDetach = !!this._isAttached;\n\n    this.triggerMethod('before:destroy', ...args);\n    if (shouldTriggerDetach) {\n      this.triggerMethod('before:detach', this);\n    }\n\n    // unbind UI elements\n    this.unbindUIElements();\n\n    // remove the view from the DOM\n    // https://github.com/jashkenas/backbone/blob/1.2.3/backbone.js#L1235\n    this._removeElement();\n\n    if (shouldTriggerDetach) {\n      this._isAttached = false;\n      this.triggerMethod('detach', this);\n    }\n\n    // remove children after the remove to prevent extra paints\n    this._removeChildren();\n\n    this._destroyBehaviors(args);\n\n    this._isDestroyed = true;\n    this._isRendered = false;\n    this.triggerMethod('destroy', ...args);\n\n    this.stopListening();\n\n    return this;\n  },\n\n  bindUIElements: function() {\n    this._bindUIElements();\n    this._bindBehaviorUIElements();\n\n    return this;\n  },\n\n  // This method unbinds the elements specified in the \"ui\" hash\n  unbindUIElements: function() {\n    this._unbindUIElements();\n    this._unbindBehaviorUIElements();\n\n    return this;\n  },\n\n  getUI: function(name) {\n    this._ensureViewIsIntact();\n    return this._getUI(name);\n  },\n\n  // used as the prefix for child view events\n  // that are forwarded through the layoutview\n  childViewEventPrefix: 'childview',\n\n  // import the `triggerMethod` to trigger events with corresponding\n  // methods if the method exists\n  triggerMethod: function(...args) {\n    const ret = triggerMethod.apply(this, args);\n\n    this._triggerEventOnBehaviors(...args);\n    this._triggerEventOnParentLayout(...args);\n\n    return ret;\n  },\n\n  // Cache `childViewEvents` and `childViewTriggers`\n  _buildEventProxies: function() {\n    this._childViewEvents = this.getValue(this.getOption('childViewEvents'));\n    this._childViewTriggers = this.getValue(this.getOption('childViewTriggers'));\n  },\n\n  _triggerEventOnParentLayout: function(eventName, ...args) {\n    const layoutView = this._parentView();\n    if (!layoutView) {\n      return;\n    }\n\n    // invoke triggerMethod on parent view\n    const eventPrefix = layoutView.getOption('childViewEventPrefix');\n    const prefixedEventName = eventPrefix + ':' + eventName;\n\n    layoutView.triggerMethod(prefixedEventName, ...args);\n\n    // use the parent view's childViewEvents handler\n    const childViewEvents = layoutView.normalizeMethods(layoutView._childViewEvents);\n\n    if (!!childViewEvents && _.isFunction(childViewEvents[eventName])) {\n      childViewEvents[eventName].apply(layoutView, args);\n    }\n\n    // use the parent view's proxyEvent handlers\n    const childViewTriggers = layoutView._childViewTriggers;\n\n    // Call the event with the proxy name on the parent layout\n    if (childViewTriggers && _.isString(childViewTriggers[eventName])) {\n      layoutView.triggerMethod(childViewTriggers[eventName], ...args);\n    }\n  },\n\n  // Walk the _parent tree until we find a view (if one exists).\n  // Returns the parent view hierarchically closest to this view.\n  _parentView: function() {\n    let parent = this._parent;\n\n    while (parent) {\n      if (parent instanceof View) {\n        return parent;\n      }\n      parent = parent._parent;\n    }\n  }\n};\n\n_.extend(ViewMixin, BehaviorsMixin, CommonMixin, DelegateEntityEventsMixin, TriggersMixin,  UIMixin);\n\nexport default ViewMixin;\n","// View\n// ---------\n\nimport _                  from 'underscore';\nimport Backbone           from 'backbone';\nimport ViewMixin          from './mixins/view';\nimport RegionsMixin       from './mixins/regions';\nimport MonitorViewEvents  from './monitor-view-events';\nimport Renderer           from './renderer';\n\n// The standard view. Includes view events, automatic rendering\n// of Underscore templates, nested views, and more.\nvar View = Backbone.View.extend({\n\n  constructor(options) {\n    this.render = _.bind(this.render, this);\n\n    this._setOptions(options);\n\n    MonitorViewEvents(this);\n\n    this._initBehaviors();\n    this._initRegions();\n\n    Backbone.View.prototype.constructor.call(this, this.options);\n\n    this.delegateEntityEvents();\n  },\n\n  // Serialize the view's model *or* collection, if\n  // it exists, for the template\n  serializeData() {\n    if (!this.model && !this.collection) {\n      return {};\n    }\n\n    // If we have a model, we serialize that\n    if (this.model) {\n      return this.serializeModel();\n    }\n\n    // Otherwise, we serialize the collection,\n    // making it available under the `items` property\n    return {\n      items: this.serializeCollection()\n    };\n  },\n\n  // Prepares the special `model` property of a view\n  // for being displayed in the template. By default\n  // we simply clone the attributes. Override this if\n  // you need a custom transformation for your view's model\n  serializeModel() {\n    if (!this.model) { return {}; }\n    return _.clone(this.model.attributes);\n  },\n\n  // Serialize a collection by cloning each of\n  // its model's attributes\n  serializeCollection() {\n    if (!this.collection) { return {}; }\n    return this.collection.map(function(model) { return _.clone(model.attributes); });\n  },\n\n  // Render the view, defaulting to underscore.js templates.\n  // You can override this in your view definition to provide\n  // a very specific rendering for your view. In general, though,\n  // you should override the `Marionette.Renderer` object to\n  // change how Marionette renders views.\n  // Subsequent renders after the first will re-render all nested\n  // views.\n  render() {\n    this._ensureViewIsIntact();\n\n    this.triggerMethod('before:render', this);\n\n    // If this is not the first render call, then we need to\n    // re-initialize the `el` for each region\n    if (this._isRendered) {\n      this._reInitRegions();\n    }\n\n    this._renderTemplate();\n    this.bindUIElements();\n\n    this._isRendered = true;\n    this.triggerMethod('render', this);\n\n    return this;\n  },\n\n  // Internal method to render the template with the serialized data\n  // and template context via the `Marionette.Renderer` object.\n  _renderTemplate() {\n    var template = this.getTemplate();\n\n    // Allow template-less views\n    if (template === false) {\n      return;\n    }\n\n    // Add in entity data and template context\n    var data = this.mixinTemplateContext(this.serializeData());\n\n    // Render and add to el\n    var html = Renderer.render(template, data, this);\n    this.attachElContent(html);\n  },\n\n  // Get the template for this view\n  // instance. You can set a `template` attribute in the view\n  // definition or pass a `template: \"whatever\"` parameter in\n  // to the constructor options.\n  getTemplate() {\n    return this.getOption('template');\n  },\n\n  // Attaches the content of a given view.\n  // This method can be overridden to optimize rendering,\n  // or to render in a non standard way.\n  //\n  // For example, using `innerHTML` instead of `$el.html`\n  //\n  // ```js\n  // attachElContent(html) {\n  //   this.el.innerHTML = html;\n  //   return this;\n  // }\n  // ```\n  attachElContent(html) {\n    this.$el.html(html);\n\n    return this;\n  },\n\n  // called by ViewMixin destroy\n  _removeChildren() {\n    this.removeRegions();\n  },\n\n  _getImmediateChildren: function() {\n    return _.chain(this.getRegions())\n      .pluck('currentView')\n      .compact()\n      .value();\n  }\n});\n\n_.extend(View.prototype, ViewMixin, RegionsMixin);\n\nexport default View;\n","// Collection View\n// ---------------\n\nimport _                    from 'underscore';\nimport Backbone             from 'backbone';\nimport ChildViewContainer   from 'backbone.babysitter';\nimport MarionetteError      from './error';\nimport ViewMixin            from './mixins/view';\nimport { triggerMethodOn }  from './trigger-method';\nimport MonitorViewEvents    from './monitor-view-events';\n\n// A view that iterates over a Backbone.Collection\n// and renders an individual child view for each model.\nconst CollectionView = Backbone.View.extend({\n\n  // flag for maintaining the sorted order of the collection\n  sort: true,\n\n  // constructor\n  // option to pass `{sort: false}` to prevent the `CollectionView` from\n  // maintaining the sorted order of the collection.\n  // This will fallback onto appending childView's to the end.\n  //\n  // option to pass `{comparator: compFunction()}` to allow the `CollectionView`\n  // to use a custom sort order for the collection.\n  constructor(options) {\n    this.render = _.bind(this.render, this);\n\n    this._setOptions(options);\n\n    MonitorViewEvents(this);\n\n    this._initBehaviors();\n    this.once('render', this._initialEvents);\n    this._initChildViewStorage();\n    this._bufferedChildren = [];\n\n    Backbone.View.prototype.constructor.call(this, this.options);\n\n    this.delegateEntityEvents();\n  },\n\n  // Instead of inserting elements one by one into the page, it's much more performant to insert\n  // elements into a document fragment and then insert that document fragment into the page\n  _startBuffering() {\n    this._isBuffering = true;\n  },\n\n  _endBuffering() {\n    const shouldTriggerAttach = !!this._isAttached;\n\n    this._isBuffering = false;\n\n    if (shouldTriggerAttach) {\n      _.each(this._getImmediateChildren(), child => {\n        triggerMethodOn(child, 'before:attach', child);\n      });\n    }\n\n    this.attachBuffer(this, this._createBuffer());\n\n    if (shouldTriggerAttach) {\n      _.each(this._getImmediateChildren(), child => {\n        child._isAttached = true;\n        triggerMethodOn(child, 'attach', child);\n      });\n    }\n\n    this._bufferedChildren = [];\n  },\n\n  // Configured the initial events that the collection view binds to.\n  _initialEvents() {\n    if (this.collection) {\n      this.listenTo(this.collection, 'add', this._onCollectionAdd);\n      this.listenTo(this.collection, 'remove', this._onCollectionRemove);\n      this.listenTo(this.collection, 'reset', this.render);\n\n      if (this.getOption('sort')) {\n        this.listenTo(this.collection, 'sort', this._sortViews);\n      }\n    }\n  },\n\n  // Handle a child added to the collection\n  _onCollectionAdd(child, collection, opts) {\n    // `index` is present when adding with `at` since BB 1.2; indexOf fallback for < 1.2\n    let index = opts.at !== undefined && (opts.index || collection.indexOf(child));\n\n    // When filtered or when there is no initial index, calculate index.\n    if (this.getOption('filter') || index === false) {\n      index = _.indexOf(this._filteredSortedModels(index), child);\n    }\n\n    if (this._shouldAddChild(child, index)) {\n      this._destroyEmptyView();\n      const ChildView = this._getChildView(child);\n      this._addChild(child, ChildView, index);\n    }\n  },\n\n  // get the child view by model it holds, and remove it\n  _onCollectionRemove(model) {\n    const view = this.children.findByModel(model);\n    this._removeChildView(view);\n    this._checkEmpty();\n  },\n\n  // Render children views. Override this method to provide your own implementation of a\n  // render function for the collection view.\n  render() {\n    this._ensureViewIsIntact();\n    this.triggerMethod('before:render', this);\n    this._renderChildren();\n    this._isRendered = true;\n    this.triggerMethod('render', this);\n    return this;\n  },\n\n  // An efficient rendering used for filtering. Instead of modifying the whole DOM for the\n  // collection view, we are only adding or removing the related childrenViews.\n  setFilter(filter, {preventRender} = {}) {\n    const viewCanBeRendered = this._isRendered && !this._isDestroyed;\n    // The same filter or a `prevent` option won't render the filter.\n    // Nevertheless, a `prevent` option will modify the value.\n    if (!viewCanBeRendered || this.filter === filter) {\n      return;\n    }\n    if (!preventRender) {\n      this.triggerMethod('before:apply:filter', this);\n      const previousModels = this._filteredSortedModels();\n      this.filter = filter;\n      const models = this._filteredSortedModels();\n      this._applyModelDeltas(models, previousModels);\n      this.triggerMethod('apply:filter', this);\n    } else {\n      this.filter = filter;\n    }\n  },\n\n  // `removeFilter` is actually an alias for removing filters.\n  removeFilter(options) {\n    this.setFilter(null, options);\n  },\n\n  // Calculate and apply difference by cid between `models` and `previousModels`.\n  _applyModelDeltas(models, previousModels) {\n    const currentIds = {};\n    _.each(models, function(model, index) {\n      const addedChildNotExists = !this.children.findByModel(model);\n      if (addedChildNotExists) {\n        this._onCollectionAdd(model, this.collection, {at: index});\n      }\n      currentIds[model.cid] = true;\n    }, this);\n    _.each(previousModels, function(prevModel) {\n      const removedChildExists = !currentIds[prevModel.cid] && this.children.findByModel(prevModel);\n      if (removedChildExists) {\n        this._onCollectionRemove(prevModel);\n      }\n    }, this);\n  },\n\n  // Reorder DOM after sorting. When your element's rendering do not use their index,\n  // you can pass reorderOnSort: true to only reorder the DOM after a sort instead of\n  // rendering all the collectionView.\n  reorder() {\n    const children = this.children;\n    const models = this._filteredSortedModels();\n    const anyModelsAdded = _.some(models, function(model) {\n      return !children.findByModel(model);\n    });\n\n    // If there are any new models added due to filtering we need to add child views,\n    // so render as normal.\n    if (anyModelsAdded) {\n      this.render();\n    } else {\n      // Get the DOM nodes in the same order as the models.\n      const elsToReorder = _.map(models, function(model, index) {\n        const view = children.findByModel(model);\n        view._index = index;\n        return view.el;\n      });\n\n      // Find the views that were children before but aren't in this new ordering.\n      const filteredOutViews = children.filter(function(view) {\n        return !_.contains(elsToReorder, view.el);\n      });\n\n      this.triggerMethod('before:reorder', this);\n\n      // Since append moves elements that are already in the DOM, appending the elements\n      // will effectively reorder them.\n      this._appendReorderedChildren(elsToReorder);\n\n      // remove any views that have been filtered out\n      _.each(filteredOutViews, this._removeChildView, this);\n      this._checkEmpty();\n\n      this.triggerMethod('reorder', this);\n    }\n  },\n\n  // Render view after sorting. Override this method to change how the view renders\n  // after a `sort` on the collection.\n  resortView() {\n    if (this.getOption('reorderOnSort')) {\n      this.reorder();\n    } else {\n      this._renderChildren();\n    }\n  },\n\n  // Internal method. This checks for any changes in the order of the collection.\n  // If the index of any view doesn't match, it will render.\n  _sortViews() {\n    const models = this._filteredSortedModels();\n\n    // check for any changes in sort order of views\n    const orderChanged = _.find(models, function(item, index) {\n      const view = this.children.findByModel(item);\n      return !view || view._index !== index;\n    }, this);\n\n    if (orderChanged) {\n      this.resortView();\n    }\n  },\n\n  // Internal reference to what index a `emptyView` is.\n  _emptyViewIndex: -1,\n\n  // Internal method. Separated so that CompositeView can append to the childViewContainer\n  // if necessary\n  _appendReorderedChildren(children) {\n    this.$el.append(children);\n  },\n\n  // Internal method. Separated so that CompositeView can have more control over events\n  // being triggered, around the rendering process\n  _renderChildren() {\n    this._destroyEmptyView();\n    this._destroyChildren({checkEmpty: false});\n\n    const models = this._filteredSortedModels();\n    if (this.isEmpty(this.collection, {processedModels: models})) {\n      this._showEmptyView();\n    } else {\n      this.triggerMethod('before:render:children', this);\n      this._startBuffering();\n      this._showCollection(models);\n      this._endBuffering();\n      this.triggerMethod('render:children', this);\n    }\n  },\n\n  // Internal method to loop through collection and show each child view.\n  _showCollection(models) {\n    _.each(models, function(child, index) {\n      const ChildView = this._getChildView(child);\n      this._addChild(child, ChildView, index);\n    }, this);\n  },\n\n  // Allow the collection to be sorted by a custom view comparator\n  _filteredSortedModels(addedAt) {\n    if (!this.collection) { return []; }\n\n    const viewComparator = this.getViewComparator();\n    let models = this.collection.models;\n    addedAt = Math.min(Math.max(addedAt, 0), models.length - 1);\n\n    if (viewComparator) {\n      let addedModel;\n      // Preserve `at` location, even for a sorted view\n      if (addedAt) {\n        addedModel = models[addedAt];\n        models = models.slice(0, addedAt).concat(models.slice(addedAt + 1));\n      }\n      models = this._sortModelsBy(models, viewComparator);\n      if (addedModel) {\n        models.splice(addedAt, 0, addedModel);\n      }\n    }\n\n    // Filter after sorting in case the filter uses the index\n    models = this._filterModels(models);\n\n    return models;\n  },\n\n  // Filter an array of models, if a filter exists\n  _filterModels(models) {\n    if (this.getOption('filter')) {\n      models = _.filter(models, function(model, index) {\n        return this._shouldAddChild(model, index);\n      }, this);\n    }\n    return models;\n  },\n\n  _sortModelsBy(models, comparator) {\n    if (typeof comparator === 'string') {\n      return _.sortBy(models, function(model) {\n        return model.get(comparator);\n      }, this);\n    } else if (comparator.length === 1) {\n      return _.sortBy(models, comparator, this);\n    } else {\n      return models.sort(_.bind(comparator, this));\n    }\n  },\n\n  // Internal method to show an empty view in place of a collection of child views,\n  // when the collection is empty\n  _showEmptyView() {\n    const EmptyView = this.getEmptyView();\n\n    if (EmptyView && !this._showingEmptyView) {\n      this._showingEmptyView = true;\n\n      const model = new Backbone.Model();\n      let emptyViewOptions =\n        this.getOption('emptyViewOptions') || this.getOption('childViewOptions');\n      if (_.isFunction(emptyViewOptions)) {\n        emptyViewOptions = emptyViewOptions.call(this, model, this._emptyViewIndex);\n      }\n\n      const view = this._buildChildView(model, EmptyView, emptyViewOptions);\n\n      this.triggerMethod('before:render:empty', this, view);\n      this._addChildView(view, 0);\n      this.triggerMethod('render:empty', this, view);\n\n      view._parent = this;\n    }\n  },\n\n  // Internal method to destroy an existing emptyView instance if one exists. Called when\n  // a collection view has been rendered empty, and then a child is added to the collection.\n  _destroyEmptyView() {\n    if (this._showingEmptyView) {\n      this.triggerMethod('before:remove:empty', this);\n\n      this._destroyChildren();\n      delete this._showingEmptyView;\n\n      this.triggerMethod('remove:empty', this);\n    }\n  },\n\n  // Retrieve the empty view class\n  getEmptyView() {\n    return this.getOption('emptyView');\n  },\n\n  // Retrieve the `childView` class, either from `this.options.childView` or from\n  // the `childView` in the object definition. The \"options\" takes precedence.\n  // The `childView` property can be either a view class or a function that\n  // returns a view class. If it is a function, it will receive the model that\n  // will be passed to the view instance (created from the returned view class)\n  _getChildView(child) {\n    const childView = this.getOption('childView');\n\n    if (!childView) {\n      throw new MarionetteError({\n        name: 'NoChildViewError',\n        message: 'A \"childView\" must be specified'\n      });\n    }\n\n    // first check if the `childView` is a view class (the common case)\n    // then check if it's a function (which we assume that returns a view class)\n    if (childView.prototype instanceof Backbone.View || childView === Backbone.View) {\n      return childView;\n    } else if (_.isFunction(childView)) {\n      return childView.call(this, child);\n    } else {\n      throw new MarionetteError({\n        name: 'InvalidChildViewError',\n        message: '\"childView\" must be a view class or a function that returns a view class'\n      });\n    }\n  },\n\n  // Render the child's view and add it to the HTML for the collection view at a given index.\n  // This will also update the indices of later views in the collection in order to keep the\n  // children in sync with the collection.\n  _addChild(child, ChildView, index) {\n    const childViewOptions = this.getValue(this.getOption('childViewOptions'), child, index);\n\n    const view = this._buildChildView(child, ChildView, childViewOptions);\n\n    // increment indices of views after this one\n    this._updateIndices(view, true, index);\n\n    this.triggerMethod('before:add:child', this, view);\n    this._addChildView(view, index);\n    this.triggerMethod('add:child', this, view);\n\n    view._parent = this;\n\n    return view;\n  },\n\n  // Internal method. This decrements or increments the indices of views after the added/removed\n  // view to keep in sync with the collection.\n  _updateIndices(view, increment, index) {\n    if (!this.getOption('sort')) {\n      return;\n    }\n\n    if (increment) {\n      // assign the index to the view\n      view._index = index;\n    }\n\n    // update the indexes of views after this one\n    this.children.each(function(laterView) {\n      if (laterView._index >= view._index) {\n        laterView._index += increment ? 1 : -1;\n      }\n    });\n  },\n\n  // Internal Method. Add the view to children and render it at the given index.\n  _addChildView(view, index) {\n    // Only trigger attach if already attached and not buffering,\n    // otherwise _endBuffering() or Region#show() handles this.\n    const shouldTriggerAttach = !this._isBuffering && this._isAttached;\n\n    // set up the child view event forwarding\n    this._proxyChildEvents(view);\n\n    // Store the child view itself so we can properly remove and/or destroy it later\n    this.children.add(view);\n\n    if (!view.supportsRenderLifecycle) {\n      triggerMethodOn(view, 'before:render', view);\n    }\n\n    // Render view\n    view.render();\n\n    if (!view.supportsRenderLifecycle) {\n      view._isRendered = true;\n      triggerMethodOn(view, 'render', view);\n    }\n\n    if (shouldTriggerAttach) {\n      triggerMethodOn(view, 'before:attach', view);\n    }\n\n    // Attach view\n    this.attachHtml(this, view, index);\n\n    if (shouldTriggerAttach) {\n      view._isAttached = true;\n      triggerMethodOn(view, 'attach', view);\n    }\n  },\n\n  // Build a `childView` for a model in the collection.\n  _buildChildView(child, ChildViewClass, childViewOptions) {\n    const options = _.extend({model: child}, childViewOptions);\n    const childView = new ChildViewClass(options);\n    MonitorViewEvents(childView);\n    return childView;\n  },\n\n  // Remove the child view and destroy it. This function also updates the indices of later views\n  // in the collection in order to keep the children in sync with the collection.\n  _removeChildView(view) {\n    if (!view) { return view; }\n\n    this.triggerMethod('before:remove:child', this, view);\n\n    if (!view.supportsDestroyLifecycle) {\n      triggerMethodOn(view, 'before:destroy', view);\n    }\n\n    // call 'destroy' or 'remove', depending on which is found\n    if (view.destroy) {\n      view.destroy();\n    } else {\n      const shouldTriggerDetach = !!view._isAttached;\n\n      if (shouldTriggerDetach) {\n        triggerMethodOn(view, 'before:detach', view);\n      }\n\n      view.remove();\n\n      if (shouldTriggerDetach) {\n        view._isAttached = false;\n        triggerMethodOn(view, 'detach', view);\n      }\n\n      view._isDestroyed = true;\n    }\n\n    if (!view.supportsDestroyLifecycle) {\n      triggerMethodOn(view, 'destroy', view);\n    }\n\n    delete view._parent;\n    this.stopListening(view);\n    this.children.remove(view);\n    this.triggerMethod('remove:child', this, view);\n\n    // decrement the index of views after this one\n    this._updateIndices(view, false);\n\n    return view;\n  },\n\n  // check if the collection is empty or optionally whether an array of pre-processed models is empty\n  isEmpty(collection, options) {\n    let models;\n    if (_.result(options, 'processedModels')) {\n      models = options.processedModels;\n    } else {\n      models = this.collection ? this.collection.models : [];\n      models = this._filterModels(models);\n    }\n    return models.length === 0;\n  },\n\n  // If empty, show the empty view\n  _checkEmpty() {\n    if (this.isEmpty(this.collection)) {\n      this._showEmptyView();\n    }\n  },\n\n  // You might need to override this if you've overridden attachHtml\n  attachBuffer(collectionView, buffer) {\n    collectionView.$el.append(buffer);\n  },\n\n  // Create a fragment buffer from the currently buffered children\n  _createBuffer() {\n    const elBuffer = document.createDocumentFragment();\n    _.each(this._bufferedChildren, function(b) {\n      elBuffer.appendChild(b.el);\n    });\n    return elBuffer;\n  },\n\n  // Append the HTML to the collection's `el`. Override this method to do something other\n  // than `.append`.\n  attachHtml(collectionView, childView, index) {\n    if (collectionView._isBuffering) {\n      // buffering happens on reset events and initial renders\n      // in order to reduce the number of inserts into the\n      // document, which are expensive.\n      collectionView._bufferedChildren.splice(index, 0, childView);\n    } else {\n      // If we've already rendered the main collection, append\n      // the new child into the correct order if we need to. Otherwise\n      // append to the end.\n      if (!collectionView._insertBefore(childView, index)) {\n        collectionView._insertAfter(childView);\n      }\n    }\n  },\n\n  // Internal method. Check whether we need to insert the view into the correct position.\n  _insertBefore(childView, index) {\n    let currentView;\n    const findPosition = this.getOption('sort') && (index < this.children.length - 1);\n    if (findPosition) {\n      // Find the view after this one\n      currentView = this.children.find(function(view) {\n        return view._index === index + 1;\n      });\n    }\n\n    if (currentView) {\n      currentView.$el.before(childView.el);\n      return true;\n    }\n\n    return false;\n  },\n\n  // Internal method. Append a view to the end of the $el\n  _insertAfter(childView) {\n    this.$el.append(childView.el);\n  },\n\n  // Internal method to set up the `children` object for storing all of the child views\n  _initChildViewStorage() {\n    this.children = new ChildViewContainer();\n  },\n\n  // called by ViewMixin destroy\n  _removeChildren() {\n    this._destroyChildren({checkEmpty: false});\n  },\n\n  // Destroy the child views that this collection view is holding on to, if any\n  _destroyChildren({checkEmpty} = {}) {\n    this.triggerMethod('before:destroy:children', this);\n    const shouldCheckEmpty = checkEmpty !== false;\n    const childViews = this.children.map(_.identity);\n\n    this.children.each(this._removeChildView, this);\n\n    if (shouldCheckEmpty) {\n      this._checkEmpty();\n    }\n\n    this.triggerMethod('destroy:children', this);\n    return childViews;\n  },\n\n  // Return true if the given child should be shown. Return false otherwise.\n  // The filter will be passed (child, index, collection), where\n  //  'child' is the given model\n  //  'index' is the index of that model in the collection\n  //  'collection' is the collection referenced by this CollectionView\n  _shouldAddChild(child, index) {\n    const filter = this.getOption('filter');\n    return !_.isFunction(filter) || filter.call(this, child, index, this.collection);\n  },\n\n  // Set up the child view event forwarding. Uses a \"childview:\" prefix in front of all forwarded events.\n  _proxyChildEvents(view) {\n    const prefix = this.getOption('childViewEventPrefix');\n\n    // Forward all child view events through the parent,\n    // prepending \"childview:\" to the event name\n    this.listenTo(view, 'all', function(eventName, ...args) {\n\n      const childEventName = prefix + ':' + eventName;\n\n      const childViewEvents = this.normalizeMethods(this._childViewEvents);\n\n      // call collectionView childViewEvent if defined\n      if (typeof childViewEvents !== 'undefined' && _.isFunction(childViewEvents[eventName])) {\n        childViewEvents[eventName].apply(this, args);\n      }\n\n      // use the parent view's proxyEvent handlers\n      var childViewTriggers = this._childViewTriggers;\n\n      // Call the event with the proxy name on the parent layout\n      if (childViewTriggers && _.isString(childViewTriggers[eventName])) {\n        this.triggerMethod(childViewTriggers[eventName], ...args);\n      }\n\n      this.triggerMethod(childEventName, ...args);\n    });\n  },\n\n  _getImmediateChildren() {\n    return _.values(this.children._views);\n  },\n\n  getViewComparator() {\n    return this.getOption('viewComparator');\n  }\n});\n\n_.extend(CollectionView.prototype, ViewMixin);\n\nexport default CollectionView;\n","// Composite View\n// --------------\n\nimport _               from 'underscore';\nimport Backbone        from 'backbone';\nimport deprecate       from './utils/deprecate';\nimport getValue        from './utils/getValue';\nimport getOption       from './utils/getOption';\nimport MarionetteError from './error';\nimport CollectionView  from './collection-view';\nimport View            from './view';\n\n// Used for rendering a branch-leaf, hierarchical structure.\n// Extends directly from CollectionView and also renders an\n// a child view as `modelView`, for the top leaf\nvar CompositeView = CollectionView.extend({\n\n  // Setting up the inheritance chain which allows changes to\n  // Marionette.CollectionView.prototype.constructor which allows overriding\n  // option to pass '{sort: false}' to prevent the CompositeView from\n  // maintaining the sorted order of the collection.\n  // This will fallback onto appending childView's to the end.\n  constructor() {\n    deprecate('CompositeView is deprecated. Convert to View at your earliest convenience');\n    CollectionView.prototype.constructor.apply(this, arguments);\n  },\n\n  // Configured the initial events that the composite view\n  // binds to. Override this method to prevent the initial\n  // events, or to add your own initial events.\n  _initialEvents() {\n\n    // Bind only after composite view is rendered to avoid adding child views\n    // to nonexistent childViewContainer\n\n    if (this.collection) {\n      this.listenTo(this.collection, 'add', this._onCollectionAdd);\n      this.listenTo(this.collection, 'remove', this._onCollectionRemove);\n      this.listenTo(this.collection, 'reset', this.renderChildren);\n\n      if (this.getOption('sort')) {\n        this.listenTo(this.collection, 'sort', this._sortViews);\n      }\n    }\n  },\n\n  // Retrieve the `childView` to be used when rendering each of\n  // the items in the collection. The default is to return\n  // `this.childView` or Marionette.CompositeView if no `childView`\n  // has been defined. As happens in CollectionView, `childView` can\n  // be a function (which should return a view class).\n  _getChildView(child) {\n    var childView = this.getOption('childView');\n\n    // for CompositeView, if `childView` is not specified, we'll get the same\n    // composite view class rendered for each child in the collection\n    // then check if the `childView` is a view class (the common case)\n    // finally check if it's a function (which we assume that returns a view class)\n    if (!childView) {\n      return this.constructor;\n    } else if (childView.prototype instanceof Backbone.View || childView === Backbone.View) {\n      return childView;\n    } else if (_.isFunction(childView)) {\n      return childView.call(this, child);\n    } else {\n      throw new MarionetteError({\n        name: 'InvalidChildViewError',\n        message: '\"childView\" must be a view class or a function that returns a view class'\n      });\n    }\n\n  },\n\n  // Return the serialized model\n  serializeData() {\n    return this.serializeModel();\n  },\n\n  // Renders the model and the collection.\n  render() {\n    this._ensureViewIsIntact();\n    this._isRendering = true;\n    this.resetChildViewContainer();\n\n    this.triggerMethod('before:render', this);\n\n    this._renderTemplate();\n    this.bindUIElements();\n    this.renderChildren();\n\n    this._isRendering = false;\n    this._isRendered = true;\n    this.triggerMethod('render', this);\n    return this;\n  },\n\n  renderChildren() {\n    if (this._isRendered || this._isRendering) {\n      CollectionView.prototype._renderChildren.call(this);\n    }\n  },\n\n  // You might need to override this if you've overridden attachHtml\n  attachBuffer(compositeView, buffer) {\n    var $container = this.getChildViewContainer(compositeView);\n    $container.append(buffer);\n  },\n\n  // Internal method. Append a view to the end of the $el.\n  // Overidden from CollectionView to ensure view is appended to\n  // childViewContainer\n  _insertAfter(childView) {\n    var $container = this.getChildViewContainer(this, childView);\n    $container.append(childView.el);\n  },\n\n  // Internal method. Append reordered childView'.\n  // Overidden from CollectionView to ensure reordered views\n  // are appended to childViewContainer\n  _appendReorderedChildren(children) {\n    var $container = this.getChildViewContainer(this);\n    $container.append(children);\n  },\n\n  // Internal method to ensure an `$childViewContainer` exists, for the\n  // `attachHtml` method to use.\n  getChildViewContainer(containerView, childView) {\n    if (!!containerView.$childViewContainer) {\n      return containerView.$childViewContainer;\n    }\n\n    var container;\n    var childViewContainer = getOption.call(containerView, 'childViewContainer');\n    if (childViewContainer) {\n\n      var selector = getValue.call(containerView, childViewContainer);\n\n      if (selector.charAt(0) === '@' && containerView.ui) {\n        container = containerView.ui[selector.substr(4)];\n      } else {\n        container = containerView.$(selector);\n      }\n\n      if (container.length <= 0) {\n        throw new MarionetteError({\n          name: 'ChildViewContainerMissingError',\n          message: 'The specified \"childViewContainer\" was not found: ' + containerView.childViewContainer\n        });\n      }\n\n    } else {\n      container = containerView.$el;\n    }\n\n    containerView.$childViewContainer = container;\n    return container;\n  },\n\n  // Internal method to reset the `$childViewContainer` on render\n  resetChildViewContainer() {\n    if (this.$childViewContainer) {\n      this.$childViewContainer = undefined;\n    }\n  }\n});\n\n// To prevent duplication but allow the best View organization\n// Certain View methods are mixed directly into the deprecated CompositeView\nvar MixinFromView = _.pick(View.prototype, 'serializeModel', 'getTemplate', '_renderTemplate', 'attachElContent');\n_.extend(CompositeView.prototype, MixinFromView);\n\nexport default CompositeView;\n","// Behavior\n// --------\n\n// A Behavior is an isolated set of DOM /\n// user interactions that can be mixed into any View.\n// Behaviors allow you to blackbox View specific interactions\n// into portable logical chunks, keeping your views simple and your code DRY.\n\nimport _                  from 'underscore';\nimport MarionetteObject   from './object';\nimport DelegateEntityEventsMixin      from './mixins/delegate-entity-events';\nimport TriggersMixin      from './mixins/triggers';\nimport UIMixin            from './mixins/ui';\nimport getUniqueEventName from './utils/getUniqueEventName';\n\nvar Behavior = MarionetteObject.extend({\n  cidPrefix: 'mnb',\n\n  constructor: function(options, view) {\n    // Setup reference to the view.\n    // this comes in handle when a behavior\n    // wants to directly talk up the chain\n    // to the view.\n    this.view = view;\n    this.defaults = _.clone(_.result(this, 'defaults', {}));\n    this._setOptions(this.defaults, options);\n    // Construct an internal UI hash using\n    // the behaviors UI hash and then the view UI hash.\n    // This allows the user to use UI hash elements\n    // defined in the parent view as well as those\n    // defined in the given behavior.\n    // This order will help the reuse and share of a behavior\n    // between multiple views, while letting a view override a\n    // selector under an UI key.\n    this.ui = _.extend({}, _.result(this, 'ui'), _.result(view, 'ui'));\n\n    MarionetteObject.apply(this, arguments);\n  },\n\n  // proxy behavior $ method to the view\n  // this is useful for doing jquery DOM lookups\n  // scoped to behaviors view.\n  $: function() {\n    return this.view.$.apply(this.view, arguments);\n  },\n\n  // Stops the behavior from listening to events.\n  // Overrides Object#destroy to prevent additional events from being triggered.\n  destroy: function() {\n    this.stopListening();\n\n    return this;\n  },\n\n  proxyViewProperties: function() {\n    this.$el = this.view.$el;\n    this.el = this.view.el;\n\n    return this;\n  },\n\n  bindUIElements: function() {\n    this._bindUIElements();\n\n    return this;\n  },\n\n  unbindUIElements: function() {\n    this._unbindUIElements();\n\n    return this;\n  },\n\n  getUI: function(name) {\n    this.view._ensureViewIsIntact();\n    return this._getUI(name);\n  },\n\n  // Handle `modelEvents`, and `collectionEvents` configuration\n  delegateEntityEvents: function() {\n    this._delegateEntityEvents(this.view.model, this.view.collection);\n\n    return this;\n  },\n\n  undelegateEntityEvents: function() {\n    this._undelegateEntityEvents(this.view.model, this.view.collection);\n\n    return this;\n  },\n\n  getEvents: function() {\n    // Normalize behavior events hash to allow\n    // a user to use the @ui. syntax.\n    var behaviorEvents = this.normalizeUIKeys(_.result(this, 'events'));\n\n    // binds the handler to the behavior and builds a unique eventName\n    return _.reduce(behaviorEvents, function(events, behaviorHandler, key) {\n      if (!_.isFunction(behaviorHandler)) {\n        behaviorHandler = this[behaviorHandler];\n      }\n      if (!behaviorHandler) { return; }\n      key = getUniqueEventName(key);\n      events[key] = _.bind(behaviorHandler, this);\n      return events;\n    } , {}, this);\n  },\n\n  // Internal method to build all trigger handlers for a given behavior\n  getTriggers: function() {\n    if (!this.triggers) { return; }\n\n    // Normalize behavior triggers hash to allow\n    // a user to use the @ui. syntax.\n    var behaviorTriggers = this.normalizeUIKeys(_.result(this, 'triggers'));\n\n    return this._getViewTriggers(this.view, behaviorTriggers);\n  }\n\n});\n\n_.extend(Behavior.prototype, DelegateEntityEventsMixin, TriggersMixin, UIMixin);\n\nexport default Behavior;\n","import Backbone           from 'backbone';\nimport {version}          from '../package.json';\n\nimport proxy              from './utils/_proxy';\nimport extend             from './utils/extend';\nimport isNodeAttached     from './utils/isNodeAttached';\nimport mergeOptions       from './utils/mergeOptions';\nimport getOption          from './utils/getOption';\nimport normalizeMethods   from './utils/normalizeMethods';\nimport deprecate          from './utils/deprecate';\n\nimport MonitorViewEvents  from './monitor-view-events';\nimport MarionetteObject   from './object';\nimport Renderer           from './renderer';\nimport TemplateCache      from './template-cache';\nimport View               from './view';\nimport CollectionView     from './collection-view';\nimport CompositeView      from './composite-view';\nimport Behavior           from './behavior';\nimport Region             from './region';\nimport Application        from './application';\nimport AppRouter          from './app-router';\nimport MarionetteError    from './error';\n\nimport behaviorsLookup    from './config/behaviors-lookup';\n\nimport {\n  FEATURES,\n  isEnabled,\n  setEnabled\n} from './config/features';\n\nimport {\n  bindEntityEvents,\n  unbindEntityEvents\n} from './bind-entity-events';\n\nimport {\n  bindRadioRequests,\n  unbindRadioRequests\n} from './bind-radio-requests';\n\nimport {\n  triggerMethod,\n  triggerMethodOn,\n  triggerMethodMany\n} from './trigger-method';\n\nvar previousMarionette = Backbone.Marionette;\nvar Marionette = Backbone.Marionette = {};\n\n// This allows you to run multiple instances of Marionette on the same\n// webapp. After loading the new version, call `noConflict()` to\n// get a reference to it. At the same time the old version will be\n// returned to Backbone.Marionette.\nMarionette.noConflict = function() {\n  Backbone.Marionette = previousMarionette;\n  return this;\n};\n\n// Utilities\nMarionette.bindEntityEvents = proxy(bindEntityEvents);\nMarionette.unbindEntityEvents = proxy(unbindEntityEvents);\nMarionette.bindRadioEvents = proxy(bindEntityEvents);\nMarionette.unbindRadioEvents = proxy(unbindEntityEvents);\nMarionette.bindRadioRequests = proxy(bindRadioRequests);\nMarionette.unbindRadioRequests = proxy(unbindRadioRequests);\nMarionette.mergeOptions = proxy(mergeOptions);\nMarionette.getOption = proxy(getOption);\nMarionette.normalizeMethods = proxy(normalizeMethods);\nMarionette.extend = extend;\nMarionette.isNodeAttached = isNodeAttached;\nMarionette.deprecate = deprecate;\nMarionette.triggerMethod = proxy(triggerMethod);\nMarionette.triggerMethodOn = triggerMethodOn;\nMarionette.triggerMethodMany = triggerMethodMany;\nMarionette.isEnabled = isEnabled;\nMarionette.setEnabled = setEnabled;\nMarionette.MonitorViewEvents = MonitorViewEvents;\n\nMarionette.Behaviors = {};\nMarionette.Behaviors.behaviorsLookup = behaviorsLookup;\n\n// Classes\nMarionette.Application = Application;\nMarionette.AppRouter = AppRouter;\nMarionette.Renderer = Renderer;\nMarionette.TemplateCache = TemplateCache;\nMarionette.View = View;\nMarionette.CollectionView = CollectionView;\nMarionette.CompositeView = CompositeView;\nMarionette.Behavior = Behavior;\nMarionette.Region = Region;\nMarionette.Error = MarionetteError;\nMarionette.Object = MarionetteObject;\n\n// Configuration\nMarionette.DEV_MODE = false;\nMarionette.FEATURES = FEATURES;\nMarionette.VERSION = version;\n\nexport default Marionette;\n"],"sourceRoot":"/source/"}