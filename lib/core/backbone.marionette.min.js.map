{"version":3,"sources":["backbone.marionette.min.js","/source/src/bind-entity-events.js","/source/src/bind-radio-requests.js","/source/src/trigger-method.js","/source/src/config/features.js","/source/src/monitor-view-events.js","/source/src/config/behaviors-lookup.js","/source/src/utils/getUniqueEventName.js","/source/src/mixins/triggers.js","/source/src/mixins/behaviors.js","/source/src/utils/extend.js","/source/src/error.js","/source/src/utils/_proxy.js","/source/src/utils/normalizeMethods.js","/source/src/utils/mergeOptions.js","/source/src/utils/getOption.js","/source/src/utils/isNodeAttached.js","/source/src/utils/deprecate.js","/source/src/mixins/radio.js","/source/src/utils/_setOptions.js","/source/src/utils/getValue.js","/source/src/mixins/common.js","/source/src/object.js","/source/src/region.js","/source/src/application.js","/source/src/app-router.js","/source/src/template-cache.js","/source/src/renderer.js","/source/src/mixins/regions.js","/source/src/mixins/ui.js","/source/src/mixins/delegate-entity-events.js","/source/src/mixins/view.js","/source/src/view.js","/source/src/collection-view.js","/source/src/composite-view.js","/source/src/behavior.js","/source/src/backbone.marionette.js"],"names":["global","factory","exports","module","require","define","amd","Marionette","Mn","Backbone","_","ChildViewContainer","Radio","this","_$1","bindFromStrings","target","entity","evt","methods","actionName","methodNames","split","each","methodName","method","MarionetteError","iterateEvents","bindings","isObject","message","url","isString","bindEntityEvents","unbindEntityEvents","iterateReplies","channel","normalizedRadioRequests","normalizeMethods","call","bindRadioRequests","unbindRadioRequests","getEventName","match","prefix","eventName","toUpperCase","triggerMethod","event","result","replace","splitter","getOption","_len","arguments","length","args","Array","_key","isFunction","apply","trigger","concat","triggerMethodOn","context","fnc","_len2","_key2","triggerMethodMany","targets","_len3","_key3","undefined","isEnabled","name","FEATURES","setEnabled","state","triggerMethodChildren","view","beforeEachTrigger","_getImmediateChildren","child","setIsAttached","_isAttached","unsetIsAttached","MonitorViewEvents","handleBeforeAttach","handleAttach","triggerDOMRefresh","handleBeforeDetach","handleDetach","handleRender","_isRendered","_areViewEventsMonitored","on","before:attach","attach","before:detach","detach","render","behaviorsLookup","uniqueName","selector","uniqueId","join","buildViewTrigger","triggerDef","shouldPreventDefault","preventDefault","shouldStopPropagation","stopPropagation","e","getBehaviorClass","options","key","behaviorClass","getValue","Behaviors","parseBehaviors","behaviors","chain","map","BehaviorClass","_options","behavior","nestedBehaviors","flatten","value","babelHelpers","toConsumableArray","arr","isArray","i","arr2","from","version","extend","Model","errorProps","Error","urlRoot","constructor","error","pick","captureStackTrace","toString","proxy","hash","reduce","normalizedHash","mergeOptions","keys","optionName","isNodeAttached","el","$","contains","document","documentElement","deprecate","test","prev","next","DEV_MODE","_cache","_warn","_console","console","warn","log","RadioMixin","_initRadio","channelName","_channel","radioEvents","bindRadioEvents","radioRequests","_destroyRadio","stopReplying","getChannel","unbindRadioEvents","_setOptions","CommonMixin","MarionetteObject","cid","cidPrefix","initialize","prototype","Events","_isDestroyed","isDestroyed","destroy","stopListening","Region","replaceElement","_isReplaced","_initEl","$el","getEl","show","_ensureElement","_ensureView","currentView","empty","_parent","_renderView","_attachView","supportsRenderLifecycle","shouldTriggerAttach","shouldReplaceEl","attachHtml","_replaceEl","_restoreEl","parent","parentNode","replaceChild","isReplaced","shouldReplace","appendChild","_ref","preventDestroy","shouldPreventDestroy","off","_detachView","_destroyView","shouldTriggerDetach","contents","supportsDestroyLifecycle","remove","hasView","reset","Application","_initRegion","regionClass","region","RegionClass","_region","getRegion","showView","getView","start","AppRouter","Router","appRoutes","controller","_getController","processAppRoutes","_processOnRoute","appRoute","route","_addAppRoute","routeName","routeArgs","onRoute","routePath","invert","routeNames","reverse","bind","TemplateCache","templateId","templateCaches","get","cachedTemplate","load","clear","compiledTemplate","template","loadTemplate","compileTemplate","$template","html","rawTemplate","Renderer","data","templateFunc","RegionsMixin","_initRegions","regions","_regions","addRegions","_reInitRegions","invoke","addRegion","definition","isEmpty","normalizeUIValues","_addRegions","regionDefinitions","_buildRegion","_addRegion","_buildRegionFromDefinition","_buildRegionFromObject","_buildRegionFromRegionClass","omit","defaults","parentEl","partial","removeRegion","_removeRegion","removeRegions","getRegions","emptyRegions","hasRegion","clone","showChildView","getChildView","_normalizeUIKeys","ui","memo","val","normalizedKey","normalizeUIString","uiString","r","slice","_normalizeUIValues","properties","property","propertyVal","UIMixin","normalizeUIKeys","uiBindings","_getUIBindings","_bindUIElements","_uiBindings","_ui","_unbindUIElements","_getUI","delegateEventSplitter","getUniqueEventName","TriggersMixin","_getViewTriggers","triggers","events","DelegateEntityEventsMixin","_delegateEntityEvents","model","collection","_undelegateEntityEvents","modelEvents","collectionEvents","BehaviorsMixin","_initBehaviors","_behaviors","_getBehaviorTriggers","_getBehaviorEvents","_proxyBehaviorViewProperties","_delegateBehaviorEntityEvents","_undelegateBehaviorEntityEvents","_destroyBehaviors","_bindBehaviorUIElements","_unbindBehaviorUIElements","_triggerEventOnBehaviors","ViewMixin","isRendered","isAttached","mixinTemplateContext","templateContext","delegateEvents","eventsArg","_buildEventProxies","viewEvents","_getEvents","combinedEvents","getTriggers","View","delegateEntityEvents","undelegateEntityEvents","_ensureViewIsIntact","unbindUIElements","_removeElement","_removeChildren","bindUIElements","getUI","childViewEventPrefix","ret","_triggerEventOnParentLayout","_childViewEvents","_childViewTriggers","layoutView","_parentView","eventPrefix","prefixedEventName","childViewEvents","childViewTriggers","serializeData","serializeModel","items","serializeCollection","attributes","_renderTemplate","getTemplate","attachElContent","pluck","compact","CollectionView","sort","once","_initialEvents","_initChildViewStorage","_bufferedChildren","_startBuffering","_isBuffering","_endBuffering","attachBuffer","_createBuffer","listenTo","_onCollectionAdd","_onCollectionRemove","_sortViews","opts","index","at","indexOf","_filteredSortedModels","_shouldAddChild","_destroyEmptyView","ChildView","_getChildView","_addChild","children","findByModel","_removeChildView","_checkEmpty","_renderChildren","setFilter","filter","preventRender","viewCanBeRendered","previousModels","models","_applyModelDeltas","removeFilter","currentIds","addedChildNotExists","prevModel","removedChildExists","reorder","_this","anyModelsAdded","some","elsToReorder","_index","filteredOutViews","_appendReorderedChildren","resortView","orderChanged","find","item","_emptyViewIndex","append","_destroyChildren","checkEmpty","processedModels","_showEmptyView","_showCollection","addedAt","viewComparator","getViewComparator","Math","min","max","addedModel","_sortModelsBy","splice","_filterModels","comparator","sortBy","EmptyView","getEmptyView","_showingEmptyView","emptyViewOptions","_buildChildView","_addChildView","childView","childViewOptions","_updateIndices","increment","laterView","_proxyChildEvents","add","ChildViewClass","collectionView","buffer","elBuffer","createDocumentFragment","b","_insertBefore","_insertAfter","findPosition","before","_ref2","shouldCheckEmpty","childViews","identity","childEventName","values","_views","CompositeView","renderChildren","_isRendering","resetChildViewContainer","compositeView","$container","getChildViewContainer","containerView","$childViewContainer","container","childViewContainer","charAt","substr","MixinFromView","Behavior","proxyViewProperties","getEvents","behaviorEvents","behaviorHandler","behaviorTriggers","previousMarionette","noConflict","Object","VERSION"],"mappings":"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C,KAAKvJ,I1By6B5BwJ,M0B/5BM,W1Bk6BJ,IAAK,G0Bj6BFrI,G1Bi6BMhF,EAAOC,UAAUC,O0Bl6BVC,EAAIC,MAAAJ,GAAAK,EAAA,EAAAL,EAAAK,EAAAA,I1Bm6BlBF,E0Bn6BkBE,GAAAJ,UAAAI,E1Bs6BpB,I0Bp6BGH,GAASC,EAAKD,M1Bs6BjB,I0Bp6BGA,EAAS,E1Bq6BV,I0Bp6BI8E,EAAI,EAAO9E,EAAJ8E,EAAYA,UACfxH,MAAKyP,eAAe9M,EAAK6E,Q1Bu6BjCxH,M0Bp6BIyP,qB1B46BVxP,E0Bp6BC2H,OAAO2H,EAAcxE,W1Bu6BpB6E,K0Bp6BK,SAASvJ,G1Bs6BZ,G0Bp6BGrG,KAAK8P,iB1Bq6BN,M0Bp6BM9P,MAAK8P,gB1Bw6Bb,I0Bp6BGC,GAAW/P,KAAKgQ,aAAahQ,KAAKwP,WAAYnJ,E1Bu6BjD,OAFArG,M0Bp6BI8P,iBAAmB9P,KAAKiQ,gBAAgBF,EAAU1J,GAEhDrG,KAAK8P,kB1B46BbE,a0Bp6Ba,SAASR,EAAYnJ,G1Bq6BhC,G0Bp6BG6J,GAAYtQ,EAASmJ,EAAEyG,E1Bs6B1B,K0Bp6BIU,EAAUxN,O1Bq6BZ,K0Bp6BK,IAAI7B,I1Bq6BPgD,K0Bp6BK,kB1Bq6BL5C,Q0Bp6BQ,6BAA+BuO,EAAa,K1Bu6BxD,O0Bp6BMU,GAAUC,Q1B26BlBF,gB0Bp6BgB,SAASG,EAAa/J,G1Bq6BpC,M0Bp6BMpG,GAAE8P,SAASK,EAAa/J,KCtFnC,IAAIgK,I3BsgCD9K,O2BhgCO,SAASwK,EAAUO,G3BigCxB,I2BhgCIP,E3BigCF,K2BhgCK,IAAIlP,I3BigCPgD,K2BhgCK,wB3BigCL5C,Q2BhgCQ,kE3BogCZ,I2BhgCGsP,GAAetQ,EAAE6C,WAAWiN,GAAYA,EAAWR,EAAcG,IAAIK,E3BkgCxE,O2BhgCMQ,GAAaD,K3BogCnBE,GACF3C,Y4BzhCYxC,E5B6hCZoF,a4BzhCa,W5B4hCXzQ,K4BzhCI0Q,QAAW1Q,KAAK0Q,Y5B0hCpB1Q,K4BzhCI2Q,Y5B2hCJ3Q,K4BzhCI4Q,WAAW5Q,KAAKwG,SAASxG,KAAKuC,UAAU,c5B8hC9CsO,e4BzhCe,W5B0hCb5Q,E4Bz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kCAEEjV,M/Bs+CRqW,oB+Bl+CoB,W/Bm+ClB,G+Bl+CGrW,KAAKiL,a/Bm+CN,K+Bl+CK,IAAIpK,I/Bm+CPgD,K+Bl+CK,qB/Bm+CL5C,Q+Bl+CQ,eAAiBjB,KAAK4K,IAAM,uD/Bw+C1CO,Q+Bl+CQ,W/Bm+CN,G+Bl+CGnL,KAAKiL,a/Bm+CN,M+Bn+C6BjL,K/Bu+C/B,KAAK,G+Bt+CAqN,KAAwBrN,KAAKuE,Y/Bs+CzB/B,EAAOC,UAAUC,O+Bx+CRC,EAAIC,MAAAJ,GAAAK,EAAA,EAAAL,EAAAK,EAAAA,I/By+CpBF,E+Bz+CoBE,GAAAJ,UAAAI,E/BwgDtB,OA5BA7C,M+Bx+CIkC,cAAaa,MAAlB/C,MAAmB,kBAAgBiD,OAAKN,IACpC0K,G/By+CDrN,K+Bx+CIkC,cAAc,gBAAiBlC,M/B4+CrCA,K+Bx+CIsW,mB/B4+CJtW,K+Bx+CIuW,iBAEDlJ,I/By+CDrN,K+Bx+CIuE,aAAc,E/By+ClBvE,K+Bx+CIkC,cAAc,SAAUlC,O/B4+C9BA,K+Bx+CIwW,kB/B0+CJxW,K+Bx+CIkV,kBAAkBvS,G/B0+CtB3C,K+Bx+CIiL,cAAe,E/By+CnBjL,K+Bx+CIgF,aAAc,E/By+ClBhF,K+Bx+CIkC,cAAaa,MAAlB/C,MAAmB,WAASiD,OAAKN,I/B0+ChC3C,K+Bx+CIoL,gBAEEpL,M/B2+CRyW,e+Bx+Ce,W/B4+Cb,MAHAzW,M+Bx+CIwT,kB/By+CJxT,K+Bx+CImV,0BAEEnV,M/B4+CRsW,iB+Bx+CiB,W/B4+Cf,MAHAtW,M+Bx+CI2T,oB/By+CJ3T,K+Bx+CIoV,4BAEEpV,M/B2+CR0W,M+Bx+CM,SAAS7S,G/B0+Cb,MADA7D,M+Bx+CIqW,sBACErW,KAAK4T,OAAO/P,I/B6+CpB8S,qB+Bx+CqB,Y/B4+CrBzU,c+Bx+Cc,W/By+CZ,IAAK,GAAImB,GAAQZ,UAAUC,O+Bz+CHC,EAAIC,MAAAS,GAAAC,EAAA,EAAAD,EAAAC,EAAAA,I/B0+C1BX,E+B1+C0BW,GAAAb,UAAAa,E/B6+C5B,I+B5+CKsT,GAAM1U,EAAca,MAAM/C,KAAM2C,E/Bi/CrC,OAHA3C,M+B5+CIqV,yBAAwBtS,MAA7B/C,KA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","file":"backbone.marionette.min.js","sourcesContent":["// MarionetteJS (Backbone.Marionette)\n// ----------------------------------\n// v3.0.0\n//\n// Copyright (c)2016 Derick Bailey, Muted Solutions, LLC.\n// Distributed under MIT license\n//\n// http://marionettejs.com\n\n\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('backbone'), require('underscore'), require('backbone.babysitter'), require('backbone.radio')) :\n\ttypeof define === 'function' && define.amd ? define(['backbone', 'underscore', 'backbone.babysitter', 'backbone.radio'], factory) :\n\tglobal.Marionette  = global.Mn = factory(global.Backbone,global._,global.Backbone.ChildViewContainer,global.Backbone.Radio);\n}(this, function (Backbone,_$1,ChildViewContainer,Radio) { 'use strict';\n\n\tBackbone = 'default' in Backbone ? Backbone['default'] : Backbone;\n\t_$1 = 'default' in _$1 ? _$1['default'] : _$1;\n\tChildViewContainer = 'default' in ChildViewContainer ? ChildViewContainer['default'] : ChildViewContainer;\n\tRadio = 'default' in Radio ? Radio['default'] : Radio;\n\n\tvar babelHelpers = {};\n\n\tbabelHelpers.toConsumableArray = function (arr) {\n\t  if (Array.isArray(arr)) {\n\t    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n\t    return arr2;\n\t  } else {\n\t    return Array.from(arr);\n\t  }\n\t};\n\tvar version = \"3.0.0\";\n\n\t// Borrow the Backbone `extend` method so we can use it as needed\n\tvar extend = Backbone.Model.extend;\n\n\tvar errorProps = ['description', 'fileName', 'lineNumber', 'name', 'message', 'number'];\n\n\tvar MarionetteError = extend.call(Error, {\n\t  urlRoot: 'http://marionettejs.com/docs/v' + version + '/',\n\n\t  constructor: function MarionetteError(message, options) {\n\t    if (_$1.isObject(message)) {\n\t      options = message;\n\t      message = options.message;\n\t    } else if (!options) {\n\t      options = {};\n\t    }\n\n\t    var error = Error.call(this, message);\n\t    _$1.extend(this, _$1.pick(error, errorProps), _$1.pick(options, errorProps));\n\n\t    this.captureStackTrace();\n\n\t    if (options.url) {\n\t      this.url = this.urlRoot + options.url;\n\t    }\n\t  },\n\n\t  captureStackTrace: function captureStackTrace() {\n\t    if (Error.captureStackTrace) {\n\t      Error.captureStackTrace(this, MarionetteError);\n\t    }\n\t  },\n\n\t  toString: function toString() {\n\t    return this.name + ': ' + this.message + (this.url ? ' See: ' + this.url : '');\n\t  }\n\t});\n\n\tMarionetteError.extend = extend;\n\n\t// Bind/unbind the event to handlers specified as a string of\n\t// handler names on the target object\n\tfunction bindFromStrings(target, entity, evt, methods, actionName) {\n\t  var methodNames = methods.split(/\\s+/);\n\n\t  _$1.each(methodNames, function (methodName) {\n\t    var method = target[methodName];\n\t    if (!method) {\n\t      throw new MarionetteError('Method \"' + methodName + '\" was configured as an event handler, but does not exist.');\n\t    }\n\n\t    target[actionName](entity, evt, method);\n\t  });\n\t}\n\n\t// generic looping function\n\tfunction iterateEvents(target, entity, bindings, actionName) {\n\t  if (!entity || !bindings) {\n\t    return;\n\t  }\n\n\t  // type-check bindings\n\t  if (!_$1.isObject(bindings)) {\n\t    throw new MarionetteError({\n\t      message: 'Bindings must be an object.',\n\t      url: 'marionette.functions.html#marionettebindentityevents'\n\t    });\n\t  }\n\n\t  // iterate the bindings and bind/unbind them\n\t  _$1.each(bindings, function (method, evt) {\n\n\t    // allow for a list of method names as a string\n\t    if (_$1.isString(method)) {\n\t      bindFromStrings(target, entity, evt, method, actionName);\n\t      return;\n\t    }\n\n\t    target[actionName](entity, evt, method);\n\t  });\n\t}\n\n\tfunction bindEntityEvents(entity, bindings) {\n\t  iterateEvents(this, entity, bindings, 'listenTo');\n\t}\n\n\tfunction unbindEntityEvents(entity, bindings) {\n\t  iterateEvents(this, entity, bindings, 'stopListening');\n\t}\n\n\tvar proxy = function proxy(method) {\n\t  return function (context) {\n\t    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t      args[_key - 1] = arguments[_key];\n\t    }\n\n\t    return method.apply(context, args);\n\t  };\n\t};\n\n\t// Marionette.normalizeMethods\n\t// ----------------------\n\n\t// Pass in a mapping of events => functions or function names\n\t// and return a mapping of events => functions\n\tvar normalizeMethods = function normalizeMethods(hash) {\n\t  return _$1.reduce(hash, function (normalizedHash, method, name) {\n\t    if (!_$1.isFunction(method)) {\n\t      method = this[method];\n\t    }\n\t    if (method) {\n\t      normalizedHash[name] = method;\n\t    }\n\t    return normalizedHash;\n\t  }, {}, this);\n\t};\n\n\tfunction iterateReplies(target, channel, bindings, actionName) {\n\t  if (!channel || !bindings) {\n\t    return;\n\t  }\n\n\t  // type-check bindings\n\t  if (!_$1.isObject(bindings)) {\n\t    throw new MarionetteError({\n\t      message: 'Bindings must be an object.',\n\t      url: 'marionette.functions.html#marionettebindradiorequests'\n\t    });\n\t  }\n\n\t  var normalizedRadioRequests = normalizeMethods.call(target, bindings);\n\n\t  channel[actionName](normalizedRadioRequests, target);\n\t}\n\n\tfunction bindRadioRequests(channel, bindings) {\n\t  iterateReplies(this, channel, bindings, 'reply');\n\t}\n\n\tfunction unbindRadioRequests(channel, bindings) {\n\t  iterateReplies(this, channel, bindings, 'stopReplying');\n\t}\n\n\t// Merge `keys` from `options` onto `this`\n\tvar mergeOptions = function mergeOptions(options, keys) {\n\t  if (!options) {\n\t    return;\n\t  }\n\t  _$1.extend(this, _$1.pick(options, keys));\n\t};\n\n\tvar getOption = function getOption(optionName) {\n\t  if (!optionName) {\n\t    return;\n\t  }\n\t  if (this.options && this.options[optionName] !== undefined) {\n\t    return this.options[optionName];\n\t  } else {\n\t    return this[optionName];\n\t  }\n\t};\n\n\t// Determine if `el` is a child of the document\n\tvar isNodeAttached = function isNodeAttached(el) {\n\t  return Backbone.$.contains(document.documentElement, el);\n\t};\n\n\tvar deprecate = function deprecate(message, test) {\n\t  if (_$1.isObject(message)) {\n\t    message = message.prev + ' is going to be removed in the future. ' + 'Please use ' + message.next + ' instead.' + (message.url ? ' See: ' + message.url : '');\n\t  }\n\n\t  if (!Marionette.DEV_MODE) {\n\t    return;\n\t  }\n\n\t  if ((test === undefined || !test) && !deprecate._cache[message]) {\n\t    deprecate._warn('Deprecation warning: ' + message);\n\t    deprecate._cache[message] = true;\n\t  }\n\t};\n\n\tdeprecate._console = typeof console !== 'undefined' ? console : {};\n\tdeprecate._warn = function () {\n\t  var warn = deprecate._console.warn || deprecate._console.log || function () {};\n\t  return warn.apply(deprecate._console, arguments);\n\t};\n\tdeprecate._cache = {};\n\n\t// split the event name on the \":\"\n\tvar splitter = /(^|:)(\\w)/gi;\n\n\t// take the event section (\"section1:section2:section3\")\n\t// and turn it in to uppercase name onSection1Section2Section3\n\tfunction getEventName(match, prefix, eventName) {\n\t  return eventName.toUpperCase();\n\t}\n\n\t// Trigger an event and/or a corresponding method name. Examples:\n\t//\n\t// `this.triggerMethod(\"foo\")` will trigger the \"foo\" event and\n\t// call the \"onFoo\" method.\n\t//\n\t// `this.triggerMethod(\"foo:bar\")` will trigger the \"foo:bar\" event and\n\t// call the \"onFooBar\" method.\n\n\tfunction triggerMethod(event) {\n\t  // get the method name from the event name\n\t  var methodName = 'on' + event.replace(splitter, getEventName);\n\t  var method = getOption.call(this, methodName);\n\t  var result;\n\n\t  // call the onMethodName if it exists\n\n\t  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t    args[_key - 1] = arguments[_key];\n\t  }\n\n\t  if (_$1.isFunction(method)) {\n\t    // pass all args, except the event name\n\t    result = method.apply(this, args);\n\t  }\n\n\t  // trigger the event\n\t  this.trigger.apply(this, [event].concat(args));\n\n\t  return result;\n\t}\n\n\t// triggerMethodOn invokes triggerMethod on a specific context\n\t//\n\t// e.g. `Marionette.triggerMethodOn(view, 'show')`\n\t// will trigger a \"show\" event or invoke onShow the view.\n\n\tfunction triggerMethodOn(context) {\n\t  var fnc = _$1.isFunction(context.triggerMethod) ? context.triggerMethod : triggerMethod;\n\n\t  for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n\t    args[_key2 - 1] = arguments[_key2];\n\t  }\n\n\t  return fnc.apply(context, args);\n\t}\n\n\t// triggerMethodMany invokes triggerMethod on many targets from a source\n\t// it's useful for standardizing a pattern where we propagate an event from a source\n\t// to many targets.\n\t//\n\t// For each target we want to follow the pattern\n\t// target.triggerMethod(event, target, ...args)\n\t// e.g childview.triggerMethod('attach', childView, ...args)\n\n\tfunction triggerMethodMany(targets, eventName) {\n\t  for (var _len3 = arguments.length, args = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n\t    args[_key3 - 2] = arguments[_key3];\n\t  }\n\n\t  _$1.each(targets, function (target) {\n\t    triggerMethodOn.apply(undefined, [target, eventName, target].concat(args));\n\t  });\n\t}\n\n\tvar FEATURES = {};\n\n\tfunction isEnabled(name) {\n\t  return !!FEATURES[name];\n\t}\n\n\tfunction setEnabled(name, state) {\n\t  return FEATURES[name] = state;\n\t}\n\n\t// Trigger method on children unless a pure Backbone.View\n\tfunction triggerMethodChildren(view, event, beforeEachTrigger) {\n\t  if (!view._getImmediateChildren) {\n\t    return;\n\t  }\n\t  _.each(view._getImmediateChildren(), function (child) {\n\t    if (beforeEachTrigger) {\n\t      beforeEachTrigger(child);\n\t    }\n\t    triggerMethodOn(child, event, child);\n\t  });\n\t}\n\n\tfunction setIsAttached(view) {\n\t  view._isAttached = true;\n\t}\n\n\tfunction unsetIsAttached(view) {\n\t  view._isAttached = false;\n\t}\n\n\t// Monitor a view's state, propagating attach/detach events to children and firing dom:refresh\n\t// whenever a rendered view is attached or an attached view is rendered.\n\tfunction MonitorViewEvents(view) {\n\t  if (view._areViewEventsMonitored) {\n\t    return;\n\t  }\n\n\t  view._areViewEventsMonitored = true;\n\n\t  function handleBeforeAttach() {\n\t    triggerMethodChildren(view, 'before:attach');\n\t  }\n\n\t  function handleAttach() {\n\t    triggerMethodChildren(view, 'attach', setIsAttached);\n\t    triggerDOMRefresh();\n\t  }\n\n\t  function handleBeforeDetach() {\n\t    triggerMethodChildren(view, 'before:detach');\n\t  }\n\n\t  function handleDetach() {\n\t    triggerMethodChildren(view, 'detach', unsetIsAttached);\n\t  }\n\n\t  function handleRender() {\n\t    triggerDOMRefresh();\n\t  }\n\n\t  function triggerDOMRefresh() {\n\t    if (view._isAttached && view._isRendered) {\n\t      triggerMethodOn(view, 'dom:refresh', view);\n\t    }\n\t  }\n\n\t  view.on({\n\t    'before:attach': handleBeforeAttach,\n\t    'attach': handleAttach,\n\t    'before:detach': handleBeforeDetach,\n\t    'detach': handleDetach,\n\t    'render': handleRender\n\t  });\n\t}\n\n\t// Placeholder method to be extended by the user.\n\t// The method should define the object that stores the behaviors.\n\t// i.e.\n\t//\n\t// ```js\n\t// Marionette.Behaviors.behaviorsLookup: function() {\n\t//   return App.Behaviors\n\t// }\n\t// ```\n\n\tfunction behaviorsLookup() {\n\t  throw new MarionetteError({\n\t    message: 'You must define where your behaviors are stored.',\n\t    url: 'marionette.behaviors.md#behaviorslookup'\n\t  });\n\t}\n\n\tvar RadioMixin = {\n\n\t  _initRadio: function _initRadio() {\n\t    var channelName = this.getValue(this.getOption('channelName'));\n\n\t    if (!channelName) {\n\t      return;\n\t    }\n\n\t    var channel = this._channel = Radio.channel(channelName);\n\n\t    var radioEvents = this.getValue(this.getOption('radioEvents'));\n\t    this.bindRadioEvents(channel, radioEvents);\n\n\t    var radioRequests = this.getValue(this.getOption('radioRequests'));\n\t    this.bindRadioRequests(channel, radioRequests);\n\n\t    this.on('destroy', this._destroyRadio);\n\t  },\n\n\t  _destroyRadio: function _destroyRadio() {\n\t    this._channel.stopReplying(null, null, this);\n\t  },\n\n\t  getChannel: function getChannel() {\n\t    return this._channel;\n\t  },\n\n\t  // Proxy `bindRadioEvents`\n\t  bindRadioEvents: bindEntityEvents,\n\n\t  // Proxy `unbindRadioEvents`\n\t  unbindRadioEvents: unbindEntityEvents,\n\n\t  // Proxy `bindRadioRequests`\n\t  bindRadioRequests: bindRadioRequests,\n\n\t  // Proxy `unbindRadioRequests`\n\t  unbindRadioRequests: unbindRadioRequests\n\n\t};\n\n\t// Internal utility for setting options consistently across Mn\n\tvar _setOptions = function _setOptions() {\n\t  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t    args[_key] = arguments[_key];\n\t  }\n\n\t  this.options = _$1.extend.apply(_$1, [{}, _$1.result(this, 'options')].concat(args));\n\t};\n\n\t// Similar to `_.result`, this is a simple helper\n\t// If a function is provided we call it with context\n\t// otherwise just return the value. If the value is\n\t// undefined return a default value\n\tvar getValue = function getValue(value) {\n\t  if (_$1.isFunction(value)) {\n\t    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t      args[_key - 1] = arguments[_key];\n\t    }\n\n\t    return value.apply(this, args);\n\t  }\n\t  return value;\n\t};\n\n\tvar CommonMixin = {\n\t  getValue: getValue,\n\n\t  // Imports the \"normalizeMethods\" to transform hashes of\n\t  // events=>function references/names to a hash of events=>function references\n\t  normalizeMethods: normalizeMethods,\n\n\t  _setOptions: _setOptions,\n\n\t  // A handy way to merge passed-in options onto the instance\n\t  mergeOptions: mergeOptions,\n\n\t  // Enable getting options from this or this.options by name.\n\t  getOption: getOption,\n\n\t  // Enable binding view's events from another entity.\n\t  bindEntityEvents: bindEntityEvents,\n\n\t  // Enable unbinding view's events from another entity.\n\t  unbindEntityEvents: unbindEntityEvents\n\t};\n\n\t// A Base Class that other Classes should descend from.\n\t// Object borrows many conventions and utilities from Backbone.\n\tvar MarionetteObject = function MarionetteObject(options) {\n\t  this._setOptions(options);\n\t  this.cid = _$1.uniqueId(this.cidPrefix);\n\t  this._initRadio();\n\t  this.initialize.apply(this, arguments);\n\t};\n\n\tMarionetteObject.extend = extend;\n\n\t// Object Methods\n\t// --------------\n\n\t// Ensure it can trigger events with Backbone.Events\n\t_$1.extend(MarionetteObject.prototype, Backbone.Events, CommonMixin, RadioMixin, {\n\t  cidPrefix: 'mno',\n\n\t  // for parity with Marionette.AbstractView lifecyle\n\t  _isDestroyed: false,\n\n\t  isDestroyed: function isDestroyed() {\n\t    return this._isDestroyed();\n\t  },\n\n\t  //this is a noop method intended to be overridden by classes that extend from this base\n\t  initialize: function initialize() {},\n\n\t  destroy: function destroy() {\n\t    if (this._isDestroyed) {\n\t      return this;\n\t    }\n\n\t    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t      args[_key] = arguments[_key];\n\t    }\n\n\t    this.triggerMethod.apply(this, ['before:destroy'].concat(args));\n\n\t    // mark as destroyed before doing the actual destroy, to\n\t    // prevent infinite loops within \"destroy\" event handlers\n\t    this._isDestroyed = true;\n\t    this.triggerMethod.apply(this, ['destroy'].concat(args));\n\t    this.stopListening();\n\n\t    return this;\n\t  },\n\n\t  triggerMethod: triggerMethod\n\t});\n\n\tvar Region = MarionetteObject.extend({\n\t  cidPrefix: 'mnr',\n\t  replaceElement: false,\n\t  _isReplaced: false,\n\n\t  constructor: function constructor(options) {\n\t    this._setOptions(options);\n\t    this._initEl = this.el = this.getOption('el');\n\n\t    // Handle when this.el is passed in as a $ wrapped element.\n\t    this.el = this.el instanceof Backbone.$ ? this.el[0] : this.el;\n\n\t    if (!this.el) {\n\t      throw new MarionetteError({\n\t        name: 'NoElError',\n\t        message: 'An \"el\" must be specified for a region.'\n\t      });\n\t    }\n\n\t    this.$el = this.getEl(this.el);\n\t    MarionetteObject.call(this, options);\n\t  },\n\n\t  // Displays a backbone view instance inside of the region. Handles calling the `render`\n\t  // method for you. Reads content directly from the `el` attribute. The `preventDestroy`\n\t  // option can be used to prevent a view from the old view being destroyed on show.\n\t  show: function show(view, options) {\n\t    if (!this._ensureElement()) {\n\t      return;\n\t    }\n\t    this._ensureView(view);\n\t    if (view === this.currentView) {\n\t      return this;\n\t    }\n\n\t    this.triggerMethod('before:show', this, view, options);\n\n\t    MonitorViewEvents(view);\n\n\t    this.empty(options);\n\n\t    // We need to listen for if a view is destroyed in a way other than through the region.\n\t    // If this happens we need to remove the reference to the currentView since once a view\n\t    // has been destroyed we can not reuse it.\n\t    view.on('destroy', this.empty, this);\n\n\t    // Make this region the view's parent.\n\t    // It's important that this parent binding happens before rendering so that any events\n\t    // the child may trigger during render can also be triggered on the child's ancestor views.\n\t    view._parent = this;\n\n\t    this._renderView(view);\n\n\t    this._attachView(view, options);\n\n\t    this.triggerMethod('show', this, view, options);\n\t    return this;\n\t  },\n\n\t  _renderView: function _renderView(view) {\n\t    if (view._isRendered) {\n\t      return;\n\t    }\n\n\t    if (!view.supportsRenderLifecycle) {\n\t      triggerMethodOn(view, 'before:render', view);\n\t    }\n\n\t    view.render();\n\n\t    if (!view.supportsRenderLifecycle) {\n\t      view._isRendered = true;\n\t      triggerMethodOn(view, 'render', view);\n\t    }\n\t  },\n\n\t  _attachView: function _attachView(view) {\n\t    var shouldTriggerAttach = !view._isAttached && isNodeAttached(this.el);\n\t    var shouldReplaceEl = !!this.replaceElement;\n\n\t    if (shouldTriggerAttach) {\n\t      triggerMethodOn(view, 'before:attach', view);\n\t    }\n\n\t    this.attachHtml(view, shouldReplaceEl);\n\n\t    if (shouldTriggerAttach) {\n\t      view._isAttached = true;\n\t      triggerMethodOn(view, 'attach', view);\n\t    }\n\n\t    this.currentView = view;\n\t  },\n\n\t  _ensureElement: function _ensureElement() {\n\t    if (!_$1.isObject(this.el)) {\n\t      this.$el = this.getEl(this.el);\n\t      this.el = this.$el[0];\n\t    }\n\n\t    if (!this.$el || this.$el.length === 0) {\n\t      if (this.getOption('allowMissingEl')) {\n\t        return false;\n\t      } else {\n\t        throw new MarionetteError('An \"el\" ' + this.$el.selector + ' must exist in DOM');\n\t      }\n\t    }\n\t    return true;\n\t  },\n\n\t  _ensureView: function _ensureView(view) {\n\t    if (!view) {\n\t      throw new MarionetteError({\n\t        name: 'ViewNotValid',\n\t        message: 'The view passed is undefined and therefore invalid. You must pass a view instance to show.'\n\t      });\n\t    }\n\n\t    if (view._isDestroyed) {\n\t      throw new MarionetteError({\n\t        name: 'ViewDestroyedError',\n\t        message: 'View (cid: \"' + view.cid + '\") has already been destroyed and cannot be used.'\n\t      });\n\t    }\n\t  },\n\n\t  // Override this method to change how the region finds the DOM element that it manages. Return\n\t  // a jQuery selector object scoped to a provided parent el or the document if none exists.\n\t  getEl: function getEl(el) {\n\t    return Backbone.$(el, this.getValue(this.getOption('parentEl')));\n\t  },\n\n\t  _replaceEl: function _replaceEl(view) {\n\t    // always restore the el to ensure the regions el is present before replacing\n\t    this._restoreEl();\n\n\t    var parent = this.el.parentNode;\n\n\t    parent.replaceChild(view.el, this.el);\n\t    this._isReplaced = true;\n\t  },\n\n\t  // Restore the region's element in the DOM.\n\t  _restoreEl: function _restoreEl() {\n\t    if (!this.currentView) {\n\t      return;\n\t    }\n\n\t    var view = this.currentView;\n\t    var parent = view.el.parentNode;\n\n\t    if (!parent) {\n\t      return;\n\t    }\n\n\t    parent.replaceChild(this.el, view.el);\n\t    this._isReplaced = false;\n\t  },\n\n\t  isReplaced: function isReplaced() {\n\t    return !!this._isReplaced;\n\t  },\n\n\t  // Override this method to change how the new view is appended to the `$el` that the\n\t  // region is managing\n\t  attachHtml: function attachHtml(view, shouldReplace) {\n\t    if (shouldReplace) {\n\t      // replace the region's node with the view's node\n\t      this._replaceEl(view);\n\t    } else {\n\t      this.el.appendChild(view.el);\n\t    }\n\t  },\n\n\t  // Destroy the current view, if there is one. If there is no current view, it does\n\t  // nothing and returns immediately.\n\t  empty: function empty() {\n\t    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n\t    var preventDestroy = _ref.preventDestroy;\n\n\t    var shouldPreventDestroy = !!preventDestroy;\n\t    var view = this.currentView;\n\n\t    // If there is no view in the region we should not remove anything\n\t    if (!view) {\n\t      return this;\n\t    }\n\n\t    view.off('destroy', this.empty, this);\n\t    this.triggerMethod('before:empty', this, view);\n\n\t    if (this._isReplaced) {\n\t      this._restoreEl();\n\t    }\n\n\t    if (shouldPreventDestroy) {\n\t      this._detachView(view);\n\t    } else {\n\t      this._destroyView(view);\n\t    }\n\n\t    delete this.currentView._parent;\n\t    delete this.currentView;\n\n\t    this.triggerMethod('empty', this, view);\n\t    return this;\n\t  },\n\n\t  _detachView: function _detachView(view) {\n\t    var shouldTriggerDetach = !!view._isAttached;\n\n\t    if (shouldTriggerDetach) {\n\t      triggerMethodOn(view, 'before:detach', view);\n\t    }\n\n\t    this.$el.contents().detach();\n\n\t    if (shouldTriggerDetach) {\n\t      view._isAttached = false;\n\t      triggerMethodOn(view, 'detach', view);\n\t    }\n\t  },\n\n\t  // Call 'destroy' or 'remove', depending on which is found on the view (if showing a raw\n\t  // Backbone view or a Marionette View)\n\t  _destroyView: function _destroyView(view) {\n\t    if (view._isDestroyed) {\n\t      return;\n\t    }\n\n\t    if (!view.supportsDestroyLifecycle) {\n\t      triggerMethodOn(view, 'before:destroy', view);\n\t    }\n\t    if (view.destroy) {\n\t      view.destroy();\n\t    } else {\n\t      var shouldTriggerDetach = !!view._isAttached;\n\n\t      if (shouldTriggerDetach) {\n\t        triggerMethodOn(view, 'before:detach', view);\n\t      }\n\n\t      view.remove();\n\n\t      if (shouldTriggerDetach) {\n\t        view._isAttached = false;\n\t        triggerMethodOn(view, 'detach', view);\n\t      }\n\n\t      // appending _isDestroyed to raw Backbone View allows regions to throw a\n\t      // ViewDestroyedError for this view\n\t      view._isDestroyed = true;\n\t    }\n\n\t    if (!view.supportsDestroyLifecycle) {\n\t      triggerMethodOn(view, 'destroy', view);\n\t    }\n\t  },\n\n\t  // Checks whether a view is currently present within the region. Returns `true` if there is\n\t  // and `false` if no view is present.\n\t  hasView: function hasView() {\n\t    return !!this.currentView;\n\t  },\n\n\t  // Reset the region by destroying any existing view and clearing out the cached `$el`.\n\t  // The next time a view is shown via this region, the region will re-query the DOM for\n\t  // the region's `el`.\n\t  reset: function reset() {\n\t    this.empty();\n\n\t    if (this.$el) {\n\t      this.el = this._initEl;\n\t    }\n\n\t    delete this.$el;\n\t    return this;\n\t  },\n\n\t  destroy: function destroy() {\n\t    this.reset();\n\t    return MarionetteObject.prototype.destroy.apply(this, arguments);\n\t  }\n\t});\n\n\t// A container for a Marionette application.\n\tvar Application = MarionetteObject.extend({\n\t  cidPrefix: 'mna',\n\n\t  constructor: function constructor(options) {\n\t    this._setOptions(options);\n\n\t    this._initRegion();\n\n\t    MarionetteObject.prototype.constructor.apply(this, arguments);\n\t  },\n\n\t  regionClass: Region,\n\n\t  _initRegion: function _initRegion(options) {\n\t    var region = this.getOption('region');\n\t    var RegionClass = this.getOption('regionClass');\n\n\t    // if the region is a string expect an el or selector\n\t    // and instantiate a region\n\t    if (_$1.isString(region)) {\n\t      this._region = new RegionClass({\n\t        el: region\n\t      });\n\t      return;\n\t    }\n\n\t    this._region = region;\n\t  },\n\n\t  getRegion: function getRegion() {\n\t    return this._region;\n\t  },\n\n\t  showView: function showView(view) {\n\t    var region = this.getRegion();\n\n\t    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t      args[_key - 1] = arguments[_key];\n\t    }\n\n\t    return region.show.apply(region, [region].concat(args));\n\t  },\n\n\t  getView: function getView() {\n\t    return this.getRegion().currentView;\n\t  },\n\n\t  // kick off all of the application's processes.\n\t  start: function start(options) {\n\t    this.triggerMethod('before:start', options);\n\t    this.triggerMethod('start', options);\n\t  }\n\n\t});\n\n\tvar AppRouter = Backbone.Router.extend({\n\n\t  constructor: function constructor(options) {\n\t    this._setOptions(options);\n\n\t    Backbone.Router.apply(this, arguments);\n\n\t    var appRoutes = this.getOption('appRoutes');\n\t    var controller = this._getController();\n\t    this.processAppRoutes(controller, appRoutes);\n\t    this.on('route', this._processOnRoute, this);\n\t  },\n\n\t  // Similar to route method on a Backbone Router but\n\t  // method is called on the controller\n\t  appRoute: function appRoute(route, methodName) {\n\t    var controller = this._getController();\n\t    this._addAppRoute(controller, route, methodName);\n\t  },\n\n\t  // process the route event and trigger the onRoute\n\t  // method call, if it exists\n\t  _processOnRoute: function _processOnRoute(routeName, routeArgs) {\n\t    // make sure an onRoute before trying to call it\n\t    if (_$1.isFunction(this.onRoute)) {\n\t      // find the path that matches the current route\n\t      var routePath = _$1.invert(this.getOption('appRoutes'))[routeName];\n\t      this.onRoute(routeName, routePath, routeArgs);\n\t    }\n\t  },\n\n\t  // Internal method to process the `appRoutes` for the\n\t  // router, and turn them in to routes that trigger the\n\t  // specified method on the specified `controller`.\n\t  processAppRoutes: function processAppRoutes(controller, appRoutes) {\n\t    if (!appRoutes) {\n\t      return;\n\t    }\n\n\t    var routeNames = _$1.keys(appRoutes).reverse(); // Backbone requires reverted order of routes\n\n\t    _$1.each(routeNames, function (route) {\n\t      this._addAppRoute(controller, route, appRoutes[route]);\n\t    }, this);\n\t  },\n\n\t  _getController: function _getController() {\n\t    return this.getOption('controller');\n\t  },\n\n\t  _addAppRoute: function _addAppRoute(controller, route, methodName) {\n\t    var method = controller[methodName];\n\n\t    if (!method) {\n\t      throw new MarionetteError('Method \"' + methodName + '\" was not found on the controller');\n\t    }\n\n\t    this.route(route, methodName, _$1.bind(method, controller));\n\t  },\n\n\t  triggerMethod: triggerMethod\n\t});\n\n\t_$1.extend(AppRouter.prototype, CommonMixin);\n\n\t// Manage templates stored in `<script>` blocks,\n\t// caching them for faster access.\n\tvar TemplateCache = function TemplateCache(templateId) {\n\t  this.templateId = templateId;\n\t};\n\n\t// TemplateCache object-level methods. Manage the template\n\t// caches from these method calls instead of creating\n\t// your own TemplateCache instances\n\t_$1.extend(TemplateCache, {\n\t  templateCaches: {},\n\n\t  // Get the specified template by id. Either\n\t  // retrieves the cached version, or loads it\n\t  // from the DOM.\n\t  get: function get(templateId, options) {\n\t    var cachedTemplate = this.templateCaches[templateId];\n\n\t    if (!cachedTemplate) {\n\t      cachedTemplate = new TemplateCache(templateId);\n\t      this.templateCaches[templateId] = cachedTemplate;\n\t    }\n\n\t    return cachedTemplate.load(options);\n\t  },\n\n\t  // Clear templates from the cache. If no arguments\n\t  // are specified, clears all templates:\n\t  // `clear()`\n\t  //\n\t  // If arguments are specified, clears each of the\n\t  // specified templates from the cache:\n\t  // `clear(\"#t1\", \"#t2\", \"...\")`\n\t  clear: function clear() {\n\t    var i;\n\n\t    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t      args[_key] = arguments[_key];\n\t    }\n\n\t    var length = args.length;\n\n\t    if (length > 0) {\n\t      for (i = 0; i < length; i++) {\n\t        delete this.templateCaches[args[i]];\n\t      }\n\t    } else {\n\t      this.templateCaches = {};\n\t    }\n\t  }\n\t});\n\n\t// TemplateCache instance methods, allowing each\n\t// template cache object to manage its own state\n\t// and know whether or not it has been loaded\n\t_$1.extend(TemplateCache.prototype, {\n\n\t  // Internal method to load the template\n\t  load: function load(options) {\n\t    // Guard clause to prevent loading this template more than once\n\t    if (this.compiledTemplate) {\n\t      return this.compiledTemplate;\n\t    }\n\n\t    // Load the template and compile it\n\t    var template = this.loadTemplate(this.templateId, options);\n\t    this.compiledTemplate = this.compileTemplate(template, options);\n\n\t    return this.compiledTemplate;\n\t  },\n\n\t  // Load a template from the DOM, by default. Override\n\t  // this method to provide your own template retrieval\n\t  // For asynchronous loading with AMD/RequireJS, consider\n\t  // using a template-loader plugin as described here:\n\t  // https://github.com/marionettejs/backbone.marionette/wiki/Using-marionette-with-requirejs\n\t  loadTemplate: function loadTemplate(templateId, options) {\n\t    var $template = Backbone.$(templateId);\n\n\t    if (!$template.length) {\n\t      throw new MarionetteError({\n\t        name: 'NoTemplateError',\n\t        message: 'Could not find template: \"' + templateId + '\"'\n\t      });\n\t    }\n\t    return $template.html();\n\t  },\n\n\t  // Pre-compile the template before caching it. Override\n\t  // this method if you do not need to pre-compile a template\n\t  // (JST / RequireJS for example) or if you want to change\n\t  // the template engine used (Handebars, etc).\n\t  compileTemplate: function compileTemplate(rawTemplate, options) {\n\t    return _$1.template(rawTemplate, options);\n\t  }\n\t});\n\n\t// Render a template with data by passing in the template\n\t// selector and the data to render.\n\tvar Renderer = {\n\n\t  // Render a template with data. The `template` parameter is\n\t  // passed to the `TemplateCache` object to retrieve the\n\t  // template function. Override this method to provide your own\n\t  // custom rendering and template handling for all of Marionette.\n\t  render: function render(template, data) {\n\t    if (!template) {\n\t      throw new MarionetteError({\n\t        name: 'TemplateNotFoundError',\n\t        message: 'Cannot render the template since its false, null or undefined.'\n\t      });\n\t    }\n\n\t    var templateFunc = _$1.isFunction(template) ? template : TemplateCache.get(template);\n\n\t    return templateFunc(data);\n\t  }\n\t};\n\n\tvar RegionsMixin = {\n\t  regionClass: Region,\n\n\t  // Internal method to initialize the regions that have been defined in a\n\t  // `regions` attribute on this View.\n\t  _initRegions: function _initRegions() {\n\n\t    // init regions hash\n\t    this.regions = this.regions || {};\n\t    this._regions = {};\n\n\t    this.addRegions(this.getValue(this.getOption('regions')));\n\t  },\n\n\t  // Internal method to re-initialize all of the regions by updating\n\t  // the `el` that they point to\n\t  _reInitRegions: function _reInitRegions() {\n\t    _$1.invoke(this._regions, 'reset');\n\t  },\n\n\t  // Add a single region, by name, to the View\n\t  addRegion: function addRegion(name, definition) {\n\t    var regions = {};\n\t    regions[name] = definition;\n\t    return this.addRegions(regions)[name];\n\t  },\n\n\t  // Add multiple regions as a {name: definition, name2: def2} object literal\n\t  addRegions: function addRegions(regions) {\n\t    // If there's nothing to add, stop here.\n\t    if (_$1.isEmpty(regions)) {\n\t      return;\n\t    }\n\n\t    // Normalize region selectors hash to allow\n\t    // a user to use the @ui. syntax.\n\t    regions = this.normalizeUIValues(regions, ['selector', 'el']);\n\n\t    // Add the regions definitions to the regions property\n\t    this.regions = _$1.extend({}, this.regions, regions);\n\n\t    return this._addRegions(regions);\n\t  },\n\n\t  // internal method to build and add regions\n\t  _addRegions: function _addRegions(regionDefinitions) {\n\t    return _$1.reduce(regionDefinitions, function (regions, definition, name) {\n\t      regions[name] = this._buildRegion(definition);\n\t      this._addRegion(regions[name], name);\n\t      return regions;\n\t    }, {}, this);\n\t  },\n\n\t  // return the region instance from the definition\n\t  _buildRegion: function _buildRegion(definition) {\n\t    if (definition instanceof Region) {\n\t      return definition;\n\t    }\n\n\t    return this._buildRegionFromDefinition(definition);\n\t  },\n\n\t  _buildRegionFromDefinition: function _buildRegionFromDefinition(definition) {\n\t    if (_$1.isString(definition)) {\n\t      return this._buildRegionFromObject({ el: definition });\n\t    }\n\n\t    if (_$1.isFunction(definition)) {\n\t      return this._buildRegionFromRegionClass(definition);\n\t    }\n\n\t    if (_$1.isObject(definition)) {\n\t      return this._buildRegionFromObject(definition);\n\t    }\n\n\t    throw new MarionetteError({\n\t      message: 'Improper region configuration type.',\n\t      url: 'marionette.region.html#region-configuration-types'\n\t    });\n\t  },\n\n\t  _buildRegionFromObject: function _buildRegionFromObject(definition) {\n\t    var RegionClass = definition.regionClass || this.getOption('regionClass');\n\n\t    var options = _$1.omit(definition, 'regionClass');\n\n\t    _$1.defaults(options, {\n\t      el: definition.selector,\n\t      parentEl: _$1.partial(_$1.result, this, 'el')\n\t    });\n\n\t    return new RegionClass(options);\n\t  },\n\n\t  // Build the region directly from a given `RegionClass`\n\t  _buildRegionFromRegionClass: function _buildRegionFromRegionClass(RegionClass) {\n\t    return new RegionClass({\n\t      parentEl: _$1.partial(_$1.result, this, 'el')\n\t    });\n\t  },\n\n\t  _addRegion: function _addRegion(region, name) {\n\t    this.triggerMethod('before:add:region', name, region);\n\n\t    region._parent = this;\n\n\t    this._regions[name] = region;\n\n\t    this.triggerMethod('add:region', name, region);\n\t  },\n\n\t  // Remove a single region from the View, by name\n\t  removeRegion: function removeRegion(name) {\n\t    var region = this._regions[name];\n\n\t    this._removeRegion(region, name);\n\n\t    return region;\n\t  },\n\n\t  // Remove all regions from the View\n\t  removeRegions: function removeRegions() {\n\t    var regions = this.getRegions();\n\n\t    _$1.each(this._regions, this._removeRegion, this);\n\n\t    return regions;\n\t  },\n\n\t  _removeRegion: function _removeRegion(region, name) {\n\t    this.triggerMethod('before:remove:region', name, region);\n\n\t    region.empty();\n\t    region.stopListening();\n\n\t    delete this.regions[name];\n\t    delete this._regions[name];\n\n\t    this.triggerMethod('remove:region', name, region);\n\t  },\n\n\t  // Empty all regions in the region manager, but\n\t  // leave them attached\n\t  emptyRegions: function emptyRegions() {\n\t    var regions = this.getRegions();\n\t    _$1.invoke(regions, 'empty');\n\t    return regions;\n\t  },\n\n\t  // Checks to see if view contains region\n\t  // Accepts the region name\n\t  // hasRegion('main')\n\t  hasRegion: function hasRegion(name) {\n\t    return !!this.getRegion(name);\n\t  },\n\n\t  // Provides access to regions\n\t  // Accepts the region name\n\t  // getRegion('main')\n\t  getRegion: function getRegion(name) {\n\t    return this._regions[name];\n\t  },\n\n\t  // Get all regions\n\t  getRegions: function getRegions() {\n\t    return _$1.clone(this._regions);\n\t  },\n\n\t  showChildView: function showChildView(name, view) {\n\t    var region = this.getRegion(name);\n\n\t    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n\t      args[_key - 2] = arguments[_key];\n\t    }\n\n\t    return region.show.apply(region, [view].concat(args));\n\t  },\n\n\t  getChildView: function getChildView(name) {\n\t    return this.getRegion(name).currentView;\n\t  }\n\n\t};\n\n\t// allows for the use of the @ui. syntax within\n\t// a given key for triggers and events\n\t// swaps the @ui with the associated selector.\n\t// Returns a new, non-mutated, parsed events hash.\n\tvar _normalizeUIKeys = function _normalizeUIKeys(hash, ui) {\n\t  return _$1.reduce(hash, function (memo, val, key) {\n\t    var normalizedKey = normalizeUIString(key, ui);\n\t    memo[normalizedKey] = val;\n\t    return memo;\n\t  }, {});\n\t};\n\n\t// utility method for parsing @ui. syntax strings\n\t// into associated selector\n\tvar normalizeUIString = function normalizeUIString(uiString, ui) {\n\t  return uiString.replace(/@ui\\.[a-zA-Z_$0-9]*/g, function (r) {\n\t    return ui[r.slice(4)];\n\t  });\n\t};\n\n\t// allows for the use of the @ui. syntax within\n\t// a given value for regions\n\t// swaps the @ui with the associated selector\n\tvar _normalizeUIValues = function _normalizeUIValues(hash, ui, properties) {\n\t  _$1.each(hash, function (val, key) {\n\t    if (_$1.isString(val)) {\n\t      hash[key] = normalizeUIString(val, ui);\n\t    } else if (_$1.isObject(val) && _$1.isArray(properties)) {\n\t      _$1.extend(val, _normalizeUIValues(_$1.pick(val, properties), ui));\n\t      /* Value is an object, and we got an array of embedded property names to normalize. */\n\t      _$1.each(properties, function (property) {\n\t        var propertyVal = val[property];\n\t        if (_$1.isString(propertyVal)) {\n\t          val[property] = normalizeUIString(propertyVal, ui);\n\t        }\n\t      });\n\t    }\n\t  });\n\t  return hash;\n\t};\n\n\tvar UIMixin = {\n\n\t  // normalize the keys of passed hash with the views `ui` selectors.\n\t  // `{\"@ui.foo\": \"bar\"}`\n\t  normalizeUIKeys: function normalizeUIKeys(hash) {\n\t    var uiBindings = this._getUIBindings();\n\t    return _normalizeUIKeys(hash, uiBindings);\n\t  },\n\n\t  // normalize the values of passed hash with the views `ui` selectors.\n\t  // `{foo: \"@ui.bar\"}`\n\t  normalizeUIValues: function normalizeUIValues(hash, properties) {\n\t    var uiBindings = this._getUIBindings();\n\t    return _normalizeUIValues(hash, uiBindings, properties);\n\t  },\n\n\t  _getUIBindings: function _getUIBindings() {\n\t    var uiBindings = _$1.result(this, '_uiBindings');\n\t    var ui = _$1.result(this, 'ui');\n\t    return uiBindings || ui;\n\t  },\n\n\t  // This method binds the elements specified in the \"ui\" hash inside the view's code with\n\t  // the associated jQuery selectors.\n\t  _bindUIElements: function _bindUIElements() {\n\t    if (!this.ui) {\n\t      return;\n\t    }\n\n\t    // store the ui hash in _uiBindings so they can be reset later\n\t    // and so re-rendering the view will be able to find the bindings\n\t    if (!this._uiBindings) {\n\t      this._uiBindings = this.ui;\n\t    }\n\n\t    // get the bindings result, as a function or otherwise\n\t    var bindings = _$1.result(this, '_uiBindings');\n\n\t    // empty the ui so we don't have anything to start with\n\t    this._ui = {};\n\n\t    // bind each of the selectors\n\t    _$1.each(bindings, function (selector, key) {\n\t      this._ui[key] = this.$(selector);\n\t    }, this);\n\n\t    this.ui = this._ui;\n\t  },\n\n\t  _unbindUIElements: function _unbindUIElements() {\n\t    if (!this.ui || !this._uiBindings) {\n\t      return;\n\t    }\n\n\t    // delete all of the existing ui bindings\n\t    _$1.each(this.ui, function ($el, name) {\n\t      delete this.ui[name];\n\t    }, this);\n\n\t    // reset the ui element to the original bindings configuration\n\t    this.ui = this._uiBindings;\n\t    delete this._uiBindings;\n\t    delete this._ui;\n\t  },\n\n\t  _getUI: function _getUI(name) {\n\t    return this._ui[name];\n\t  }\n\t};\n\n\t// Borrow event splitter from Backbone\n\tvar delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\n\tfunction uniqueName(eventName, selector) {\n\t  return [eventName + _$1.uniqueId('.evt'), selector].join(' ');\n\t}\n\n\t// Set event name to be namespaced using a unique index\n\t// to generate a non colliding event namespace\n\t// http://api.jquery.com/event.namespace/\n\tvar getUniqueEventName = function getUniqueEventName(eventName) {\n\t  var match = eventName.match(delegateEventSplitter);\n\t  return uniqueName(match[1], match[2]);\n\t};\n\n\t// Internal method to create an event handler for a given `triggerDef` like\n\t// 'click:foo'\n\tfunction buildViewTrigger(view, triggerDef) {\n\t  if (_$1.isString(triggerDef)) {\n\t    triggerDef = { event: triggerDef };\n\t  }\n\n\t  var eventName = triggerDef.event;\n\t  var shouldPreventDefault = triggerDef.preventDefault !== false;\n\t  var shouldStopPropagation = triggerDef.stopPropagation !== false;\n\n\t  return function (e) {\n\t    if (shouldPreventDefault) {\n\t      e.preventDefault();\n\t    }\n\n\t    if (shouldStopPropagation) {\n\t      e.stopPropagation();\n\t    }\n\n\t    view.triggerMethod(eventName, view);\n\t  };\n\t}\n\n\tvar TriggersMixin = {\n\n\t  // Configure `triggers` to forward DOM events to view\n\t  // events. `triggers: {\"click .foo\": \"do:foo\"}`\n\t  _getViewTriggers: function _getViewTriggers(view, triggers) {\n\t    // Configure the triggers, prevent default\n\t    // action and stop propagation of DOM events\n\t    return _$1.reduce(triggers, function (events, value, key) {\n\t      key = getUniqueEventName(key);\n\t      events[key] = buildViewTrigger(view, value);\n\t      return events;\n\t    }, {}, this);\n\t  }\n\n\t};\n\n\tvar DelegateEntityEventsMixin = {\n\t  // Handle `modelEvents`, and `collectionEvents` configuration\n\t  _delegateEntityEvents: function _delegateEntityEvents(model, collection) {\n\t    this._undelegateEntityEvents(model, collection);\n\n\t    var modelEvents = this.getValue(this.getOption('modelEvents'));\n\t    bindEntityEvents.call(this, model, modelEvents);\n\n\t    var collectionEvents = this.getValue(this.getOption('collectionEvents'));\n\t    bindEntityEvents.call(this, collection, collectionEvents);\n\t  },\n\n\t  _undelegateEntityEvents: function _undelegateEntityEvents(model, collection) {\n\t    var modelEvents = this.getValue(this.getOption('modelEvents'));\n\t    unbindEntityEvents.call(this, model, modelEvents);\n\n\t    var collectionEvents = this.getValue(this.getOption('collectionEvents'));\n\t    unbindEntityEvents.call(this, collection, collectionEvents);\n\t  }\n\t};\n\n\t// Takes care of getting the behavior class\n\t// given options and a key.\n\t// If a user passes in options.behaviorClass\n\t// default to using that.\n\t// If a user passes in a Behavior Class directly, use that\n\t// Otherwise delegate the lookup to the users `behaviorsLookup` implementation.\n\tfunction getBehaviorClass(options, key) {\n\t  if (options.behaviorClass) {\n\t    return options.behaviorClass;\n\t    //treat functions as a Behavior constructor\n\t  } else if (_$1.isFunction(options)) {\n\t      return options;\n\t    }\n\n\t  // behaviorsLookup can be either a flat object or a method\n\t  return getValue(Marionette.Behaviors.behaviorsLookup, options, key)[key];\n\t}\n\n\t// Iterate over the behaviors object, for each behavior\n\t// instantiate it and get its grouped behaviors.\n\t// This accepts a list of behaviors in either an object or array form\n\tfunction parseBehaviors(view, behaviors) {\n\t  return _$1.chain(behaviors).map(function (options, key) {\n\t    var BehaviorClass = getBehaviorClass(options, key);\n\t    //if we're passed a class directly instead of an object\n\t    var _options = options === BehaviorClass ? {} : options;\n\t    var behavior = new BehaviorClass(_options, view);\n\t    var nestedBehaviors = parseBehaviors(view, _$1.result(behavior, 'behaviors'));\n\n\t    return [behavior].concat(nestedBehaviors);\n\t  }).flatten().value();\n\t}\n\n\tvar BehaviorsMixin = {\n\t  _initBehaviors: function _initBehaviors() {\n\t    var behaviors = this.getValue(this.getOption('behaviors'));\n\n\t    // Behaviors defined on a view can be a flat object literal\n\t    // or it can be a function that returns an object.\n\t    this._behaviors = _$1.isObject(behaviors) ? parseBehaviors(this, behaviors) : {};\n\t  },\n\n\t  _getBehaviorTriggers: function _getBehaviorTriggers() {\n\t    var triggers = _$1.invoke(this._behaviors, 'getTriggers');\n\t    return _$1.extend.apply(_$1, [{}].concat(babelHelpers.toConsumableArray(triggers)));\n\t  },\n\n\t  _getBehaviorEvents: function _getBehaviorEvents() {\n\t    var events = _$1.invoke(this._behaviors, 'getEvents');\n\t    return _$1.extend.apply(_$1, [{}].concat(babelHelpers.toConsumableArray(events)));\n\t  },\n\n\t  // proxy behavior $el to the view's $el.\n\t  _proxyBehaviorViewProperties: function _proxyBehaviorViewProperties() {\n\t    _$1.invoke(this._behaviors, 'proxyViewProperties');\n\t  },\n\n\t  // delegate modelEvents and collectionEvents\n\t  _delegateBehaviorEntityEvents: function _delegateBehaviorEntityEvents() {\n\t    _$1.invoke(this._behaviors, 'delegateEntityEvents');\n\t  },\n\n\t  // undelegate modelEvents and collectionEvents\n\t  _undelegateBehaviorEntityEvents: function _undelegateBehaviorEntityEvents() {\n\t    _$1.invoke(this._behaviors, 'undelegateEntityEvents');\n\t  },\n\n\t  _destroyBehaviors: function _destroyBehaviors(options) {\n\t    // Call destroy on each behavior after\n\t    // destroying the view.\n\t    // This unbinds event listeners\n\t    // that behaviors have registered for.\n\t    _$1.invoke(this._behaviors, 'destroy', options);\n\t  },\n\n\t  _bindBehaviorUIElements: function _bindBehaviorUIElements() {\n\t    _$1.invoke(this._behaviors, 'bindUIElements');\n\t  },\n\n\t  _unbindBehaviorUIElements: function _unbindBehaviorUIElements() {\n\t    _$1.invoke(this._behaviors, 'unbindUIElements');\n\t  },\n\n\t  _triggerEventOnBehaviors: function _triggerEventOnBehaviors() {\n\t    var behaviors = this._behaviors;\n\t    // Use good ol' for as this is a very hot function\n\n\t    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t      args[_key] = arguments[_key];\n\t    }\n\n\t    for (var i = 0, length = behaviors && behaviors.length; i < length; i++) {\n\t      triggerMethod.apply(behaviors[i], args);\n\t    }\n\t  }\n\t};\n\n\tvar ViewMixin = {\n\n\t  supportsRenderLifecycle: true,\n\t  supportsDestroyLifecycle: true,\n\n\t  _isDestroyed: false,\n\n\t  isDestroyed: function isDestroyed() {\n\t    return !!this._isDestroyed;\n\t  },\n\n\t  _isRendered: false,\n\n\t  isRendered: function isRendered() {\n\t    return !!this._isRendered;\n\t  },\n\n\t  _isAttached: false,\n\n\t  isAttached: function isAttached() {\n\t    return !!this._isAttached;\n\t  },\n\n\t  // Mix in template context methods. Looks for a\n\t  // `templateContext` attribute, which can either be an\n\t  // object literal, or a function that returns an object\n\t  // literal. All methods and attributes from this object\n\t  // are copies to the object passed in.\n\t  mixinTemplateContext: function mixinTemplateContext() {\n\t    var target = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n\t    var templateContext = this.getValue(this.getOption('templateContext'));\n\t    return _$1.extend(target, templateContext);\n\t  },\n\n\t  // Overriding Backbone.View's `delegateEvents` to handle\n\t  // `events` and `triggers`\n\t  delegateEvents: function delegateEvents(eventsArg) {\n\n\t    this._proxyBehaviorViewProperties();\n\t    this._buildEventProxies();\n\n\t    var viewEvents = this._getEvents(eventsArg);\n\n\t    if (typeof eventsArg === 'undefined') {\n\t      this.events = viewEvents;\n\t    }\n\n\t    var combinedEvents = _$1.extend({}, this._getBehaviorEvents(), viewEvents, this._getBehaviorTriggers(), this.getTriggers());\n\n\t    Backbone.View.prototype.delegateEvents.call(this, combinedEvents);\n\n\t    return this;\n\t  },\n\n\t  _getEvents: function _getEvents(eventsArg) {\n\t    var events = this.getValue(eventsArg || this.events);\n\n\t    return this.normalizeUIKeys(events);\n\t  },\n\n\t  // Configure `triggers` to forward DOM events to view\n\t  // events. `triggers: {\"click .foo\": \"do:foo\"}`\n\t  getTriggers: function getTriggers() {\n\t    if (!this.triggers) {\n\t      return;\n\t    }\n\n\t    // Allow `triggers` to be configured as a function\n\t    var triggers = this.normalizeUIKeys(_$1.result(this, 'triggers'));\n\n\t    // Configure the triggers, prevent default\n\t    // action and stop propagation of DOM events\n\t    return this._getViewTriggers(this, triggers);\n\t  },\n\n\t  // Handle `modelEvents`, and `collectionEvents` configuration\n\t  delegateEntityEvents: function delegateEntityEvents() {\n\t    var modelEvents = this.getValue(this.getOption('modelEvents'));\n\t    this.bindEntityEvents(this.model, modelEvents);\n\n\t    var collectionEvents = this.getValue(this.getOption('collectionEvents'));\n\t    this.bindEntityEvents(this.collection, collectionEvents);\n\n\t    // bind each behaviors model and collection events\n\t    this._delegateBehaviorEntityEvents();\n\n\t    return this;\n\t  },\n\n\t  // Handle unbinding `modelEvents`, and `collectionEvents` configuration\n\t  undelegateEntityEvents: function undelegateEntityEvents() {\n\t    var modelEvents = this.getValue(this.getOption('modelEvents'));\n\t    this.unbindEntityEvents(this.model, modelEvents);\n\n\t    var collectionEvents = this.getValue(this.getOption('collectionEvents'));\n\t    this.unbindEntityEvents(this.collection, collectionEvents);\n\n\t    // unbind each behaviors model and collection events\n\t    this._undelegateBehaviorEntityEvents();\n\n\t    return this;\n\t  },\n\n\t  // Internal helper method to verify whether the view hasn't been destroyed\n\t  _ensureViewIsIntact: function _ensureViewIsIntact() {\n\t    if (this._isDestroyed) {\n\t      throw new MarionetteError({\n\t        name: 'ViewDestroyedError',\n\t        message: 'View (cid: \"' + this.cid + '\") has already been destroyed and cannot be used.'\n\t      });\n\t    }\n\t  },\n\n\t  // Handle destroying the view and its children.\n\t  destroy: function destroy() {\n\t    if (this._isDestroyed) {\n\t      return this;\n\t    }\n\t    var shouldTriggerDetach = !!this._isAttached;\n\n\t    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t      args[_key] = arguments[_key];\n\t    }\n\n\t    this.triggerMethod.apply(this, ['before:destroy'].concat(args));\n\t    if (shouldTriggerDetach) {\n\t      this.triggerMethod('before:detach', this);\n\t    }\n\n\t    // unbind UI elements\n\t    this.unbindUIElements();\n\n\t    // remove the view from the DOM\n\t    // https://github.com/jashkenas/backbone/blob/1.2.3/backbone.js#L1235\n\t    this._removeElement();\n\n\t    if (shouldTriggerDetach) {\n\t      this._isAttached = false;\n\t      this.triggerMethod('detach', this);\n\t    }\n\n\t    // remove children after the remove to prevent extra paints\n\t    this._removeChildren();\n\n\t    this._destroyBehaviors(args);\n\n\t    this._isDestroyed = true;\n\t    this._isRendered = false;\n\t    this.triggerMethod.apply(this, ['destroy'].concat(args));\n\n\t    this.stopListening();\n\n\t    return this;\n\t  },\n\n\t  bindUIElements: function bindUIElements() {\n\t    this._bindUIElements();\n\t    this._bindBehaviorUIElements();\n\n\t    return this;\n\t  },\n\n\t  // This method unbinds the elements specified in the \"ui\" hash\n\t  unbindUIElements: function unbindUIElements() {\n\t    this._unbindUIElements();\n\t    this._unbindBehaviorUIElements();\n\n\t    return this;\n\t  },\n\n\t  getUI: function getUI(name) {\n\t    this._ensureViewIsIntact();\n\t    return this._getUI(name);\n\t  },\n\n\t  // used as the prefix for child view events\n\t  // that are forwarded through the layoutview\n\t  childViewEventPrefix: 'childview',\n\n\t  // import the `triggerMethod` to trigger events with corresponding\n\t  // methods if the method exists\n\t  triggerMethod: function triggerMethod$$() {\n\t    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n\t      args[_key2] = arguments[_key2];\n\t    }\n\n\t    var ret = triggerMethod.apply(this, args);\n\n\t    this._triggerEventOnBehaviors.apply(this, args);\n\t    this._triggerEventOnParentLayout.apply(this, args);\n\n\t    return ret;\n\t  },\n\n\t  // Cache `childViewEvents` and `childViewTriggers`\n\t  _buildEventProxies: function _buildEventProxies() {\n\t    this._childViewEvents = this.getValue(this.getOption('childViewEvents'));\n\t    this._childViewTriggers = this.getValue(this.getOption('childViewTriggers'));\n\t  },\n\n\t  _triggerEventOnParentLayout: function _triggerEventOnParentLayout(eventName) {\n\t    var layoutView = this._parentView();\n\t    if (!layoutView) {\n\t      return;\n\t    }\n\n\t    // invoke triggerMethod on parent view\n\t    var eventPrefix = layoutView.getOption('childViewEventPrefix');\n\t    var prefixedEventName = eventPrefix + ':' + eventName;\n\n\t    for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n\t      args[_key3 - 1] = arguments[_key3];\n\t    }\n\n\t    layoutView.triggerMethod.apply(layoutView, [prefixedEventName].concat(args));\n\n\t    // use the parent view's childViewEvents handler\n\t    var childViewEvents = layoutView.normalizeMethods(layoutView._childViewEvents);\n\n\t    if (!!childViewEvents && _$1.isFunction(childViewEvents[eventName])) {\n\t      childViewEvents[eventName].apply(layoutView, args);\n\t    }\n\n\t    // use the parent view's proxyEvent handlers\n\t    var childViewTriggers = layoutView._childViewTriggers;\n\n\t    // Call the event with the proxy name on the parent layout\n\t    if (childViewTriggers && _$1.isString(childViewTriggers[eventName])) {\n\t      layoutView.triggerMethod.apply(layoutView, [childViewTriggers[eventName]].concat(args));\n\t    }\n\t  },\n\n\t  // Walk the _parent tree until we find a view (if one exists).\n\t  // Returns the parent view hierarchically closest to this view.\n\t  _parentView: function _parentView() {\n\t    var parent = this._parent;\n\n\t    while (parent) {\n\t      if (parent instanceof View) {\n\t        return parent;\n\t      }\n\t      parent = parent._parent;\n\t    }\n\t  }\n\t};\n\n\t_$1.extend(ViewMixin, BehaviorsMixin, CommonMixin, DelegateEntityEventsMixin, TriggersMixin, UIMixin);\n\n\t// The standard view. Includes view events, automatic rendering\n\t// of Underscore templates, nested views, and more.\n\tvar View = Backbone.View.extend({\n\n\t  constructor: function constructor(options) {\n\t    this.render = _$1.bind(this.render, this);\n\n\t    this._setOptions(options);\n\n\t    MonitorViewEvents(this);\n\n\t    this._initBehaviors();\n\t    this._initRegions();\n\n\t    Backbone.View.prototype.constructor.call(this, this.options);\n\n\t    this.delegateEntityEvents();\n\t  },\n\n\t  // Serialize the view's model *or* collection, if\n\t  // it exists, for the template\n\t  serializeData: function serializeData() {\n\t    if (!this.model && !this.collection) {\n\t      return {};\n\t    }\n\n\t    // If we have a model, we serialize that\n\t    if (this.model) {\n\t      return this.serializeModel();\n\t    }\n\n\t    // Otherwise, we serialize the collection,\n\t    // making it available under the `items` property\n\t    return {\n\t      items: this.serializeCollection()\n\t    };\n\t  },\n\n\t  // Prepares the special `model` property of a view\n\t  // for being displayed in the template. By default\n\t  // we simply clone the attributes. Override this if\n\t  // you need a custom transformation for your view's model\n\t  serializeModel: function serializeModel() {\n\t    if (!this.model) {\n\t      return {};\n\t    }\n\t    return _$1.clone(this.model.attributes);\n\t  },\n\n\t  // Serialize a collection by cloning each of\n\t  // its model's attributes\n\t  serializeCollection: function serializeCollection() {\n\t    if (!this.collection) {\n\t      return {};\n\t    }\n\t    return this.collection.map(function (model) {\n\t      return _$1.clone(model.attributes);\n\t    });\n\t  },\n\n\t  // Render the view, defaulting to underscore.js templates.\n\t  // You can override this in your view definition to provide\n\t  // a very specific rendering for your view. In general, though,\n\t  // you should override the `Marionette.Renderer` object to\n\t  // change how Marionette renders views.\n\t  // Subsequent renders after the first will re-render all nested\n\t  // views.\n\t  render: function render() {\n\t    this._ensureViewIsIntact();\n\n\t    this.triggerMethod('before:render', this);\n\n\t    // If this is not the first render call, then we need to\n\t    // re-initialize the `el` for each region\n\t    if (this._isRendered) {\n\t      this._reInitRegions();\n\t    }\n\n\t    this._renderTemplate();\n\t    this.bindUIElements();\n\n\t    this._isRendered = true;\n\t    this.triggerMethod('render', this);\n\n\t    return this;\n\t  },\n\n\t  // Internal method to render the template with the serialized data\n\t  // and template context via the `Marionette.Renderer` object.\n\t  _renderTemplate: function _renderTemplate() {\n\t    var template = this.getTemplate();\n\n\t    // Allow template-less views\n\t    if (template === false) {\n\t      return;\n\t    }\n\n\t    // Add in entity data and template context\n\t    var data = this.mixinTemplateContext(this.serializeData());\n\n\t    // Render and add to el\n\t    var html = Renderer.render(template, data, this);\n\t    this.attachElContent(html);\n\t  },\n\n\t  // Get the template for this view\n\t  // instance. You can set a `template` attribute in the view\n\t  // definition or pass a `template: \"whatever\"` parameter in\n\t  // to the constructor options.\n\t  getTemplate: function getTemplate() {\n\t    return this.getOption('template');\n\t  },\n\n\t  // Attaches the content of a given view.\n\t  // This method can be overridden to optimize rendering,\n\t  // or to render in a non standard way.\n\t  //\n\t  // For example, using `innerHTML` instead of `$el.html`\n\t  //\n\t  // ```js\n\t  // attachElContent(html) {\n\t  //   this.el.innerHTML = html;\n\t  //   return this;\n\t  // }\n\t  // ```\n\t  attachElContent: function attachElContent(html) {\n\t    this.$el.html(html);\n\n\t    return this;\n\t  },\n\n\t  // called by ViewMixin destroy\n\t  _removeChildren: function _removeChildren() {\n\t    this.removeRegions();\n\t  },\n\n\t  _getImmediateChildren: function _getImmediateChildren() {\n\t    return _$1.chain(this.getRegions()).pluck('currentView').compact().value();\n\t  }\n\t});\n\n\t_$1.extend(View.prototype, ViewMixin, RegionsMixin);\n\n\t// A view that iterates over a Backbone.Collection\n\t// and renders an individual child view for each model.\n\tvar CollectionView = Backbone.View.extend({\n\n\t  // flag for maintaining the sorted order of the collection\n\t  sort: true,\n\n\t  // constructor\n\t  // option to pass `{sort: false}` to prevent the `CollectionView` from\n\t  // maintaining the sorted order of the collection.\n\t  // This will fallback onto appending childView's to the end.\n\t  //\n\t  // option to pass `{comparator: compFunction()}` to allow the `CollectionView`\n\t  // to use a custom sort order for the collection.\n\t  constructor: function constructor(options) {\n\t    this.render = _$1.bind(this.render, this);\n\n\t    this._setOptions(options);\n\n\t    MonitorViewEvents(this);\n\n\t    this._initBehaviors();\n\t    this.once('render', this._initialEvents);\n\t    this._initChildViewStorage();\n\t    this._bufferedChildren = [];\n\n\t    Backbone.View.prototype.constructor.call(this, this.options);\n\n\t    this.delegateEntityEvents();\n\t  },\n\n\t  // Instead of inserting elements one by one into the page, it's much more performant to insert\n\t  // elements into a document fragment and then insert that document fragment into the page\n\t  _startBuffering: function _startBuffering() {\n\t    this._isBuffering = true;\n\t  },\n\n\t  _endBuffering: function _endBuffering() {\n\t    var shouldTriggerAttach = !!this._isAttached;\n\n\t    this._isBuffering = false;\n\n\t    if (shouldTriggerAttach) {\n\t      _$1.each(this._getImmediateChildren(), function (child) {\n\t        triggerMethodOn(child, 'before:attach', child);\n\t      });\n\t    }\n\n\t    this.attachBuffer(this, this._createBuffer());\n\n\t    if (shouldTriggerAttach) {\n\t      _$1.each(this._getImmediateChildren(), function (child) {\n\t        child._isAttached = true;\n\t        triggerMethodOn(child, 'attach', child);\n\t      });\n\t    }\n\n\t    this._bufferedChildren = [];\n\t  },\n\n\t  // Configured the initial events that the collection view binds to.\n\t  _initialEvents: function _initialEvents() {\n\t    if (this.collection) {\n\t      this.listenTo(this.collection, 'add', this._onCollectionAdd);\n\t      this.listenTo(this.collection, 'remove', this._onCollectionRemove);\n\t      this.listenTo(this.collection, 'reset', this.render);\n\n\t      if (this.getOption('sort')) {\n\t        this.listenTo(this.collection, 'sort', this._sortViews);\n\t      }\n\t    }\n\t  },\n\n\t  // Handle a child added to the collection\n\t  _onCollectionAdd: function _onCollectionAdd(child, collection, opts) {\n\t    // `index` is present when adding with `at` since BB 1.2; indexOf fallback for < 1.2\n\t    var index = opts.at !== undefined && (opts.index || collection.indexOf(child));\n\n\t    // When filtered or when there is no initial index, calculate index.\n\t    if (this.getOption('filter') || index === false) {\n\t      index = _$1.indexOf(this._filteredSortedModels(index), child);\n\t    }\n\n\t    if (this._shouldAddChild(child, index)) {\n\t      this._destroyEmptyView();\n\t      var ChildView = this._getChildView(child);\n\t      this._addChild(child, ChildView, index);\n\t    }\n\t  },\n\n\t  // get the child view by model it holds, and remove it\n\t  _onCollectionRemove: function _onCollectionRemove(model) {\n\t    var view = this.children.findByModel(model);\n\t    this._removeChildView(view);\n\t    this._checkEmpty();\n\t  },\n\n\t  // Render children views. Override this method to provide your own implementation of a\n\t  // render function for the collection view.\n\t  render: function render() {\n\t    this._ensureViewIsIntact();\n\t    this.triggerMethod('before:render', this);\n\t    this._renderChildren();\n\t    this._isRendered = true;\n\t    this.triggerMethod('render', this);\n\t    return this;\n\t  },\n\n\t  // An efficient rendering used for filtering. Instead of modifying the whole DOM for the\n\t  // collection view, we are only adding or removing the related childrenViews.\n\t  setFilter: function setFilter(filter) {\n\t    var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n\t    var preventRender = _ref.preventRender;\n\n\t    var viewCanBeRendered = this._isRendered && !this._isDestroyed;\n\t    // The same filter or a `prevent` option won't render the filter.\n\t    // Nevertheless, a `prevent` option will modify the value.\n\t    if (!viewCanBeRendered || this.filter === filter) {\n\t      return;\n\t    }\n\t    if (!preventRender) {\n\t      this.triggerMethod('before:apply:filter', this);\n\t      var previousModels = this._filteredSortedModels();\n\t      this.filter = filter;\n\t      var models = this._filteredSortedModels();\n\t      this._applyModelDeltas(models, previousModels);\n\t      this.triggerMethod('apply:filter', this);\n\t    } else {\n\t      this.filter = filter;\n\t    }\n\t  },\n\n\t  // `removeFilter` is actually an alias for removing filters.\n\t  removeFilter: function removeFilter(options) {\n\t    this.setFilter(null, options);\n\t  },\n\n\t  // Calculate and apply difference by cid between `models` and `previousModels`.\n\t  _applyModelDeltas: function _applyModelDeltas(models, previousModels) {\n\t    var currentIds = {};\n\t    _$1.each(models, function (model, index) {\n\t      var addedChildNotExists = !this.children.findByModel(model);\n\t      if (addedChildNotExists) {\n\t        this._onCollectionAdd(model, this.collection, { at: index });\n\t      }\n\t      currentIds[model.cid] = true;\n\t    }, this);\n\t    _$1.each(previousModels, function (prevModel) {\n\t      var removedChildExists = !currentIds[prevModel.cid] && this.children.findByModel(prevModel);\n\t      if (removedChildExists) {\n\t        this._onCollectionRemove(prevModel);\n\t      }\n\t    }, this);\n\t  },\n\n\t  // Reorder DOM after sorting. When your element's rendering do not use their index,\n\t  // you can pass reorderOnSort: true to only reorder the DOM after a sort instead of\n\t  // rendering all the collectionView.\n\t  reorder: function reorder() {\n\t    var _this = this;\n\n\t    var children = this.children;\n\t    var models = this._filteredSortedModels();\n\t    var anyModelsAdded = _$1.some(models, function (model) {\n\t      return !children.findByModel(model);\n\t    });\n\n\t    // If there are any new models added due to filtering we need to add child views,\n\t    // so render as normal.\n\t    if (anyModelsAdded) {\n\t      this.render();\n\t    } else {\n\t      (function () {\n\t        // Get the DOM nodes in the same order as the models.\n\t        var elsToReorder = _$1.map(models, function (model, index) {\n\t          var view = children.findByModel(model);\n\t          view._index = index;\n\t          return view.el;\n\t        });\n\n\t        // Find the views that were children before but aren't in this new ordering.\n\t        var filteredOutViews = children.filter(function (view) {\n\t          return !_$1.contains(elsToReorder, view.el);\n\t        });\n\n\t        _this.triggerMethod('before:reorder', _this);\n\n\t        // Since append moves elements that are already in the DOM, appending the elements\n\t        // will effectively reorder them.\n\t        _this._appendReorderedChildren(elsToReorder);\n\n\t        // remove any views that have been filtered out\n\t        _$1.each(filteredOutViews, _this._removeChildView, _this);\n\t        _this._checkEmpty();\n\n\t        _this.triggerMethod('reorder', _this);\n\t      })();\n\t    }\n\t  },\n\n\t  // Render view after sorting. Override this method to change how the view renders\n\t  // after a `sort` on the collection.\n\t  resortView: function resortView() {\n\t    if (this.getOption('reorderOnSort')) {\n\t      this.reorder();\n\t    } else {\n\t      this._renderChildren();\n\t    }\n\t  },\n\n\t  // Internal method. This checks for any changes in the order of the collection.\n\t  // If the index of any view doesn't match, it will render.\n\t  _sortViews: function _sortViews() {\n\t    var models = this._filteredSortedModels();\n\n\t    // check for any changes in sort order of views\n\t    var orderChanged = _$1.find(models, function (item, index) {\n\t      var view = this.children.findByModel(item);\n\t      return !view || view._index !== index;\n\t    }, this);\n\n\t    if (orderChanged) {\n\t      this.resortView();\n\t    }\n\t  },\n\n\t  // Internal reference to what index a `emptyView` is.\n\t  _emptyViewIndex: -1,\n\n\t  // Internal method. Separated so that CompositeView can append to the childViewContainer\n\t  // if necessary\n\t  _appendReorderedChildren: function _appendReorderedChildren(children) {\n\t    this.$el.append(children);\n\t  },\n\n\t  // Internal method. Separated so that CompositeView can have more control over events\n\t  // being triggered, around the rendering process\n\t  _renderChildren: function _renderChildren() {\n\t    this._destroyEmptyView();\n\t    this._destroyChildren({ checkEmpty: false });\n\n\t    var models = this._filteredSortedModels();\n\t    if (this.isEmpty(this.collection, { processedModels: models })) {\n\t      this._showEmptyView();\n\t    } else {\n\t      this.triggerMethod('before:render:children', this);\n\t      this._startBuffering();\n\t      this._showCollection(models);\n\t      this._endBuffering();\n\t      this.triggerMethod('render:children', this);\n\t    }\n\t  },\n\n\t  // Internal method to loop through collection and show each child view.\n\t  _showCollection: function _showCollection(models) {\n\t    _$1.each(models, function (child, index) {\n\t      var ChildView = this._getChildView(child);\n\t      this._addChild(child, ChildView, index);\n\t    }, this);\n\t  },\n\n\t  // Allow the collection to be sorted by a custom view comparator\n\t  _filteredSortedModels: function _filteredSortedModels(addedAt) {\n\t    if (!this.collection) {\n\t      return [];\n\t    }\n\n\t    var viewComparator = this.getViewComparator();\n\t    var models = this.collection.models;\n\t    addedAt = Math.min(Math.max(addedAt, 0), models.length - 1);\n\n\t    if (viewComparator) {\n\t      var addedModel = undefined;\n\t      // Preserve `at` location, even for a sorted view\n\t      if (addedAt) {\n\t        addedModel = models[addedAt];\n\t        models = models.slice(0, addedAt).concat(models.slice(addedAt + 1));\n\t      }\n\t      models = this._sortModelsBy(models, viewComparator);\n\t      if (addedModel) {\n\t        models.splice(addedAt, 0, addedModel);\n\t      }\n\t    }\n\n\t    // Filter after sorting in case the filter uses the index\n\t    models = this._filterModels(models);\n\n\t    return models;\n\t  },\n\n\t  // Filter an array of models, if a filter exists\n\t  _filterModels: function _filterModels(models) {\n\t    if (this.getOption('filter')) {\n\t      models = _$1.filter(models, function (model, index) {\n\t        return this._shouldAddChild(model, index);\n\t      }, this);\n\t    }\n\t    return models;\n\t  },\n\n\t  _sortModelsBy: function _sortModelsBy(models, comparator) {\n\t    if (typeof comparator === 'string') {\n\t      return _$1.sortBy(models, function (model) {\n\t        return model.get(comparator);\n\t      }, this);\n\t    } else if (comparator.length === 1) {\n\t      return _$1.sortBy(models, comparator, this);\n\t    } else {\n\t      return models.sort(_$1.bind(comparator, this));\n\t    }\n\t  },\n\n\t  // Internal method to show an empty view in place of a collection of child views,\n\t  // when the collection is empty\n\t  _showEmptyView: function _showEmptyView() {\n\t    var EmptyView = this.getEmptyView();\n\n\t    if (EmptyView && !this._showingEmptyView) {\n\t      this._showingEmptyView = true;\n\n\t      var model = new Backbone.Model();\n\t      var emptyViewOptions = this.getOption('emptyViewOptions') || this.getOption('childViewOptions');\n\t      if (_$1.isFunction(emptyViewOptions)) {\n\t        emptyViewOptions = emptyViewOptions.call(this, model, this._emptyViewIndex);\n\t      }\n\n\t      var view = this._buildChildView(model, EmptyView, emptyViewOptions);\n\n\t      this.triggerMethod('before:render:empty', this, view);\n\t      this._addChildView(view, 0);\n\t      this.triggerMethod('render:empty', this, view);\n\n\t      view._parent = this;\n\t    }\n\t  },\n\n\t  // Internal method to destroy an existing emptyView instance if one exists. Called when\n\t  // a collection view has been rendered empty, and then a child is added to the collection.\n\t  _destroyEmptyView: function _destroyEmptyView() {\n\t    if (this._showingEmptyView) {\n\t      this.triggerMethod('before:remove:empty', this);\n\n\t      this._destroyChildren();\n\t      delete this._showingEmptyView;\n\n\t      this.triggerMethod('remove:empty', this);\n\t    }\n\t  },\n\n\t  // Retrieve the empty view class\n\t  getEmptyView: function getEmptyView() {\n\t    return this.getOption('emptyView');\n\t  },\n\n\t  // Retrieve the `childView` class, either from `this.options.childView` or from\n\t  // the `childView` in the object definition. The \"options\" takes precedence.\n\t  // The `childView` property can be either a view class or a function that\n\t  // returns a view class. If it is a function, it will receive the model that\n\t  // will be passed to the view instance (created from the returned view class)\n\t  _getChildView: function _getChildView(child) {\n\t    var childView = this.getOption('childView');\n\n\t    if (!childView) {\n\t      throw new MarionetteError({\n\t        name: 'NoChildViewError',\n\t        message: 'A \"childView\" must be specified'\n\t      });\n\t    }\n\n\t    // first check if the `childView` is a view class (the common case)\n\t    // then check if it's a function (which we assume that returns a view class)\n\t    if (childView.prototype instanceof Backbone.View || childView === Backbone.View) {\n\t      return childView;\n\t    } else if (_$1.isFunction(childView)) {\n\t      return childView.call(this, child);\n\t    } else {\n\t      throw new MarionetteError({\n\t        name: 'InvalidChildViewError',\n\t        message: '\"childView\" must be a view class or a function that returns a view class'\n\t      });\n\t    }\n\t  },\n\n\t  // Render the child's view and add it to the HTML for the collection view at a given index.\n\t  // This will also update the indices of later views in the collection in order to keep the\n\t  // children in sync with the collection.\n\t  _addChild: function _addChild(child, ChildView, index) {\n\t    var childViewOptions = this.getValue(this.getOption('childViewOptions'), child, index);\n\n\t    var view = this._buildChildView(child, ChildView, childViewOptions);\n\n\t    // increment indices of views after this one\n\t    this._updateIndices(view, true, index);\n\n\t    this.triggerMethod('before:add:child', this, view);\n\t    this._addChildView(view, index);\n\t    this.triggerMethod('add:child', this, view);\n\n\t    view._parent = this;\n\n\t    return view;\n\t  },\n\n\t  // Internal method. This decrements or increments the indices of views after the added/removed\n\t  // view to keep in sync with the collection.\n\t  _updateIndices: function _updateIndices(view, increment, index) {\n\t    if (!this.getOption('sort')) {\n\t      return;\n\t    }\n\n\t    if (increment) {\n\t      // assign the index to the view\n\t      view._index = index;\n\t    }\n\n\t    // update the indexes of views after this one\n\t    this.children.each(function (laterView) {\n\t      if (laterView._index >= view._index) {\n\t        laterView._index += increment ? 1 : -1;\n\t      }\n\t    });\n\t  },\n\n\t  // Internal Method. Add the view to children and render it at the given index.\n\t  _addChildView: function _addChildView(view, index) {\n\t    // Only trigger attach if already attached and not buffering,\n\t    // otherwise _endBuffering() or Region#show() handles this.\n\t    var shouldTriggerAttach = !this._isBuffering && this._isAttached;\n\n\t    // set up the child view event forwarding\n\t    this._proxyChildEvents(view);\n\n\t    // Store the child view itself so we can properly remove and/or destroy it later\n\t    this.children.add(view);\n\n\t    if (!view.supportsRenderLifecycle) {\n\t      triggerMethodOn(view, 'before:render', view);\n\t    }\n\n\t    // Render view\n\t    view.render();\n\n\t    if (!view.supportsRenderLifecycle) {\n\t      view._isRendered = true;\n\t      triggerMethodOn(view, 'render', view);\n\t    }\n\n\t    if (shouldTriggerAttach) {\n\t      triggerMethodOn(view, 'before:attach', view);\n\t    }\n\n\t    // Attach view\n\t    this.attachHtml(this, view, index);\n\n\t    if (shouldTriggerAttach) {\n\t      view._isAttached = true;\n\t      triggerMethodOn(view, 'attach', view);\n\t    }\n\t  },\n\n\t  // Build a `childView` for a model in the collection.\n\t  _buildChildView: function _buildChildView(child, ChildViewClass, childViewOptions) {\n\t    var options = _$1.extend({ model: child }, childViewOptions);\n\t    var childView = new ChildViewClass(options);\n\t    MonitorViewEvents(childView);\n\t    return childView;\n\t  },\n\n\t  // Remove the child view and destroy it. This function also updates the indices of later views\n\t  // in the collection in order to keep the children in sync with the collection.\n\t  _removeChildView: function _removeChildView(view) {\n\t    if (!view) {\n\t      return view;\n\t    }\n\n\t    this.triggerMethod('before:remove:child', this, view);\n\n\t    if (!view.supportsDestroyLifecycle) {\n\t      triggerMethodOn(view, 'before:destroy', view);\n\t    }\n\n\t    // call 'destroy' or 'remove', depending on which is found\n\t    if (view.destroy) {\n\t      view.destroy();\n\t    } else {\n\t      var shouldTriggerDetach = !!view._isAttached;\n\n\t      if (shouldTriggerDetach) {\n\t        triggerMethodOn(view, 'before:detach', view);\n\t      }\n\n\t      view.remove();\n\n\t      if (shouldTriggerDetach) {\n\t        view._isAttached = false;\n\t        triggerMethodOn(view, 'detach', view);\n\t      }\n\n\t      view._isDestroyed = true;\n\t    }\n\n\t    if (!view.supportsDestroyLifecycle) {\n\t      triggerMethodOn(view, 'destroy', view);\n\t    }\n\n\t    delete view._parent;\n\t    this.stopListening(view);\n\t    this.children.remove(view);\n\t    this.triggerMethod('remove:child', this, view);\n\n\t    // decrement the index of views after this one\n\t    this._updateIndices(view, false);\n\n\t    return view;\n\t  },\n\n\t  // check if the collection is empty or optionally whether an array of pre-processed models is empty\n\t  isEmpty: function isEmpty(collection, options) {\n\t    var models = undefined;\n\t    if (_$1.result(options, 'processedModels')) {\n\t      models = options.processedModels;\n\t    } else {\n\t      models = this.collection ? this.collection.models : [];\n\t      models = this._filterModels(models);\n\t    }\n\t    return models.length === 0;\n\t  },\n\n\t  // If empty, show the empty view\n\t  _checkEmpty: function _checkEmpty() {\n\t    if (this.isEmpty(this.collection)) {\n\t      this._showEmptyView();\n\t    }\n\t  },\n\n\t  // You might need to override this if you've overridden attachHtml\n\t  attachBuffer: function attachBuffer(collectionView, buffer) {\n\t    collectionView.$el.append(buffer);\n\t  },\n\n\t  // Create a fragment buffer from the currently buffered children\n\t  _createBuffer: function _createBuffer() {\n\t    var elBuffer = document.createDocumentFragment();\n\t    _$1.each(this._bufferedChildren, function (b) {\n\t      elBuffer.appendChild(b.el);\n\t    });\n\t    return elBuffer;\n\t  },\n\n\t  // Append the HTML to the collection's `el`. Override this method to do something other\n\t  // than `.append`.\n\t  attachHtml: function attachHtml(collectionView, childView, index) {\n\t    if (collectionView._isBuffering) {\n\t      // buffering happens on reset events and initial renders\n\t      // in order to reduce the number of inserts into the\n\t      // document, which are expensive.\n\t      collectionView._bufferedChildren.splice(index, 0, childView);\n\t    } else {\n\t      // If we've already rendered the main collection, append\n\t      // the new child into the correct order if we need to. Otherwise\n\t      // append to the end.\n\t      if (!collectionView._insertBefore(childView, index)) {\n\t        collectionView._insertAfter(childView);\n\t      }\n\t    }\n\t  },\n\n\t  // Internal method. Check whether we need to insert the view into the correct position.\n\t  _insertBefore: function _insertBefore(childView, index) {\n\t    var currentView = undefined;\n\t    var findPosition = this.getOption('sort') && index < this.children.length - 1;\n\t    if (findPosition) {\n\t      // Find the view after this one\n\t      currentView = this.children.find(function (view) {\n\t        return view._index === index + 1;\n\t      });\n\t    }\n\n\t    if (currentView) {\n\t      currentView.$el.before(childView.el);\n\t      return true;\n\t    }\n\n\t    return false;\n\t  },\n\n\t  // Internal method. Append a view to the end of the $el\n\t  _insertAfter: function _insertAfter(childView) {\n\t    this.$el.append(childView.el);\n\t  },\n\n\t  // Internal method to set up the `children` object for storing all of the child views\n\t  _initChildViewStorage: function _initChildViewStorage() {\n\t    this.children = new ChildViewContainer();\n\t  },\n\n\t  // called by ViewMixin destroy\n\t  _removeChildren: function _removeChildren() {\n\t    this._destroyChildren({ checkEmpty: false });\n\t  },\n\n\t  // Destroy the child views that this collection view is holding on to, if any\n\t  _destroyChildren: function _destroyChildren() {\n\t    var _ref2 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n\t    var checkEmpty = _ref2.checkEmpty;\n\n\t    this.triggerMethod('before:destroy:children', this);\n\t    var shouldCheckEmpty = checkEmpty !== false;\n\t    var childViews = this.children.map(_$1.identity);\n\n\t    this.children.each(this._removeChildView, this);\n\n\t    if (shouldCheckEmpty) {\n\t      this._checkEmpty();\n\t    }\n\n\t    this.triggerMethod('destroy:children', this);\n\t    return childViews;\n\t  },\n\n\t  // Return true if the given child should be shown. Return false otherwise.\n\t  // The filter will be passed (child, index, collection), where\n\t  //  'child' is the given model\n\t  //  'index' is the index of that model in the collection\n\t  //  'collection' is the collection referenced by this CollectionView\n\t  _shouldAddChild: function _shouldAddChild(child, index) {\n\t    var filter = this.getOption('filter');\n\t    return !_$1.isFunction(filter) || filter.call(this, child, index, this.collection);\n\t  },\n\n\t  // Set up the child view event forwarding. Uses a \"childview:\" prefix in front of all forwarded events.\n\t  _proxyChildEvents: function _proxyChildEvents(view) {\n\t    var prefix = this.getOption('childViewEventPrefix');\n\n\t    // Forward all child view events through the parent,\n\t    // prepending \"childview:\" to the event name\n\t    this.listenTo(view, 'all', function (eventName) {\n\n\t      var childEventName = prefix + ':' + eventName;\n\n\t      var childViewEvents = this.normalizeMethods(this._childViewEvents);\n\n\t      // call collectionView childViewEvent if defined\n\n\t      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t        args[_key - 1] = arguments[_key];\n\t      }\n\n\t      if (typeof childViewEvents !== 'undefined' && _$1.isFunction(childViewEvents[eventName])) {\n\t        childViewEvents[eventName].apply(this, args);\n\t      }\n\n\t      // use the parent view's proxyEvent handlers\n\t      var childViewTriggers = this._childViewTriggers;\n\n\t      // Call the event with the proxy name on the parent layout\n\t      if (childViewTriggers && _$1.isString(childViewTriggers[eventName])) {\n\t        this.triggerMethod.apply(this, [childViewTriggers[eventName]].concat(args));\n\t      }\n\n\t      this.triggerMethod.apply(this, [childEventName].concat(args));\n\t    });\n\t  },\n\n\t  _getImmediateChildren: function _getImmediateChildren() {\n\t    return _$1.values(this.children._views);\n\t  },\n\n\t  getViewComparator: function getViewComparator() {\n\t    return this.getOption('viewComparator');\n\t  }\n\t});\n\n\t_$1.extend(CollectionView.prototype, ViewMixin);\n\n\t// Used for rendering a branch-leaf, hierarchical structure.\n\t// Extends directly from CollectionView and also renders an\n\t// a child view as `modelView`, for the top leaf\n\tvar CompositeView = CollectionView.extend({\n\n\t  // Setting up the inheritance chain which allows changes to\n\t  // Marionette.CollectionView.prototype.constructor which allows overriding\n\t  // option to pass '{sort: false}' to prevent the CompositeView from\n\t  // maintaining the sorted order of the collection.\n\t  // This will fallback onto appending childView's to the end.\n\t  constructor: function constructor() {\n\t    deprecate('CompositeView is deprecated. Convert to View at your earliest convenience');\n\t    CollectionView.prototype.constructor.apply(this, arguments);\n\t  },\n\n\t  // Configured the initial events that the composite view\n\t  // binds to. Override this method to prevent the initial\n\t  // events, or to add your own initial events.\n\t  _initialEvents: function _initialEvents() {\n\n\t    // Bind only after composite view is rendered to avoid adding child views\n\t    // to nonexistent childViewContainer\n\n\t    if (this.collection) {\n\t      this.listenTo(this.collection, 'add', this._onCollectionAdd);\n\t      this.listenTo(this.collection, 'remove', this._onCollectionRemove);\n\t      this.listenTo(this.collection, 'reset', this.renderChildren);\n\n\t      if (this.getOption('sort')) {\n\t        this.listenTo(this.collection, 'sort', this._sortViews);\n\t      }\n\t    }\n\t  },\n\n\t  // Retrieve the `childView` to be used when rendering each of\n\t  // the items in the collection. The default is to return\n\t  // `this.childView` or Marionette.CompositeView if no `childView`\n\t  // has been defined. As happens in CollectionView, `childView` can\n\t  // be a function (which should return a view class).\n\t  _getChildView: function _getChildView(child) {\n\t    var childView = this.getOption('childView');\n\n\t    // for CompositeView, if `childView` is not specified, we'll get the same\n\t    // composite view class rendered for each child in the collection\n\t    // then check if the `childView` is a view class (the common case)\n\t    // finally check if it's a function (which we assume that returns a view class)\n\t    if (!childView) {\n\t      return this.constructor;\n\t    } else if (childView.prototype instanceof Backbone.View || childView === Backbone.View) {\n\t      return childView;\n\t    } else if (_$1.isFunction(childView)) {\n\t      return childView.call(this, child);\n\t    } else {\n\t      throw new MarionetteError({\n\t        name: 'InvalidChildViewError',\n\t        message: '\"childView\" must be a view class or a function that returns a view class'\n\t      });\n\t    }\n\t  },\n\n\t  // Return the serialized model\n\t  serializeData: function serializeData() {\n\t    return this.serializeModel();\n\t  },\n\n\t  // Renders the model and the collection.\n\t  render: function render() {\n\t    this._ensureViewIsIntact();\n\t    this._isRendering = true;\n\t    this.resetChildViewContainer();\n\n\t    this.triggerMethod('before:render', this);\n\n\t    this._renderTemplate();\n\t    this.bindUIElements();\n\t    this.renderChildren();\n\n\t    this._isRendering = false;\n\t    this._isRendered = true;\n\t    this.triggerMethod('render', this);\n\t    return this;\n\t  },\n\n\t  renderChildren: function renderChildren() {\n\t    if (this._isRendered || this._isRendering) {\n\t      CollectionView.prototype._renderChildren.call(this);\n\t    }\n\t  },\n\n\t  // You might need to override this if you've overridden attachHtml\n\t  attachBuffer: function attachBuffer(compositeView, buffer) {\n\t    var $container = this.getChildViewContainer(compositeView);\n\t    $container.append(buffer);\n\t  },\n\n\t  // Internal method. Append a view to the end of the $el.\n\t  // Overidden from CollectionView to ensure view is appended to\n\t  // childViewContainer\n\t  _insertAfter: function _insertAfter(childView) {\n\t    var $container = this.getChildViewContainer(this, childView);\n\t    $container.append(childView.el);\n\t  },\n\n\t  // Internal method. Append reordered childView'.\n\t  // Overidden from CollectionView to ensure reordered views\n\t  // are appended to childViewContainer\n\t  _appendReorderedChildren: function _appendReorderedChildren(children) {\n\t    var $container = this.getChildViewContainer(this);\n\t    $container.append(children);\n\t  },\n\n\t  // Internal method to ensure an `$childViewContainer` exists, for the\n\t  // `attachHtml` method to use.\n\t  getChildViewContainer: function getChildViewContainer(containerView, childView) {\n\t    if (!!containerView.$childViewContainer) {\n\t      return containerView.$childViewContainer;\n\t    }\n\n\t    var container;\n\t    var childViewContainer = getOption.call(containerView, 'childViewContainer');\n\t    if (childViewContainer) {\n\n\t      var selector = getValue.call(containerView, childViewContainer);\n\n\t      if (selector.charAt(0) === '@' && containerView.ui) {\n\t        container = containerView.ui[selector.substr(4)];\n\t      } else {\n\t        container = containerView.$(selector);\n\t      }\n\n\t      if (container.length <= 0) {\n\t        throw new MarionetteError({\n\t          name: 'ChildViewContainerMissingError',\n\t          message: 'The specified \"childViewContainer\" was not found: ' + containerView.childViewContainer\n\t        });\n\t      }\n\t    } else {\n\t      container = containerView.$el;\n\t    }\n\n\t    containerView.$childViewContainer = container;\n\t    return container;\n\t  },\n\n\t  // Internal method to reset the `$childViewContainer` on render\n\t  resetChildViewContainer: function resetChildViewContainer() {\n\t    if (this.$childViewContainer) {\n\t      this.$childViewContainer = undefined;\n\t    }\n\t  }\n\t});\n\n\t// To prevent duplication but allow the best View organization\n\t// Certain View methods are mixed directly into the deprecated CompositeView\n\tvar MixinFromView = _$1.pick(View.prototype, 'serializeModel', 'getTemplate', '_renderTemplate', 'attachElContent');\n\t_$1.extend(CompositeView.prototype, MixinFromView);\n\n\tvar Behavior = MarionetteObject.extend({\n\t  cidPrefix: 'mnb',\n\n\t  constructor: function constructor(options, view) {\n\t    // Setup reference to the view.\n\t    // this comes in handle when a behavior\n\t    // wants to directly talk up the chain\n\t    // to the view.\n\t    this.view = view;\n\t    this.defaults = _$1.clone(_$1.result(this, 'defaults', {}));\n\t    this._setOptions(this.defaults, options);\n\t    // Construct an internal UI hash using\n\t    // the behaviors UI hash and then the view UI hash.\n\t    // This allows the user to use UI hash elements\n\t    // defined in the parent view as well as those\n\t    // defined in the given behavior.\n\t    // This order will help the reuse and share of a behavior\n\t    // between multiple views, while letting a view override a\n\t    // selector under an UI key.\n\t    this.ui = _$1.extend({}, _$1.result(this, 'ui'), _$1.result(view, 'ui'));\n\n\t    MarionetteObject.apply(this, arguments);\n\t  },\n\n\t  // proxy behavior $ method to the view\n\t  // this is useful for doing jquery DOM lookups\n\t  // scoped to behaviors view.\n\t  $: function $() {\n\t    return this.view.$.apply(this.view, arguments);\n\t  },\n\n\t  // Stops the behavior from listening to events.\n\t  // Overrides Object#destroy to prevent additional events from being triggered.\n\t  destroy: function destroy() {\n\t    this.stopListening();\n\n\t    return this;\n\t  },\n\n\t  proxyViewProperties: function proxyViewProperties() {\n\t    this.$el = this.view.$el;\n\t    this.el = this.view.el;\n\n\t    return this;\n\t  },\n\n\t  bindUIElements: function bindUIElements() {\n\t    this._bindUIElements();\n\n\t    return this;\n\t  },\n\n\t  unbindUIElements: function unbindUIElements() {\n\t    this._unbindUIElements();\n\n\t    return this;\n\t  },\n\n\t  getUI: function getUI(name) {\n\t    this.view._ensureViewIsIntact();\n\t    return this._getUI(name);\n\t  },\n\n\t  // Handle `modelEvents`, and `collectionEvents` configuration\n\t  delegateEntityEvents: function delegateEntityEvents() {\n\t    this._delegateEntityEvents(this.view.model, this.view.collection);\n\n\t    return this;\n\t  },\n\n\t  undelegateEntityEvents: function undelegateEntityEvents() {\n\t    this._undelegateEntityEvents(this.view.model, this.view.collection);\n\n\t    return this;\n\t  },\n\n\t  getEvents: function getEvents() {\n\t    // Normalize behavior events hash to allow\n\t    // a user to use the @ui. syntax.\n\t    var behaviorEvents = this.normalizeUIKeys(_$1.result(this, 'events'));\n\n\t    // binds the handler to the behavior and builds a unique eventName\n\t    return _$1.reduce(behaviorEvents, function (events, behaviorHandler, key) {\n\t      if (!_$1.isFunction(behaviorHandler)) {\n\t        behaviorHandler = this[behaviorHandler];\n\t      }\n\t      if (!behaviorHandler) {\n\t        return;\n\t      }\n\t      key = getUniqueEventName(key);\n\t      events[key] = _$1.bind(behaviorHandler, this);\n\t      return events;\n\t    }, {}, this);\n\t  },\n\n\t  // Internal method to build all trigger handlers for a given behavior\n\t  getTriggers: function getTriggers() {\n\t    if (!this.triggers) {\n\t      return;\n\t    }\n\n\t    // Normalize behavior triggers hash to allow\n\t    // a user to use the @ui. syntax.\n\t    var behaviorTriggers = this.normalizeUIKeys(_$1.result(this, 'triggers'));\n\n\t    return this._getViewTriggers(this.view, behaviorTriggers);\n\t  }\n\n\t});\n\n\t_$1.extend(Behavior.prototype, DelegateEntityEventsMixin, TriggersMixin, UIMixin);\n\n\tvar previousMarionette = Backbone.Marionette;\n\tvar Marionette = Backbone.Marionette = {};\n\n\t// This allows you to run multiple instances of Marionette on the same\n\t// webapp. After loading the new version, call `noConflict()` to\n\t// get a reference to it. At the same time the old version will be\n\t// returned to Backbone.Marionette.\n\tMarionette.noConflict = function () {\n\t  Backbone.Marionette = previousMarionette;\n\t  return this;\n\t};\n\n\t// Utilities\n\tMarionette.bindEntityEvents = proxy(bindEntityEvents);\n\tMarionette.unbindEntityEvents = proxy(unbindEntityEvents);\n\tMarionette.bindRadioEvents = proxy(bindEntityEvents);\n\tMarionette.unbindRadioEvents = proxy(unbindEntityEvents);\n\tMarionette.bindRadioRequests = proxy(bindRadioRequests);\n\tMarionette.unbindRadioRequests = proxy(unbindRadioRequests);\n\tMarionette.mergeOptions = proxy(mergeOptions);\n\tMarionette.getOption = proxy(getOption);\n\tMarionette.normalizeMethods = proxy(normalizeMethods);\n\tMarionette.extend = extend;\n\tMarionette.isNodeAttached = isNodeAttached;\n\tMarionette.deprecate = deprecate;\n\tMarionette.triggerMethod = proxy(triggerMethod);\n\tMarionette.triggerMethodOn = triggerMethodOn;\n\tMarionette.triggerMethodMany = triggerMethodMany;\n\tMarionette.isEnabled = isEnabled;\n\tMarionette.setEnabled = setEnabled;\n\tMarionette.MonitorViewEvents = MonitorViewEvents;\n\n\tMarionette.Behaviors = {};\n\tMarionette.Behaviors.behaviorsLookup = behaviorsLookup;\n\n\t// Classes\n\tMarionette.Application = Application;\n\tMarionette.AppRouter = AppRouter;\n\tMarionette.Renderer = Renderer;\n\tMarionette.TemplateCache = TemplateCache;\n\tMarionette.View = View;\n\tMarionette.CollectionView = CollectionView;\n\tMarionette.CompositeView = CompositeView;\n\tMarionette.Behavior = Behavior;\n\tMarionette.Region = Region;\n\tMarionette.Error = MarionetteError;\n\tMarionette.Object = MarionetteObject;\n\n\t// Configuration\n\tMarionette.DEV_MODE = false;\n\tMarionette.FEATURES = FEATURES;\n\tMarionette.VERSION = version;\n\n\treturn Marionette;\n\n}));\n\n//# sourceMappingURL=backbone.marionette.js.map\n","// Bind Entity Events & Unbind Entity Events\n// -----------------------------------------\n//\n// These methods are used to bind/unbind a backbone \"entity\" (e.g. collection/model)\n// to methods on a target object.\n//\n// The first parameter, `target`, must have the Backbone.Events module mixed in.\n//\n// The second parameter is the `entity` (Backbone.Model, Backbone.Collection or\n// any object that has Backbone.Events mixed in) to bind the events from.\n//\n// The third parameter is a hash of { \"event:name\": \"eventHandler\" }\n// configuration. Multiple handlers can be separated by a space. A\n// function can be supplied instead of a string handler name.\n\nimport _               from 'underscore';\nimport MarionetteError from './error';\n\n// Bind/unbind the event to handlers specified as a string of\n// handler names on the target object\nfunction bindFromStrings(target, entity, evt, methods, actionName) {\n  var methodNames = methods.split(/\\s+/);\n\n  _.each(methodNames, function(methodName) {\n    var method = target[methodName];\n    if (!method) {\n      throw new MarionetteError(`Method \"${methodName}\" was configured as an event handler, but does not exist.`);\n    }\n\n    target[actionName](entity, evt, method);\n  });\n}\n\n// generic looping function\nfunction iterateEvents(target, entity, bindings, actionName) {\n  if (!entity || !bindings) { return; }\n\n  // type-check bindings\n  if (!_.isObject(bindings)) {\n    throw new MarionetteError({\n      message: 'Bindings must be an object.',\n      url: 'marionette.functions.html#marionettebindentityevents'\n    });\n  }\n\n  // iterate the bindings and bind/unbind them\n  _.each(bindings, function(method, evt) {\n\n    // allow for a list of method names as a string\n    if (_.isString(method)) {\n      bindFromStrings(target, entity, evt, method, actionName);\n      return;\n    }\n\n    target[actionName](entity, evt, method);\n  });\n}\n\nfunction bindEntityEvents(entity, bindings) {\n  iterateEvents(this, entity, bindings, 'listenTo');\n}\n\nfunction unbindEntityEvents(entity, bindings) {\n  iterateEvents(this, entity, bindings, 'stopListening');\n}\n\n// Export Public API\nexport {\n  bindEntityEvents,\n  unbindEntityEvents\n};\n","// Bind/Unbind Radio Requests\n// -----------------------------------------\n//\n// These methods are used to bind/unbind a backbone.radio request\n// to methods on a target object.\n//\n// The first parameter, `target`, will set the context of the reply method\n//\n// The second parameter is the `Radio.channel` to bind the reply to.\n//\n// The third parameter is a hash of { \"request:name\": \"replyHandler\" }\n// configuration. A function can be supplied instead of a string handler name.\n\nimport _ from 'underscore';\nimport normalizeMethods from './utils/normalizeMethods';\nimport MarionetteError from './error';\n\nfunction iterateReplies(target, channel, bindings, actionName) {\n  if (!channel || !bindings) { return; }\n\n  // type-check bindings\n  if (!_.isObject(bindings)) {\n    throw new MarionetteError({\n      message: 'Bindings must be an object.',\n      url: 'marionette.functions.html#marionettebindradiorequests'\n    });\n  }\n\n  var normalizedRadioRequests = normalizeMethods.call(target, bindings);\n\n  channel[actionName](normalizedRadioRequests, target);\n}\n\nfunction bindRadioRequests(channel, bindings) {\n  iterateReplies(this, channel, bindings, 'reply');\n}\n\nfunction unbindRadioRequests(channel, bindings) {\n  iterateReplies(this, channel, bindings, 'stopReplying');\n}\n\nexport {\n  bindRadioRequests,\n  unbindRadioRequests\n};\n","/* jshint maxstatements: 14, maxcomplexity: 7 */\n\n// Trigger Method\n// --------------\n\nimport _         from 'underscore';\nimport getOption from './utils/getOption';\n\n// split the event name on the \":\"\nvar splitter = /(^|:)(\\w)/gi;\n\n// take the event section (\"section1:section2:section3\")\n// and turn it in to uppercase name onSection1Section2Section3\nfunction getEventName(match, prefix, eventName) {\n  return eventName.toUpperCase();\n}\n\n// Trigger an event and/or a corresponding method name. Examples:\n//\n// `this.triggerMethod(\"foo\")` will trigger the \"foo\" event and\n// call the \"onFoo\" method.\n//\n// `this.triggerMethod(\"foo:bar\")` will trigger the \"foo:bar\" event and\n// call the \"onFooBar\" method.\nexport function triggerMethod(event, ...args) {\n  // get the method name from the event name\n  var methodName = 'on' + event.replace(splitter, getEventName);\n  var method = getOption.call(this, methodName);\n  var result;\n\n  // call the onMethodName if it exists\n  if (_.isFunction(method)) {\n    // pass all args, except the event name\n    result = method.apply(this, args);\n  }\n\n  // trigger the event\n  this.trigger(event, ...args);\n\n  return result;\n}\n\n// triggerMethodOn invokes triggerMethod on a specific context\n//\n// e.g. `Marionette.triggerMethodOn(view, 'show')`\n// will trigger a \"show\" event or invoke onShow the view.\nexport function triggerMethodOn(context, ...args) {\n  var fnc = _.isFunction(context.triggerMethod) ? context.triggerMethod : triggerMethod;\n  return fnc.apply(context, args);\n}\n\n// triggerMethodMany invokes triggerMethod on many targets from a source\n// it's useful for standardizing a pattern where we propagate an event from a source\n// to many targets.\n//\n// For each target we want to follow the pattern\n// target.triggerMethod(event, target, ...args)\n// e.g childview.triggerMethod('attach', childView, ...args)\nexport function triggerMethodMany(targets, eventName, ...args) {\n  _.each(targets, function(target) {\n    triggerMethodOn(target, eventName, target, ...args);\n  });\n}\n","// Add Feature flags here\n// e.g. 'class' => false\nvar FEATURES = {\n};\n\nfunction isEnabled(name) {\n  return !!FEATURES[name];\n}\n\nfunction setEnabled(name, state) {\n  return FEATURES[name] = state;\n}\n\nexport {\n  FEATURES,\n  setEnabled,\n  isEnabled\n};\n","// DOM Refresh\n// -----------\n\nimport { triggerMethodOn } from './trigger-method';\n\n// Trigger method on children unless a pure Backbone.View\nfunction triggerMethodChildren(view, event, beforeEachTrigger) {\n  if (!view._getImmediateChildren) { return; }\n  _.each(view._getImmediateChildren(), child => {\n    if (beforeEachTrigger) {\n      beforeEachTrigger(child);\n    }\n    triggerMethodOn(child, event, child);\n  });\n}\n\nfunction setIsAttached(view) {\n  view._isAttached = true;\n}\n\nfunction unsetIsAttached(view) {\n  view._isAttached = false;\n}\n\n// Monitor a view's state, propagating attach/detach events to children and firing dom:refresh\n// whenever a rendered view is attached or an attached view is rendered.\nfunction MonitorViewEvents(view) {\n  if (view._areViewEventsMonitored) { return; }\n\n  view._areViewEventsMonitored = true;\n\n  function handleBeforeAttach() {\n    triggerMethodChildren(view, 'before:attach');\n  }\n\n  function handleAttach() {\n    triggerMethodChildren(view, 'attach', setIsAttached);\n    triggerDOMRefresh();\n  }\n\n  function handleBeforeDetach() {\n    triggerMethodChildren(view, 'before:detach');\n  }\n\n  function handleDetach() {\n    triggerMethodChildren(view, 'detach', unsetIsAttached);\n  }\n\n  function handleRender() {\n    triggerDOMRefresh();\n  }\n\n  function triggerDOMRefresh() {\n    if (view._isAttached && view._isRendered) {\n      triggerMethodOn(view, 'dom:refresh', view);\n    }\n  }\n\n  view.on({\n    'before:attach': handleBeforeAttach,\n    'attach':        handleAttach,\n    'before:detach': handleBeforeDetach,\n    'detach':        handleDetach,\n    'render':        handleRender\n  });\n}\n\nexport default MonitorViewEvents;\n","import MarionetteError          from '../error';\n\n// Placeholder method to be extended by the user.\n// The method should define the object that stores the behaviors.\n// i.e.\n//\n// ```js\n// Marionette.Behaviors.behaviorsLookup: function() {\n//   return App.Behaviors\n// }\n// ```\nexport default function behaviorsLookup() {\n  throw new MarionetteError({\n    message: 'You must define where your behaviors are stored.',\n    url: 'marionette.behaviors.md#behaviorslookup'\n  });\n}\n","import _ from 'underscore';\n\n// Borrow event splitter from Backbone\nvar delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\nfunction uniqueName(eventName, selector) {\n  return [eventName + _.uniqueId('.evt'), selector].join(' ');\n}\n\n// Set event name to be namespaced using a unique index\n// to generate a non colliding event namespace\n// http://api.jquery.com/event.namespace/\nvar getUniqueEventName = function(eventName) {\n  var match = eventName.match(delegateEventSplitter);\n  return uniqueName(match[1], match[2]);\n};\n\nexport default getUniqueEventName;\n","import _ from 'underscore';\nimport getUniqueEventName from '../utils/getUniqueEventName';\n\n// Internal method to create an event handler for a given `triggerDef` like\n// 'click:foo'\nfunction buildViewTrigger(view, triggerDef) {\n  if (_.isString(triggerDef)) {\n    triggerDef = {event: triggerDef};\n  }\n\n  const eventName = triggerDef.event;\n  const shouldPreventDefault = triggerDef.preventDefault !== false;\n  const shouldStopPropagation = triggerDef.stopPropagation !== false;\n\n  return function(e) {\n    if (shouldPreventDefault) {\n      e.preventDefault();\n    }\n\n    if (shouldStopPropagation) {\n      e.stopPropagation();\n    }\n\n    view.triggerMethod(eventName, view);\n  };\n}\n\nexport default {\n\n  // Configure `triggers` to forward DOM events to view\n  // events. `triggers: {\"click .foo\": \"do:foo\"}`\n  _getViewTriggers: function(view, triggers) {\n    // Configure the triggers, prevent default\n    // action and stop propagation of DOM events\n    return _.reduce(triggers, function(events, value, key) {\n      key = getUniqueEventName(key);\n      events[key] = buildViewTrigger(view, value);\n      return events;\n    }, {}, this);\n  }\n\n};\n","import _                        from 'underscore';\nimport getValue                 from '../utils/getValue';\nimport { triggerMethod }        from '../trigger-method';\nimport Marionette               from '../backbone.marionette';\n\n// Takes care of getting the behavior class\n// given options and a key.\n// If a user passes in options.behaviorClass\n// default to using that.\n// If a user passes in a Behavior Class directly, use that\n// Otherwise delegate the lookup to the users `behaviorsLookup` implementation.\nfunction getBehaviorClass(options, key) {\n  if (options.behaviorClass) {\n    return options.behaviorClass;\n    //treat functions as a Behavior constructor\n  } else if (_.isFunction(options)) {\n    return options;\n  }\n\n  // behaviorsLookup can be either a flat object or a method\n  return getValue(Marionette.Behaviors.behaviorsLookup, options, key)[key];\n}\n\n// Iterate over the behaviors object, for each behavior\n// instantiate it and get its grouped behaviors.\n// This accepts a list of behaviors in either an object or array form\nfunction parseBehaviors(view, behaviors) {\n  return _.chain(behaviors).map(function(options, key) {\n    var BehaviorClass = getBehaviorClass(options, key);\n    //if we're passed a class directly instead of an object\n    var _options = options === BehaviorClass ? {} : options;\n    var behavior = new BehaviorClass(_options, view);\n    var nestedBehaviors = parseBehaviors(view, _.result(behavior, 'behaviors'));\n\n    return [behavior].concat(nestedBehaviors);\n  }).flatten().value();\n}\n\nexport default {\n  _initBehaviors: function() {\n    var behaviors = this.getValue(this.getOption('behaviors'));\n\n    // Behaviors defined on a view can be a flat object literal\n    // or it can be a function that returns an object.\n    this._behaviors = _.isObject(behaviors) ? parseBehaviors(this, behaviors) : {};\n  },\n\n  _getBehaviorTriggers: function() {\n    var triggers = _.invoke(this._behaviors, 'getTriggers');\n    return _.extend({}, ...triggers);\n  },\n\n  _getBehaviorEvents: function() {\n    var events = _.invoke(this._behaviors, 'getEvents');\n    return _.extend({}, ...events);\n  },\n\n  // proxy behavior $el to the view's $el.\n  _proxyBehaviorViewProperties: function() {\n    _.invoke(this._behaviors, 'proxyViewProperties');\n  },\n\n  // delegate modelEvents and collectionEvents\n  _delegateBehaviorEntityEvents: function() {\n    _.invoke(this._behaviors, 'delegateEntityEvents');\n  },\n\n  // undelegate modelEvents and collectionEvents\n  _undelegateBehaviorEntityEvents: function() {\n    _.invoke(this._behaviors, 'undelegateEntityEvents');\n  },\n\n  _destroyBehaviors: function(options) {\n    // Call destroy on each behavior after\n    // destroying the view.\n    // This unbinds event listeners\n    // that behaviors have registered for.\n    _.invoke(this._behaviors, 'destroy', options);\n  },\n\n  _bindBehaviorUIElements: function() {\n    _.invoke(this._behaviors, 'bindUIElements');\n  },\n\n  _unbindBehaviorUIElements: function() {\n    _.invoke(this._behaviors, 'unbindUIElements');\n  },\n\n  _triggerEventOnBehaviors: function(...args) {\n    var behaviors = this._behaviors;\n    // Use good ol' for as this is a very hot function\n    for (var i = 0, length = behaviors && behaviors.length; i < length; i++) {\n      triggerMethod.apply(behaviors[i], args);\n    }\n  }\n};\n","// Marionette.extend\n// -----------------\n\nimport Backbone from 'backbone';\n\n// Borrow the Backbone `extend` method so we can use it as needed\nvar extend = Backbone.Model.extend;\n\nexport default extend;\n","// Error\n// -----\n\nimport _      from 'underscore';\nimport extend from './utils/extend';\nimport {version} from '../package.json';\n\nvar errorProps = ['description', 'fileName', 'lineNumber', 'name', 'message', 'number'];\n\nvar MarionetteError = extend.call(Error, {\n  urlRoot: 'http://marionettejs.com/docs/v' + version + '/',\n\n  constructor: function MarionetteError(message, options) {\n    if (_.isObject(message)) {\n      options = message;\n      message = options.message;\n    } else if (!options) {\n      options = {};\n    }\n\n    var error = Error.call(this, message);\n    _.extend(this, _.pick(error, errorProps), _.pick(options, errorProps));\n\n    this.captureStackTrace();\n\n    if (options.url) {\n      this.url = this.urlRoot + options.url;\n    }\n  },\n\n  captureStackTrace: function() {\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, MarionetteError);\n    }\n  },\n\n  toString: function() {\n    return this.name + ': ' + this.message + (this.url ? ' See: ' + this.url : '');\n  }\n});\n\nMarionetteError.extend = extend;\n\nexport default MarionetteError;\n","//Internal utility for creating context style global utils\nvar proxy = function(method) {\n  return function(context, ...args) {\n    return method.apply(context, args);\n  };\n};\n\nexport default proxy;\n","import _ from 'underscore';\n\n// Marionette.normalizeMethods\n// ----------------------\n\n// Pass in a mapping of events => functions or function names\n// and return a mapping of events => functions\nvar normalizeMethods = function(hash) {\n  return _.reduce(hash, function(normalizedHash, method, name) {\n    if (!_.isFunction(method)) {\n      method = this[method];\n    }\n    if (method) {\n      normalizedHash[name] = method;\n    }\n    return normalizedHash;\n  }, {}, this);\n};\n\nexport default normalizeMethods;\n","import _ from 'underscore';\n\n// Merge `keys` from `options` onto `this`\nvar mergeOptions = function(options, keys) {\n  if (!options) { return; }\n  _.extend(this, _.pick(options, keys));\n};\n\nexport default mergeOptions;\n","// Marionette.getOption\n// --------------------\n\n// Retrieve an object, function or other value from the\n// object or its `options`, with `options` taking precedence.\nvar getOption = function(optionName) {\n  if (!optionName) { return; }\n  if (this.options && (this.options[optionName] !== undefined)) {\n    return this.options[optionName];\n  } else {\n    return this[optionName];\n  }\n};\n\nexport default getOption;\n","// Marionette.isNodeAttached\n// -------------------------\n\nimport Backbone from 'backbone';\n\n// Determine if `el` is a child of the document\nvar isNodeAttached = function(el) {\n  return Backbone.$.contains(document.documentElement, el);\n};\n\nexport default isNodeAttached;\n","/* global console */\n\nimport _ from 'underscore';\n\nimport Marionette from '../backbone.marionette';\n\nvar deprecate = function(message, test) {\n  if (_.isObject(message)) {\n    message = (\n      message.prev + ' is going to be removed in the future. ' +\n      'Please use ' + message.next + ' instead.' +\n      (message.url ? ' See: ' + message.url : '')\n    );\n  }\n\n  if (!Marionette.DEV_MODE) {\n    return;\n  }\n\n  if ((test === undefined || !test) && !deprecate._cache[message]) {\n    deprecate._warn('Deprecation warning: ' + message);\n    deprecate._cache[message] = true;\n  }\n};\n\ndeprecate._console = typeof console !== 'undefined' ? console : {};\ndeprecate._warn = function() {\n  var warn = deprecate._console.warn || deprecate._console.log || function() {};\n  return warn.apply(deprecate._console, arguments);\n};\ndeprecate._cache = {};\n\nexport default deprecate;\n","import Radio from 'backbone.radio';\n\nimport {\n  bindRadioRequests,\n  unbindRadioRequests\n} from '../bind-radio-requests';\n\nimport {\n  bindEntityEvents as bindRadioEvents,\n  unbindEntityEvents as unbindRadioEvents\n} from '../bind-entity-events';\n\nexport default {\n\n  _initRadio: function() {\n    var channelName = this.getValue(this.getOption('channelName'));\n\n    if (!channelName) {\n      return;\n    }\n\n    var channel = this._channel = Radio.channel(channelName);\n\n    var radioEvents = this.getValue(this.getOption('radioEvents'));\n    this.bindRadioEvents(channel, radioEvents);\n\n    var radioRequests = this.getValue(this.getOption('radioRequests'));\n    this.bindRadioRequests(channel, radioRequests);\n\n    this.on('destroy', this._destroyRadio);\n  },\n\n  _destroyRadio: function() {\n    this._channel.stopReplying(null, null, this);\n  },\n\n  getChannel: function() {\n    return this._channel;\n  },\n\n  // Proxy `bindRadioEvents`\n  bindRadioEvents: bindRadioEvents,\n\n  // Proxy `unbindRadioEvents`\n  unbindRadioEvents: unbindRadioEvents,\n\n  // Proxy `bindRadioRequests`\n  bindRadioRequests: bindRadioRequests,\n\n  // Proxy `unbindRadioRequests`\n  unbindRadioRequests: unbindRadioRequests\n\n};\n","import _ from 'underscore';\n\n// Internal utility for setting options consistently across Mn\nvar _setOptions = function(...args) {\n  this.options = _.extend({}, _.result(this, 'options'), ...args);\n};\n\nexport default _setOptions;\n","import _ from 'underscore';\n\n// Similar to `_.result`, this is a simple helper\n// If a function is provided we call it with context\n// otherwise just return the value. If the value is\n// undefined return a default value\nvar getValue = function(value, ...args) {\n  if (_.isFunction(value)) {\n    return value.apply(this, args);\n  }\n  return value;\n};\n\nexport default getValue;\n","import getOption                from '../utils/getOption';\nimport getValue                 from '../utils/getValue';\nimport mergeOptions             from '../utils/mergeOptions';\nimport normalizeMethods         from '../utils/normalizeMethods';\nimport _setOptions              from '../utils/_setOptions';\nimport {\n  bindEntityEvents,\n  unbindEntityEvents\n}                               from '../bind-entity-events';\n\nexport default {\n  getValue: getValue,\n\n  // Imports the \"normalizeMethods\" to transform hashes of\n  // events=>function references/names to a hash of events=>function references\n  normalizeMethods: normalizeMethods,\n\n  _setOptions: _setOptions,\n\n  // A handy way to merge passed-in options onto the instance\n  mergeOptions: mergeOptions,\n\n  // Enable getting options from this or this.options by name.\n  getOption: getOption,\n\n  // Enable binding view's events from another entity.\n  bindEntityEvents: bindEntityEvents,\n\n  // Enable unbinding view's events from another entity.\n  unbindEntityEvents: unbindEntityEvents\n};\n","// Object\n// ------\n\nimport _ from 'underscore';\nimport Backbone from 'backbone';\nimport extend from './utils/extend';\nimport CommonMixin from './mixins/common';\nimport RadioMixin from './mixins/radio';\nimport { triggerMethod } from './trigger-method';\n\n// A Base Class that other Classes should descend from.\n// Object borrows many conventions and utilities from Backbone.\nvar MarionetteObject = function(options) {\n  this._setOptions(options);\n  this.cid = _.uniqueId(this.cidPrefix);\n  this._initRadio();\n  this.initialize.apply(this, arguments);\n};\n\nMarionetteObject.extend = extend;\n\n// Object Methods\n// --------------\n\n// Ensure it can trigger events with Backbone.Events\n_.extend(MarionetteObject.prototype, Backbone.Events, CommonMixin, RadioMixin, {\n  cidPrefix: 'mno',\n\n  // for parity with Marionette.AbstractView lifecyle\n  _isDestroyed: false,\n\n  isDestroyed: function() {\n    return this._isDestroyed();\n  },\n\n  //this is a noop method intended to be overridden by classes that extend from this base\n  initialize: function() {},\n\n  destroy: function(...args) {\n    if (this._isDestroyed) { return this; }\n\n    this.triggerMethod('before:destroy', ...args);\n\n    // mark as destroyed before doing the actual destroy, to\n    // prevent infinite loops within \"destroy\" event handlers\n    this._isDestroyed = true;\n    this.triggerMethod('destroy', ...args);\n    this.stopListening();\n\n    return this;\n  },\n\n  triggerMethod: triggerMethod\n});\n\nexport default MarionetteObject;\n","// Region\n// ------\n\nimport _ from 'underscore';\nimport Backbone from 'backbone';\nimport isNodeAttached from './utils/isNodeAttached';\nimport MarionetteObject from './object';\nimport MarionetteError from './error';\nimport MonitorViewEvents from './monitor-view-events';\nimport { triggerMethodOn } from './trigger-method';\n\nconst Region = MarionetteObject.extend({\n  cidPrefix: 'mnr',\n  replaceElement: false,\n  _isReplaced: false,\n\n  constructor(options) {\n    this._setOptions(options);\n    this._initEl = this.el = this.getOption('el');\n\n    // Handle when this.el is passed in as a $ wrapped element.\n    this.el = this.el instanceof Backbone.$ ? this.el[0] : this.el;\n\n    if (!this.el) {\n      throw new MarionetteError({\n        name: 'NoElError',\n        message: 'An \"el\" must be specified for a region.'\n      });\n    }\n\n    this.$el = this.getEl(this.el);\n    MarionetteObject.call(this, options);\n  },\n\n  // Displays a backbone view instance inside of the region. Handles calling the `render`\n  // method for you. Reads content directly from the `el` attribute. The `preventDestroy`\n  // option can be used to prevent a view from the old view being destroyed on show.\n  show(view, options) {\n    if (!this._ensureElement()) {\n      return;\n    }\n    this._ensureView(view);\n    if (view === this.currentView) { return this; }\n\n    this.triggerMethod('before:show', this, view, options);\n\n    MonitorViewEvents(view);\n\n    this.empty(options);\n\n    // We need to listen for if a view is destroyed in a way other than through the region.\n    // If this happens we need to remove the reference to the currentView since once a view\n    // has been destroyed we can not reuse it.\n    view.on('destroy', this.empty, this);\n\n    // Make this region the view's parent.\n    // It's important that this parent binding happens before rendering so that any events\n    // the child may trigger during render can also be triggered on the child's ancestor views.\n    view._parent = this;\n\n    this._renderView(view);\n\n    this._attachView(view, options);\n\n    this.triggerMethod('show', this, view, options);\n    return this;\n  },\n\n  _renderView(view) {\n    if (view._isRendered) {\n      return;\n    }\n\n    if (!view.supportsRenderLifecycle) {\n      triggerMethodOn(view, 'before:render', view);\n    }\n\n    view.render();\n\n    if (!view.supportsRenderLifecycle) {\n      view._isRendered = true;\n      triggerMethodOn(view, 'render', view);\n    }\n  },\n\n  _attachView(view) {\n    const shouldTriggerAttach = !view._isAttached && isNodeAttached(this.el);\n    const shouldReplaceEl = !!this.replaceElement;\n\n    if (shouldTriggerAttach) {\n      triggerMethodOn(view, 'before:attach', view);\n    }\n\n    this.attachHtml(view, shouldReplaceEl);\n\n    if (shouldTriggerAttach) {\n      view._isAttached = true;\n      triggerMethodOn(view, 'attach', view);\n    }\n\n    this.currentView = view;\n  },\n\n  _ensureElement() {\n    if (!_.isObject(this.el)) {\n      this.$el = this.getEl(this.el);\n      this.el = this.$el[0];\n    }\n\n    if (!this.$el || this.$el.length === 0) {\n      if (this.getOption('allowMissingEl')) {\n        return false;\n      } else {\n        throw new MarionetteError('An \"el\" ' + this.$el.selector + ' must exist in DOM');\n      }\n    }\n    return true;\n  },\n\n  _ensureView(view) {\n    if (!view) {\n      throw new MarionetteError({\n        name: 'ViewNotValid',\n        message: 'The view passed is undefined and therefore invalid. You must pass a view instance to show.'\n      });\n    }\n\n    if (view._isDestroyed) {\n      throw new MarionetteError({\n        name: 'ViewDestroyedError',\n        message: 'View (cid: \"' + view.cid + '\") has already been destroyed and cannot be used.'\n      });\n    }\n  },\n\n  // Override this method to change how the region finds the DOM element that it manages. Return\n  // a jQuery selector object scoped to a provided parent el or the document if none exists.\n  getEl(el) {\n    return Backbone.$(el, this.getValue(this.getOption('parentEl')));\n  },\n\n  _replaceEl(view) {\n    // always restore the el to ensure the regions el is present before replacing\n    this._restoreEl();\n\n    const parent = this.el.parentNode;\n\n    parent.replaceChild(view.el, this.el);\n    this._isReplaced = true;\n  },\n\n  // Restore the region's element in the DOM.\n  _restoreEl() {\n    if (!this.currentView) {\n      return;\n    }\n\n    const view = this.currentView;\n    const parent = view.el.parentNode;\n\n    if (!parent) {\n      return;\n    }\n\n    parent.replaceChild(this.el, view.el);\n    this._isReplaced = false;\n  },\n\n  isReplaced() {\n    return !!this._isReplaced;\n  },\n\n  // Override this method to change how the new view is appended to the `$el` that the\n  // region is managing\n  attachHtml(view, shouldReplace) {\n    if (shouldReplace) {\n      // replace the region's node with the view's node\n      this._replaceEl(view);\n    } else {\n      this.el.appendChild(view.el);\n    }\n  },\n\n  // Destroy the current view, if there is one. If there is no current view, it does\n  // nothing and returns immediately.\n  empty({preventDestroy} = {}) {\n    const shouldPreventDestroy = !!preventDestroy;\n    const view = this.currentView;\n\n    // If there is no view in the region we should not remove anything\n    if (!view) { return this; }\n\n    view.off('destroy', this.empty, this);\n    this.triggerMethod('before:empty', this, view);\n\n    if (this._isReplaced) {\n      this._restoreEl();\n    }\n\n    if (shouldPreventDestroy) {\n      this._detachView(view);\n    } else {\n      this._destroyView(view);\n    }\n\n    delete this.currentView._parent;\n    delete this.currentView;\n\n    this.triggerMethod('empty', this, view);\n    return this;\n  },\n\n  _detachView(view) {\n    const shouldTriggerDetach = !!view._isAttached;\n\n    if (shouldTriggerDetach) {\n      triggerMethodOn(view, 'before:detach', view);\n    }\n\n    this.$el.contents().detach();\n\n    if (shouldTriggerDetach) {\n      view._isAttached = false;\n      triggerMethodOn(view, 'detach', view);\n    }\n  },\n\n  // Call 'destroy' or 'remove', depending on which is found on the view (if showing a raw\n  // Backbone view or a Marionette View)\n  _destroyView(view) {\n    if (view._isDestroyed) { return; }\n\n    if (!view.supportsDestroyLifecycle) {\n      triggerMethodOn(view, 'before:destroy', view);\n    }\n    if (view.destroy) {\n      view.destroy();\n    } else {\n      const shouldTriggerDetach = !!view._isAttached;\n\n      if (shouldTriggerDetach) {\n        triggerMethodOn(view, 'before:detach', view);\n      }\n\n      view.remove();\n\n      if (shouldTriggerDetach) {\n        view._isAttached = false;\n        triggerMethodOn(view, 'detach', view);\n      }\n\n      // appending _isDestroyed to raw Backbone View allows regions to throw a\n      // ViewDestroyedError for this view\n      view._isDestroyed = true;\n    }\n\n    if (!view.supportsDestroyLifecycle) {\n      triggerMethodOn(view, 'destroy', view);\n    }\n  },\n\n  // Checks whether a view is currently present within the region. Returns `true` if there is\n  // and `false` if no view is present.\n  hasView() {\n    return !!this.currentView;\n  },\n\n  // Reset the region by destroying any existing view and clearing out the cached `$el`.\n  // The next time a view is shown via this region, the region will re-query the DOM for\n  // the region's `el`.\n  reset() {\n    this.empty();\n\n    if (this.$el) {\n      this.el = this._initEl;\n    }\n\n    delete this.$el;\n    return this;\n  },\n\n  destroy: function() {\n    this.reset();\n    return MarionetteObject.prototype.destroy.apply(this, arguments);\n  }\n});\n\nexport default Region;\n","// Application\n// -----------\nimport _                from 'underscore';\nimport MarionetteObject from './object';\nimport Region           from './region';\n\n// A container for a Marionette application.\nvar Application = MarionetteObject.extend({\n  cidPrefix: 'mna',\n\n  constructor: function(options) {\n    this._setOptions(options);\n\n    this._initRegion();\n\n    MarionetteObject.prototype.constructor.apply(this, arguments);\n  },\n\n  regionClass: Region,\n\n  _initRegion: function(options) {\n    var region = this.getOption('region');\n    var RegionClass = this.getOption('regionClass');\n\n    // if the region is a string expect an el or selector\n    // and instantiate a region\n    if (_.isString(region)) {\n      this._region = new RegionClass({\n        el: region\n      });\n      return;\n    }\n\n    this._region = region;\n  },\n\n  getRegion: function() {\n    return this._region;\n  },\n\n  showView: function(view, ...args) {\n    var region = this.getRegion();\n    return region.show(region, ...args);\n  },\n\n  getView: function() {\n    return this.getRegion().currentView;\n  },\n\n  // kick off all of the application's processes.\n  start: function(options) {\n    this.triggerMethod('before:start', options);\n    this.triggerMethod('start', options);\n  }\n\n});\n\nexport default Application;\n","// App Router\n// ----------\n\n// Reduce the boilerplate code of handling route events\n// and then calling a single method on another object,\n// called a controller.\n// Have your routers configured to call the method on\n// your controller, directly.\n//\n// Configure an AppRouter with `appRoutes`.\n//\n// App routers can only take one `controller` object.\n// It is recommended that you divide your controller\n// objects in to smaller pieces of related functionality\n// and have multiple routers / controllers, instead of\n// just one giant router and controller.\n//\n// You can also add standard routes to an AppRouter.\n\nimport Backbone                from 'backbone';\nimport _                       from 'underscore';\nimport MarionetteError         from './error';\nimport CommonMixin             from './mixins/common';\nimport { triggerMethod }       from './trigger-method';\n\nvar AppRouter = Backbone.Router.extend({\n\n  constructor: function(options) {\n    this._setOptions(options);\n\n    Backbone.Router.apply(this, arguments);\n\n    var appRoutes = this.getOption('appRoutes');\n    var controller = this._getController();\n    this.processAppRoutes(controller, appRoutes);\n    this.on('route', this._processOnRoute, this);\n  },\n\n  // Similar to route method on a Backbone Router but\n  // method is called on the controller\n  appRoute: function(route, methodName) {\n    var controller = this._getController();\n    this._addAppRoute(controller, route, methodName);\n  },\n\n  // process the route event and trigger the onRoute\n  // method call, if it exists\n  _processOnRoute: function(routeName, routeArgs) {\n    // make sure an onRoute before trying to call it\n    if (_.isFunction(this.onRoute)) {\n      // find the path that matches the current route\n      var routePath = _.invert(this.getOption('appRoutes'))[routeName];\n      this.onRoute(routeName, routePath, routeArgs);\n    }\n  },\n\n  // Internal method to process the `appRoutes` for the\n  // router, and turn them in to routes that trigger the\n  // specified method on the specified `controller`.\n  processAppRoutes: function(controller, appRoutes) {\n    if (!appRoutes) { return; }\n\n    var routeNames = _.keys(appRoutes).reverse(); // Backbone requires reverted order of routes\n\n    _.each(routeNames, function(route) {\n      this._addAppRoute(controller, route, appRoutes[route]);\n    }, this);\n  },\n\n  _getController: function() {\n    return this.getOption('controller');\n  },\n\n  _addAppRoute: function(controller, route, methodName) {\n    var method = controller[methodName];\n\n    if (!method) {\n      throw new MarionetteError('Method \"' + methodName + '\" was not found on the controller');\n    }\n\n    this.route(route, methodName, _.bind(method, controller));\n  },\n\n  triggerMethod: triggerMethod\n});\n\n_.extend(AppRouter.prototype, CommonMixin);\n\nexport default AppRouter;\n","// Template Cache\n// --------------\n\nimport _               from 'underscore';\nimport Backbone        from 'backbone';\nimport MarionetteError from './error';\n\n// Manage templates stored in `<script>` blocks,\n// caching them for faster access.\nvar TemplateCache = function(templateId) {\n  this.templateId = templateId;\n};\n\n// TemplateCache object-level methods. Manage the template\n// caches from these method calls instead of creating\n// your own TemplateCache instances\n_.extend(TemplateCache, {\n  templateCaches: {},\n\n  // Get the specified template by id. Either\n  // retrieves the cached version, or loads it\n  // from the DOM.\n  get: function(templateId, options) {\n    var cachedTemplate = this.templateCaches[templateId];\n\n    if (!cachedTemplate) {\n      cachedTemplate = new TemplateCache(templateId);\n      this.templateCaches[templateId] = cachedTemplate;\n    }\n\n    return cachedTemplate.load(options);\n  },\n\n  // Clear templates from the cache. If no arguments\n  // are specified, clears all templates:\n  // `clear()`\n  //\n  // If arguments are specified, clears each of the\n  // specified templates from the cache:\n  // `clear(\"#t1\", \"#t2\", \"...\")`\n  clear: function(...args) {\n    var i;\n    var length = args.length;\n\n    if (length > 0) {\n      for (i = 0; i < length; i++) {\n        delete this.templateCaches[args[i]];\n      }\n    } else {\n      this.templateCaches = {};\n    }\n  }\n});\n\n// TemplateCache instance methods, allowing each\n// template cache object to manage its own state\n// and know whether or not it has been loaded\n_.extend(TemplateCache.prototype, {\n\n  // Internal method to load the template\n  load: function(options) {\n    // Guard clause to prevent loading this template more than once\n    if (this.compiledTemplate) {\n      return this.compiledTemplate;\n    }\n\n    // Load the template and compile it\n    var template = this.loadTemplate(this.templateId, options);\n    this.compiledTemplate = this.compileTemplate(template, options);\n\n    return this.compiledTemplate;\n  },\n\n  // Load a template from the DOM, by default. Override\n  // this method to provide your own template retrieval\n  // For asynchronous loading with AMD/RequireJS, consider\n  // using a template-loader plugin as described here:\n  // https://github.com/marionettejs/backbone.marionette/wiki/Using-marionette-with-requirejs\n  loadTemplate: function(templateId, options) {\n    var $template = Backbone.$(templateId);\n\n    if (!$template.length) {\n      throw new MarionetteError({\n        name: 'NoTemplateError',\n        message: 'Could not find template: \"' + templateId + '\"'\n      });\n    }\n    return $template.html();\n  },\n\n  // Pre-compile the template before caching it. Override\n  // this method if you do not need to pre-compile a template\n  // (JST / RequireJS for example) or if you want to change\n  // the template engine used (Handebars, etc).\n  compileTemplate: function(rawTemplate, options) {\n    return _.template(rawTemplate, options);\n  }\n});\n\nexport default TemplateCache;\n","// Renderer\n// --------\n\nimport _               from 'underscore';\nimport MarionetteError from './error';\nimport TemplateCache   from './template-cache';\n\n// Render a template with data by passing in the template\n// selector and the data to render.\nvar Renderer = {\n\n  // Render a template with data. The `template` parameter is\n  // passed to the `TemplateCache` object to retrieve the\n  // template function. Override this method to provide your own\n  // custom rendering and template handling for all of Marionette.\n  render: function(template, data) {\n    if (!template) {\n      throw new MarionetteError({\n        name: 'TemplateNotFoundError',\n        message: 'Cannot render the template since its false, null or undefined.'\n      });\n    }\n\n    var templateFunc = _.isFunction(template) ? template : TemplateCache.get(template);\n\n    return templateFunc(data);\n  }\n};\n\nexport default Renderer;\n","import _                    from 'underscore';\nimport Region               from '../region';\nimport MarionetteError      from '../error';\n\nexport default {\n  regionClass: Region,\n\n  // Internal method to initialize the regions that have been defined in a\n  // `regions` attribute on this View.\n  _initRegions: function() {\n\n    // init regions hash\n    this.regions =  this.regions || {};\n    this._regions = {};\n\n    this.addRegions(this.getValue(this.getOption('regions')));\n  },\n\n  // Internal method to re-initialize all of the regions by updating\n  // the `el` that they point to\n  _reInitRegions: function() {\n    _.invoke(this._regions, 'reset');\n  },\n\n  // Add a single region, by name, to the View\n  addRegion: function(name, definition) {\n    var regions = {};\n    regions[name] = definition;\n    return this.addRegions(regions)[name];\n  },\n\n  // Add multiple regions as a {name: definition, name2: def2} object literal\n  addRegions: function(regions) {\n    // If there's nothing to add, stop here.\n    if (_.isEmpty(regions)) {\n      return;\n    }\n\n    // Normalize region selectors hash to allow\n    // a user to use the @ui. syntax.\n    regions = this.normalizeUIValues(regions, ['selector', 'el']);\n\n    // Add the regions definitions to the regions property\n    this.regions = _.extend({}, this.regions, regions);\n\n    return this._addRegions(regions);\n  },\n\n  // internal method to build and add regions\n  _addRegions: function(regionDefinitions) {\n    return _.reduce(regionDefinitions, function(regions, definition, name) {\n      regions[name] = this._buildRegion(definition);\n      this._addRegion(regions[name], name);\n      return regions;\n    }, {}, this);\n  },\n\n  // return the region instance from the definition\n  _buildRegion: function(definition) {\n    if (definition instanceof Region) {\n      return definition;\n    }\n\n    return this._buildRegionFromDefinition(definition);\n  },\n\n  _buildRegionFromDefinition: function(definition) {\n    if (_.isString(definition)) {\n      return this._buildRegionFromObject({el: definition});\n    }\n\n    if (_.isFunction(definition)) {\n      return this._buildRegionFromRegionClass(definition);\n    }\n\n    if (_.isObject(definition)) {\n      return this._buildRegionFromObject(definition);\n    }\n\n    throw new MarionetteError({\n      message: 'Improper region configuration type.',\n      url: 'marionette.region.html#region-configuration-types'\n    });\n  },\n\n  _buildRegionFromObject: function(definition) {\n    var RegionClass = definition.regionClass || this.getOption('regionClass');\n\n    var options = _.omit(definition, 'regionClass');\n\n    _.defaults(options, {\n      el: definition.selector,\n      parentEl: _.partial(_.result, this, 'el')\n    });\n\n    return new RegionClass(options);\n  },\n\n  // Build the region directly from a given `RegionClass`\n  _buildRegionFromRegionClass: function(RegionClass) {\n    return new RegionClass({\n      parentEl: _.partial(_.result, this, 'el')\n    });\n  },\n\n  _addRegion: function(region, name) {\n    this.triggerMethod('before:add:region', name, region);\n\n    region._parent = this;\n\n    this._regions[name] = region;\n\n    this.triggerMethod('add:region', name, region);\n  },\n\n  // Remove a single region from the View, by name\n  removeRegion: function(name) {\n    var region = this._regions[name];\n\n    this._removeRegion(region, name);\n\n    return region;\n  },\n\n  // Remove all regions from the View\n  removeRegions: function() {\n    var regions = this.getRegions();\n\n    _.each(this._regions, this._removeRegion, this);\n\n    return regions;\n  },\n\n  _removeRegion: function(region, name) {\n    this.triggerMethod('before:remove:region', name, region);\n\n    region.empty();\n    region.stopListening();\n\n    delete this.regions[name];\n    delete this._regions[name];\n\n    this.triggerMethod('remove:region', name, region);\n  },\n\n  // Empty all regions in the region manager, but\n  // leave them attached\n  emptyRegions: function() {\n    var regions = this.getRegions();\n    _.invoke(regions, 'empty');\n    return regions;\n  },\n\n  // Checks to see if view contains region\n  // Accepts the region name\n  // hasRegion('main')\n  hasRegion: function(name) {\n    return !!this.getRegion(name);\n  },\n\n  // Provides access to regions\n  // Accepts the region name\n  // getRegion('main')\n  getRegion: function(name) {\n    return this._regions[name];\n  },\n\n  // Get all regions\n  getRegions: function() {\n    return _.clone(this._regions);\n  },\n\n  showChildView: function(name, view, ...args) {\n    var region = this.getRegion(name);\n    return region.show(view, ...args);\n  },\n\n  getChildView: function(name) {\n    return this.getRegion(name).currentView;\n  }\n\n};\n","import _ from 'underscore';\n// allows for the use of the @ui. syntax within\n// a given key for triggers and events\n// swaps the @ui with the associated selector.\n// Returns a new, non-mutated, parsed events hash.\nvar normalizeUIKeys = function(hash, ui) {\n  return _.reduce(hash, function(memo, val, key) {\n    var normalizedKey = normalizeUIString(key, ui);\n    memo[normalizedKey] = val;\n    return memo;\n  }, {});\n};\n\n// utility method for parsing @ui. syntax strings\n// into associated selector\nvar normalizeUIString = function(uiString, ui) {\n  return uiString.replace(/@ui\\.[a-zA-Z_$0-9]*/g, function(r) {\n    return ui[r.slice(4)];\n  });\n};\n\n// allows for the use of the @ui. syntax within\n// a given value for regions\n// swaps the @ui with the associated selector\nvar normalizeUIValues = function(hash, ui, properties) {\n  _.each(hash, function(val, key) {\n    if (_.isString(val)) {\n      hash[key] = normalizeUIString(val, ui);\n    } else if (_.isObject(val) && _.isArray(properties)) {\n      _.extend(val, normalizeUIValues(_.pick(val, properties), ui));\n      /* Value is an object, and we got an array of embedded property names to normalize. */\n      _.each(properties, function(property) {\n        var propertyVal = val[property];\n        if (_.isString(propertyVal)) {\n          val[property] = normalizeUIString(propertyVal, ui);\n        }\n      });\n    }\n  });\n  return hash;\n};\n\nexport default {\n\n  // normalize the keys of passed hash with the views `ui` selectors.\n  // `{\"@ui.foo\": \"bar\"}`\n  normalizeUIKeys: function(hash) {\n    var uiBindings = this._getUIBindings();\n    return normalizeUIKeys(hash, uiBindings);\n  },\n\n  // normalize the values of passed hash with the views `ui` selectors.\n  // `{foo: \"@ui.bar\"}`\n  normalizeUIValues: function(hash, properties) {\n    var uiBindings = this._getUIBindings();\n    return normalizeUIValues(hash, uiBindings, properties);\n  },\n\n  _getUIBindings: function() {\n    var uiBindings = _.result(this, '_uiBindings');\n    var ui = _.result(this, 'ui');\n    return uiBindings || ui;\n  },\n\n  // This method binds the elements specified in the \"ui\" hash inside the view's code with\n  // the associated jQuery selectors.\n  _bindUIElements: function() {\n    if (!this.ui) { return; }\n\n    // store the ui hash in _uiBindings so they can be reset later\n    // and so re-rendering the view will be able to find the bindings\n    if (!this._uiBindings) {\n      this._uiBindings = this.ui;\n    }\n\n    // get the bindings result, as a function or otherwise\n    var bindings = _.result(this, '_uiBindings');\n\n    // empty the ui so we don't have anything to start with\n    this._ui = {};\n\n    // bind each of the selectors\n    _.each(bindings, function(selector, key) {\n      this._ui[key] = this.$(selector);\n    }, this);\n\n    this.ui = this._ui;\n  },\n\n  _unbindUIElements: function() {\n    if (!this.ui || !this._uiBindings) { return; }\n\n    // delete all of the existing ui bindings\n    _.each(this.ui, function($el, name) {\n      delete this.ui[name];\n    }, this);\n\n    // reset the ui element to the original bindings configuration\n    this.ui = this._uiBindings;\n    delete this._uiBindings;\n    delete this._ui;\n  },\n\n  _getUI: function(name) {\n    return this._ui[name];\n  }\n};\n","import {\n  bindEntityEvents,\n  unbindEntityEvents\n} from '../bind-entity-events';\n\nexport default {\n  // Handle `modelEvents`, and `collectionEvents` configuration\n  _delegateEntityEvents: function(model, collection) {\n    this._undelegateEntityEvents(model, collection);\n\n    var modelEvents = this.getValue(this.getOption('modelEvents'));\n    bindEntityEvents.call(this, model, modelEvents);\n\n    var collectionEvents = this.getValue(this.getOption('collectionEvents'));\n    bindEntityEvents.call(this, collection, collectionEvents);\n  },\n\n  _undelegateEntityEvents: function(model, collection) {\n    var modelEvents = this.getValue(this.getOption('modelEvents'));\n    unbindEntityEvents.call(this, model, modelEvents);\n\n    var collectionEvents = this.getValue(this.getOption('collectionEvents'));\n    unbindEntityEvents.call(this, collection, collectionEvents);\n  }\n};\n","// ViewMixin\n//  ---------\n\nimport Backbone from 'backbone';\nimport _ from 'underscore';\nimport MarionetteError from '../error';\nimport BehaviorsMixin from './behaviors';\nimport CommonMixin from './common';\nimport DelegateEntityEventsMixin from './delegate-entity-events';\nimport TriggersMixin from './triggers';\nimport UIMixin from './ui';\nimport View from '../view';\nimport { triggerMethod } from '../trigger-method';\n\nvar ViewMixin = {\n\n  supportsRenderLifecycle: true,\n  supportsDestroyLifecycle: true,\n\n  _isDestroyed: false,\n\n  isDestroyed: function() {\n    return !!this._isDestroyed;\n  },\n\n  _isRendered: false,\n\n  isRendered: function() {\n    return !!this._isRendered;\n  },\n\n  _isAttached: false,\n\n  isAttached() {\n    return !!this._isAttached;\n  },\n\n  // Mix in template context methods. Looks for a\n  // `templateContext` attribute, which can either be an\n  // object literal, or a function that returns an object\n  // literal. All methods and attributes from this object\n  // are copies to the object passed in.\n  mixinTemplateContext: function(target = {}) {\n    const templateContext = this.getValue(this.getOption('templateContext'));\n    return _.extend(target, templateContext);\n  },\n\n  // Overriding Backbone.View's `delegateEvents` to handle\n  // `events` and `triggers`\n  delegateEvents: function(eventsArg) {\n\n    this._proxyBehaviorViewProperties();\n    this._buildEventProxies();\n\n    const viewEvents = this._getEvents(eventsArg);\n\n    if (typeof eventsArg === 'undefined') {\n      this.events = viewEvents;\n    }\n\n    const combinedEvents = _.extend({},\n      this._getBehaviorEvents(),\n      viewEvents,\n      this._getBehaviorTriggers(),\n      this.getTriggers()\n    );\n\n    Backbone.View.prototype.delegateEvents.call(this, combinedEvents);\n\n    return this;\n  },\n\n  _getEvents: function(eventsArg) {\n    const events = this.getValue(eventsArg || this.events);\n\n    return this.normalizeUIKeys(events);\n  },\n\n  // Configure `triggers` to forward DOM events to view\n  // events. `triggers: {\"click .foo\": \"do:foo\"}`\n  getTriggers: function() {\n    if (!this.triggers) { return; }\n\n    // Allow `triggers` to be configured as a function\n    const triggers = this.normalizeUIKeys(_.result(this, 'triggers'));\n\n    // Configure the triggers, prevent default\n    // action and stop propagation of DOM events\n    return this._getViewTriggers(this, triggers);\n  },\n\n  // Handle `modelEvents`, and `collectionEvents` configuration\n  delegateEntityEvents: function() {\n    const modelEvents = this.getValue(this.getOption('modelEvents'));\n    this.bindEntityEvents(this.model, modelEvents);\n\n    const collectionEvents = this.getValue(this.getOption('collectionEvents'));\n    this.bindEntityEvents(this.collection, collectionEvents);\n\n    // bind each behaviors model and collection events\n    this._delegateBehaviorEntityEvents();\n\n    return this;\n  },\n\n  // Handle unbinding `modelEvents`, and `collectionEvents` configuration\n  undelegateEntityEvents: function() {\n    const modelEvents = this.getValue(this.getOption('modelEvents'));\n    this.unbindEntityEvents(this.model, modelEvents);\n\n    const collectionEvents = this.getValue(this.getOption('collectionEvents'));\n    this.unbindEntityEvents(this.collection, collectionEvents);\n\n    // unbind each behaviors model and collection events\n    this._undelegateBehaviorEntityEvents();\n\n    return this;\n  },\n\n  // Internal helper method to verify whether the view hasn't been destroyed\n  _ensureViewIsIntact: function() {\n    if (this._isDestroyed) {\n      throw new MarionetteError({\n        name: 'ViewDestroyedError',\n        message: 'View (cid: \"' + this.cid + '\") has already been destroyed and cannot be used.'\n      });\n    }\n  },\n\n  // Handle destroying the view and its children.\n  destroy: function(...args) {\n    if (this._isDestroyed) { return this; }\n    const shouldTriggerDetach = !!this._isAttached;\n\n    this.triggerMethod('before:destroy', ...args);\n    if (shouldTriggerDetach) {\n      this.triggerMethod('before:detach', this);\n    }\n\n    // unbind UI elements\n    this.unbindUIElements();\n\n    // remove the view from the DOM\n    // https://github.com/jashkenas/backbone/blob/1.2.3/backbone.js#L1235\n    this._removeElement();\n\n    if (shouldTriggerDetach) {\n      this._isAttached = false;\n      this.triggerMethod('detach', this);\n    }\n\n    // remove children after the remove to prevent extra paints\n    this._removeChildren();\n\n    this._destroyBehaviors(args);\n\n    this._isDestroyed = true;\n    this._isRendered = false;\n    this.triggerMethod('destroy', ...args);\n\n    this.stopListening();\n\n    return this;\n  },\n\n  bindUIElements: function() {\n    this._bindUIElements();\n    this._bindBehaviorUIElements();\n\n    return this;\n  },\n\n  // This method unbinds the elements specified in the \"ui\" hash\n  unbindUIElements: function() {\n    this._unbindUIElements();\n    this._unbindBehaviorUIElements();\n\n    return this;\n  },\n\n  getUI: function(name) {\n    this._ensureViewIsIntact();\n    return this._getUI(name);\n  },\n\n  // used as the prefix for child view events\n  // that are forwarded through the layoutview\n  childViewEventPrefix: 'childview',\n\n  // import the `triggerMethod` to trigger events with corresponding\n  // methods if the method exists\n  triggerMethod: function(...args) {\n    const ret = triggerMethod.apply(this, args);\n\n    this._triggerEventOnBehaviors(...args);\n    this._triggerEventOnParentLayout(...args);\n\n    return ret;\n  },\n\n  // Cache `childViewEvents` and `childViewTriggers`\n  _buildEventProxies: function() {\n    this._childViewEvents = this.getValue(this.getOption('childViewEvents'));\n    this._childViewTriggers = this.getValue(this.getOption('childViewTriggers'));\n  },\n\n  _triggerEventOnParentLayout: function(eventName, ...args) {\n    const layoutView = this._parentView();\n    if (!layoutView) {\n      return;\n    }\n\n    // invoke triggerMethod on parent view\n    const eventPrefix = layoutView.getOption('childViewEventPrefix');\n    const prefixedEventName = eventPrefix + ':' + eventName;\n\n    layoutView.triggerMethod(prefixedEventName, ...args);\n\n    // use the parent view's childViewEvents handler\n    const childViewEvents = layoutView.normalizeMethods(layoutView._childViewEvents);\n\n    if (!!childViewEvents && _.isFunction(childViewEvents[eventName])) {\n      childViewEvents[eventName].apply(layoutView, args);\n    }\n\n    // use the parent view's proxyEvent handlers\n    const childViewTriggers = layoutView._childViewTriggers;\n\n    // Call the event with the proxy name on the parent layout\n    if (childViewTriggers && _.isString(childViewTriggers[eventName])) {\n      layoutView.triggerMethod(childViewTriggers[eventName], ...args);\n    }\n  },\n\n  // Walk the _parent tree until we find a view (if one exists).\n  // Returns the parent view hierarchically closest to this view.\n  _parentView: function() {\n    let parent = this._parent;\n\n    while (parent) {\n      if (parent instanceof View) {\n        return parent;\n      }\n      parent = parent._parent;\n    }\n  }\n};\n\n_.extend(ViewMixin, BehaviorsMixin, CommonMixin, DelegateEntityEventsMixin, TriggersMixin,  UIMixin);\n\nexport default ViewMixin;\n","// View\n// ---------\n\nimport _                  from 'underscore';\nimport Backbone           from 'backbone';\nimport ViewMixin          from './mixins/view';\nimport RegionsMixin       from './mixins/regions';\nimport MonitorViewEvents  from './monitor-view-events';\nimport Renderer           from './renderer';\n\n// The standard view. Includes view events, automatic rendering\n// of Underscore templates, nested views, and more.\nvar View = Backbone.View.extend({\n\n  constructor(options) {\n    this.render = _.bind(this.render, this);\n\n    this._setOptions(options);\n\n    MonitorViewEvents(this);\n\n    this._initBehaviors();\n    this._initRegions();\n\n    Backbone.View.prototype.constructor.call(this, this.options);\n\n    this.delegateEntityEvents();\n  },\n\n  // Serialize the view's model *or* collection, if\n  // it exists, for the template\n  serializeData() {\n    if (!this.model && !this.collection) {\n      return {};\n    }\n\n    // If we have a model, we serialize that\n    if (this.model) {\n      return this.serializeModel();\n    }\n\n    // Otherwise, we serialize the collection,\n    // making it available under the `items` property\n    return {\n      items: this.serializeCollection()\n    };\n  },\n\n  // Prepares the special `model` property of a view\n  // for being displayed in the template. By default\n  // we simply clone the attributes. Override this if\n  // you need a custom transformation for your view's model\n  serializeModel() {\n    if (!this.model) { return {}; }\n    return _.clone(this.model.attributes);\n  },\n\n  // Serialize a collection by cloning each of\n  // its model's attributes\n  serializeCollection() {\n    if (!this.collection) { return {}; }\n    return this.collection.map(function(model) { return _.clone(model.attributes); });\n  },\n\n  // Render the view, defaulting to underscore.js templates.\n  // You can override this in your view definition to provide\n  // a very specific rendering for your view. In general, though,\n  // you should override the `Marionette.Renderer` object to\n  // change how Marionette renders views.\n  // Subsequent renders after the first will re-render all nested\n  // views.\n  render() {\n    this._ensureViewIsIntact();\n\n    this.triggerMethod('before:render', this);\n\n    // If this is not the first render call, then we need to\n    // re-initialize the `el` for each region\n    if (this._isRendered) {\n      this._reInitRegions();\n    }\n\n    this._renderTemplate();\n    this.bindUIElements();\n\n    this._isRendered = true;\n    this.triggerMethod('render', this);\n\n    return this;\n  },\n\n  // Internal method to render the template with the serialized data\n  // and template context via the `Marionette.Renderer` object.\n  _renderTemplate() {\n    var template = this.getTemplate();\n\n    // Allow template-less views\n    if (template === false) {\n      return;\n    }\n\n    // Add in entity data and template context\n    var data = this.mixinTemplateContext(this.serializeData());\n\n    // Render and add to el\n    var html = Renderer.render(template, data, this);\n    this.attachElContent(html);\n  },\n\n  // Get the template for this view\n  // instance. You can set a `template` attribute in the view\n  // definition or pass a `template: \"whatever\"` parameter in\n  // to the constructor options.\n  getTemplate() {\n    return this.getOption('template');\n  },\n\n  // Attaches the content of a given view.\n  // This method can be overridden to optimize rendering,\n  // or to render in a non standard way.\n  //\n  // For example, using `innerHTML` instead of `$el.html`\n  //\n  // ```js\n  // attachElContent(html) {\n  //   this.el.innerHTML = html;\n  //   return this;\n  // }\n  // ```\n  attachElContent(html) {\n    this.$el.html(html);\n\n    return this;\n  },\n\n  // called by ViewMixin destroy\n  _removeChildren() {\n    this.removeRegions();\n  },\n\n  _getImmediateChildren: function() {\n    return _.chain(this.getRegions())\n      .pluck('currentView')\n      .compact()\n      .value();\n  }\n});\n\n_.extend(View.prototype, ViewMixin, RegionsMixin);\n\nexport default View;\n","// Collection View\n// ---------------\n\nimport _                    from 'underscore';\nimport Backbone             from 'backbone';\nimport ChildViewContainer   from 'backbone.babysitter';\nimport MarionetteError      from './error';\nimport ViewMixin            from './mixins/view';\nimport { triggerMethodOn }  from './trigger-method';\nimport MonitorViewEvents    from './monitor-view-events';\n\n// A view that iterates over a Backbone.Collection\n// and renders an individual child view for each model.\nconst CollectionView = Backbone.View.extend({\n\n  // flag for maintaining the sorted order of the collection\n  sort: true,\n\n  // constructor\n  // option to pass `{sort: false}` to prevent the `CollectionView` from\n  // maintaining the sorted order of the collection.\n  // This will fallback onto appending childView's to the end.\n  //\n  // option to pass `{comparator: compFunction()}` to allow the `CollectionView`\n  // to use a custom sort order for the collection.\n  constructor(options) {\n    this.render = _.bind(this.render, this);\n\n    this._setOptions(options);\n\n    MonitorViewEvents(this);\n\n    this._initBehaviors();\n    this.once('render', this._initialEvents);\n    this._initChildViewStorage();\n    this._bufferedChildren = [];\n\n    Backbone.View.prototype.constructor.call(this, this.options);\n\n    this.delegateEntityEvents();\n  },\n\n  // Instead of inserting elements one by one into the page, it's much more performant to insert\n  // elements into a document fragment and then insert that document fragment into the page\n  _startBuffering() {\n    this._isBuffering = true;\n  },\n\n  _endBuffering() {\n    const shouldTriggerAttach = !!this._isAttached;\n\n    this._isBuffering = false;\n\n    if (shouldTriggerAttach) {\n      _.each(this._getImmediateChildren(), child => {\n        triggerMethodOn(child, 'before:attach', child);\n      });\n    }\n\n    this.attachBuffer(this, this._createBuffer());\n\n    if (shouldTriggerAttach) {\n      _.each(this._getImmediateChildren(), child => {\n        child._isAttached = true;\n        triggerMethodOn(child, 'attach', child);\n      });\n    }\n\n    this._bufferedChildren = [];\n  },\n\n  // Configured the initial events that the collection view binds to.\n  _initialEvents() {\n    if (this.collection) {\n      this.listenTo(this.collection, 'add', this._onCollectionAdd);\n      this.listenTo(this.collection, 'remove', this._onCollectionRemove);\n      this.listenTo(this.collection, 'reset', this.render);\n\n      if (this.getOption('sort')) {\n        this.listenTo(this.collection, 'sort', this._sortViews);\n      }\n    }\n  },\n\n  // Handle a child added to the collection\n  _onCollectionAdd(child, collection, opts) {\n    // `index` is present when adding with `at` since BB 1.2; indexOf fallback for < 1.2\n    let index = opts.at !== undefined && (opts.index || collection.indexOf(child));\n\n    // When filtered or when there is no initial index, calculate index.\n    if (this.getOption('filter') || index === false) {\n      index = _.indexOf(this._filteredSortedModels(index), child);\n    }\n\n    if (this._shouldAddChild(child, index)) {\n      this._destroyEmptyView();\n      const ChildView = this._getChildView(child);\n      this._addChild(child, ChildView, index);\n    }\n  },\n\n  // get the child view by model it holds, and remove it\n  _onCollectionRemove(model) {\n    const view = this.children.findByModel(model);\n    this._removeChildView(view);\n    this._checkEmpty();\n  },\n\n  // Render children views. Override this method to provide your own implementation of a\n  // render function for the collection view.\n  render() {\n    this._ensureViewIsIntact();\n    this.triggerMethod('before:render', this);\n    this._renderChildren();\n    this._isRendered = true;\n    this.triggerMethod('render', this);\n    return this;\n  },\n\n  // An efficient rendering used for filtering. Instead of modifying the whole DOM for the\n  // collection view, we are only adding or removing the related childrenViews.\n  setFilter(filter, {preventRender} = {}) {\n    const viewCanBeRendered = this._isRendered && !this._isDestroyed;\n    // The same filter or a `prevent` option won't render the filter.\n    // Nevertheless, a `prevent` option will modify the value.\n    if (!viewCanBeRendered || this.filter === filter) {\n      return;\n    }\n    if (!preventRender) {\n      this.triggerMethod('before:apply:filter', this);\n      const previousModels = this._filteredSortedModels();\n      this.filter = filter;\n      const models = this._filteredSortedModels();\n      this._applyModelDeltas(models, previousModels);\n      this.triggerMethod('apply:filter', this);\n    } else {\n      this.filter = filter;\n    }\n  },\n\n  // `removeFilter` is actually an alias for removing filters.\n  removeFilter(options) {\n    this.setFilter(null, options);\n  },\n\n  // Calculate and apply difference by cid between `models` and `previousModels`.\n  _applyModelDeltas(models, previousModels) {\n    const currentIds = {};\n    _.each(models, function(model, index) {\n      const addedChildNotExists = !this.children.findByModel(model);\n      if (addedChildNotExists) {\n        this._onCollectionAdd(model, this.collection, {at: index});\n      }\n      currentIds[model.cid] = true;\n    }, this);\n    _.each(previousModels, function(prevModel) {\n      const removedChildExists = !currentIds[prevModel.cid] && this.children.findByModel(prevModel);\n      if (removedChildExists) {\n        this._onCollectionRemove(prevModel);\n      }\n    }, this);\n  },\n\n  // Reorder DOM after sorting. When your element's rendering do not use their index,\n  // you can pass reorderOnSort: true to only reorder the DOM after a sort instead of\n  // rendering all the collectionView.\n  reorder() {\n    const children = this.children;\n    const models = this._filteredSortedModels();\n    const anyModelsAdded = _.some(models, function(model) {\n      return !children.findByModel(model);\n    });\n\n    // If there are any new models added due to filtering we need to add child views,\n    // so render as normal.\n    if (anyModelsAdded) {\n      this.render();\n    } else {\n      // Get the DOM nodes in the same order as the models.\n      const elsToReorder = _.map(models, function(model, index) {\n        const view = children.findByModel(model);\n        view._index = index;\n        return view.el;\n      });\n\n      // Find the views that were children before but aren't in this new ordering.\n      const filteredOutViews = children.filter(function(view) {\n        return !_.contains(elsToReorder, view.el);\n      });\n\n      this.triggerMethod('before:reorder', this);\n\n      // Since append moves elements that are already in the DOM, appending the elements\n      // will effectively reorder them.\n      this._appendReorderedChildren(elsToReorder);\n\n      // remove any views that have been filtered out\n      _.each(filteredOutViews, this._removeChildView, this);\n      this._checkEmpty();\n\n      this.triggerMethod('reorder', this);\n    }\n  },\n\n  // Render view after sorting. Override this method to change how the view renders\n  // after a `sort` on the collection.\n  resortView() {\n    if (this.getOption('reorderOnSort')) {\n      this.reorder();\n    } else {\n      this._renderChildren();\n    }\n  },\n\n  // Internal method. This checks for any changes in the order of the collection.\n  // If the index of any view doesn't match, it will render.\n  _sortViews() {\n    const models = this._filteredSortedModels();\n\n    // check for any changes in sort order of views\n    const orderChanged = _.find(models, function(item, index) {\n      const view = this.children.findByModel(item);\n      return !view || view._index !== index;\n    }, this);\n\n    if (orderChanged) {\n      this.resortView();\n    }\n  },\n\n  // Internal reference to what index a `emptyView` is.\n  _emptyViewIndex: -1,\n\n  // Internal method. Separated so that CompositeView can append to the childViewContainer\n  // if necessary\n  _appendReorderedChildren(children) {\n    this.$el.append(children);\n  },\n\n  // Internal method. Separated so that CompositeView can have more control over events\n  // being triggered, around the rendering process\n  _renderChildren() {\n    this._destroyEmptyView();\n    this._destroyChildren({checkEmpty: false});\n\n    const models = this._filteredSortedModels();\n    if (this.isEmpty(this.collection, {processedModels: models})) {\n      this._showEmptyView();\n    } else {\n      this.triggerMethod('before:render:children', this);\n      this._startBuffering();\n      this._showCollection(models);\n      this._endBuffering();\n      this.triggerMethod('render:children', this);\n    }\n  },\n\n  // Internal method to loop through collection and show each child view.\n  _showCollection(models) {\n    _.each(models, function(child, index) {\n      const ChildView = this._getChildView(child);\n      this._addChild(child, ChildView, index);\n    }, this);\n  },\n\n  // Allow the collection to be sorted by a custom view comparator\n  _filteredSortedModels(addedAt) {\n    if (!this.collection) { return []; }\n\n    const viewComparator = this.getViewComparator();\n    let models = this.collection.models;\n    addedAt = Math.min(Math.max(addedAt, 0), models.length - 1);\n\n    if (viewComparator) {\n      let addedModel;\n      // Preserve `at` location, even for a sorted view\n      if (addedAt) {\n        addedModel = models[addedAt];\n        models = models.slice(0, addedAt).concat(models.slice(addedAt + 1));\n      }\n      models = this._sortModelsBy(models, viewComparator);\n      if (addedModel) {\n        models.splice(addedAt, 0, addedModel);\n      }\n    }\n\n    // Filter after sorting in case the filter uses the index\n    models = this._filterModels(models);\n\n    return models;\n  },\n\n  // Filter an array of models, if a filter exists\n  _filterModels(models) {\n    if (this.getOption('filter')) {\n      models = _.filter(models, function(model, index) {\n        return this._shouldAddChild(model, index);\n      }, this);\n    }\n    return models;\n  },\n\n  _sortModelsBy(models, comparator) {\n    if (typeof comparator === 'string') {\n      return _.sortBy(models, function(model) {\n        return model.get(comparator);\n      }, this);\n    } else if (comparator.length === 1) {\n      return _.sortBy(models, comparator, this);\n    } else {\n      return models.sort(_.bind(comparator, this));\n    }\n  },\n\n  // Internal method to show an empty view in place of a collection of child views,\n  // when the collection is empty\n  _showEmptyView() {\n    const EmptyView = this.getEmptyView();\n\n    if (EmptyView && !this._showingEmptyView) {\n      this._showingEmptyView = true;\n\n      const model = new Backbone.Model();\n      let emptyViewOptions =\n        this.getOption('emptyViewOptions') || this.getOption('childViewOptions');\n      if (_.isFunction(emptyViewOptions)) {\n        emptyViewOptions = emptyViewOptions.call(this, model, this._emptyViewIndex);\n      }\n\n      const view = this._buildChildView(model, EmptyView, emptyViewOptions);\n\n      this.triggerMethod('before:render:empty', this, view);\n      this._addChildView(view, 0);\n      this.triggerMethod('render:empty', this, view);\n\n      view._parent = this;\n    }\n  },\n\n  // Internal method to destroy an existing emptyView instance if one exists. Called when\n  // a collection view has been rendered empty, and then a child is added to the collection.\n  _destroyEmptyView() {\n    if (this._showingEmptyView) {\n      this.triggerMethod('before:remove:empty', this);\n\n      this._destroyChildren();\n      delete this._showingEmptyView;\n\n      this.triggerMethod('remove:empty', this);\n    }\n  },\n\n  // Retrieve the empty view class\n  getEmptyView() {\n    return this.getOption('emptyView');\n  },\n\n  // Retrieve the `childView` class, either from `this.options.childView` or from\n  // the `childView` in the object definition. The \"options\" takes precedence.\n  // The `childView` property can be either a view class or a function that\n  // returns a view class. If it is a function, it will receive the model that\n  // will be passed to the view instance (created from the returned view class)\n  _getChildView(child) {\n    const childView = this.getOption('childView');\n\n    if (!childView) {\n      throw new MarionetteError({\n        name: 'NoChildViewError',\n        message: 'A \"childView\" must be specified'\n      });\n    }\n\n    // first check if the `childView` is a view class (the common case)\n    // then check if it's a function (which we assume that returns a view class)\n    if (childView.prototype instanceof Backbone.View || childView === Backbone.View) {\n      return childView;\n    } else if (_.isFunction(childView)) {\n      return childView.call(this, child);\n    } else {\n      throw new MarionetteError({\n        name: 'InvalidChildViewError',\n        message: '\"childView\" must be a view class or a function that returns a view class'\n      });\n    }\n  },\n\n  // Render the child's view and add it to the HTML for the collection view at a given index.\n  // This will also update the indices of later views in the collection in order to keep the\n  // children in sync with the collection.\n  _addChild(child, ChildView, index) {\n    const childViewOptions = this.getValue(this.getOption('childViewOptions'), child, index);\n\n    const view = this._buildChildView(child, ChildView, childViewOptions);\n\n    // increment indices of views after this one\n    this._updateIndices(view, true, index);\n\n    this.triggerMethod('before:add:child', this, view);\n    this._addChildView(view, index);\n    this.triggerMethod('add:child', this, view);\n\n    view._parent = this;\n\n    return view;\n  },\n\n  // Internal method. This decrements or increments the indices of views after the added/removed\n  // view to keep in sync with the collection.\n  _updateIndices(view, increment, index) {\n    if (!this.getOption('sort')) {\n      return;\n    }\n\n    if (increment) {\n      // assign the index to the view\n      view._index = index;\n    }\n\n    // update the indexes of views after this one\n    this.children.each(function(laterView) {\n      if (laterView._index >= view._index) {\n        laterView._index += increment ? 1 : -1;\n      }\n    });\n  },\n\n  // Internal Method. Add the view to children and render it at the given index.\n  _addChildView(view, index) {\n    // Only trigger attach if already attached and not buffering,\n    // otherwise _endBuffering() or Region#show() handles this.\n    const shouldTriggerAttach = !this._isBuffering && this._isAttached;\n\n    // set up the child view event forwarding\n    this._proxyChildEvents(view);\n\n    // Store the child view itself so we can properly remove and/or destroy it later\n    this.children.add(view);\n\n    if (!view.supportsRenderLifecycle) {\n      triggerMethodOn(view, 'before:render', view);\n    }\n\n    // Render view\n    view.render();\n\n    if (!view.supportsRenderLifecycle) {\n      view._isRendered = true;\n      triggerMethodOn(view, 'render', view);\n    }\n\n    if (shouldTriggerAttach) {\n      triggerMethodOn(view, 'before:attach', view);\n    }\n\n    // Attach view\n    this.attachHtml(this, view, index);\n\n    if (shouldTriggerAttach) {\n      view._isAttached = true;\n      triggerMethodOn(view, 'attach', view);\n    }\n  },\n\n  // Build a `childView` for a model in the collection.\n  _buildChildView(child, ChildViewClass, childViewOptions) {\n    const options = _.extend({model: child}, childViewOptions);\n    const childView = new ChildViewClass(options);\n    MonitorViewEvents(childView);\n    return childView;\n  },\n\n  // Remove the child view and destroy it. This function also updates the indices of later views\n  // in the collection in order to keep the children in sync with the collection.\n  _removeChildView(view) {\n    if (!view) { return view; }\n\n    this.triggerMethod('before:remove:child', this, view);\n\n    if (!view.supportsDestroyLifecycle) {\n      triggerMethodOn(view, 'before:destroy', view);\n    }\n\n    // call 'destroy' or 'remove', depending on which is found\n    if (view.destroy) {\n      view.destroy();\n    } else {\n      const shouldTriggerDetach = !!view._isAttached;\n\n      if (shouldTriggerDetach) {\n        triggerMethodOn(view, 'before:detach', view);\n      }\n\n      view.remove();\n\n      if (shouldTriggerDetach) {\n        view._isAttached = false;\n        triggerMethodOn(view, 'detach', view);\n      }\n\n      view._isDestroyed = true;\n    }\n\n    if (!view.supportsDestroyLifecycle) {\n      triggerMethodOn(view, 'destroy', view);\n    }\n\n    delete view._parent;\n    this.stopListening(view);\n    this.children.remove(view);\n    this.triggerMethod('remove:child', this, view);\n\n    // decrement the index of views after this one\n    this._updateIndices(view, false);\n\n    return view;\n  },\n\n  // check if the collection is empty or optionally whether an array of pre-processed models is empty\n  isEmpty(collection, options) {\n    let models;\n    if (_.result(options, 'processedModels')) {\n      models = options.processedModels;\n    } else {\n      models = this.collection ? this.collection.models : [];\n      models = this._filterModels(models);\n    }\n    return models.length === 0;\n  },\n\n  // If empty, show the empty view\n  _checkEmpty() {\n    if (this.isEmpty(this.collection)) {\n      this._showEmptyView();\n    }\n  },\n\n  // You might need to override this if you've overridden attachHtml\n  attachBuffer(collectionView, buffer) {\n    collectionView.$el.append(buffer);\n  },\n\n  // Create a fragment buffer from the currently buffered children\n  _createBuffer() {\n    const elBuffer = document.createDocumentFragment();\n    _.each(this._bufferedChildren, function(b) {\n      elBuffer.appendChild(b.el);\n    });\n    return elBuffer;\n  },\n\n  // Append the HTML to the collection's `el`. Override this method to do something other\n  // than `.append`.\n  attachHtml(collectionView, childView, index) {\n    if (collectionView._isBuffering) {\n      // buffering happens on reset events and initial renders\n      // in order to reduce the number of inserts into the\n      // document, which are expensive.\n      collectionView._bufferedChildren.splice(index, 0, childView);\n    } else {\n      // If we've already rendered the main collection, append\n      // the new child into the correct order if we need to. Otherwise\n      // append to the end.\n      if (!collectionView._insertBefore(childView, index)) {\n        collectionView._insertAfter(childView);\n      }\n    }\n  },\n\n  // Internal method. Check whether we need to insert the view into the correct position.\n  _insertBefore(childView, index) {\n    let currentView;\n    const findPosition = this.getOption('sort') && (index < this.children.length - 1);\n    if (findPosition) {\n      // Find the view after this one\n      currentView = this.children.find(function(view) {\n        return view._index === index + 1;\n      });\n    }\n\n    if (currentView) {\n      currentView.$el.before(childView.el);\n      return true;\n    }\n\n    return false;\n  },\n\n  // Internal method. Append a view to the end of the $el\n  _insertAfter(childView) {\n    this.$el.append(childView.el);\n  },\n\n  // Internal method to set up the `children` object for storing all of the child views\n  _initChildViewStorage() {\n    this.children = new ChildViewContainer();\n  },\n\n  // called by ViewMixin destroy\n  _removeChildren() {\n    this._destroyChildren({checkEmpty: false});\n  },\n\n  // Destroy the child views that this collection view is holding on to, if any\n  _destroyChildren({checkEmpty} = {}) {\n    this.triggerMethod('before:destroy:children', this);\n    const shouldCheckEmpty = checkEmpty !== false;\n    const childViews = this.children.map(_.identity);\n\n    this.children.each(this._removeChildView, this);\n\n    if (shouldCheckEmpty) {\n      this._checkEmpty();\n    }\n\n    this.triggerMethod('destroy:children', this);\n    return childViews;\n  },\n\n  // Return true if the given child should be shown. Return false otherwise.\n  // The filter will be passed (child, index, collection), where\n  //  'child' is the given model\n  //  'index' is the index of that model in the collection\n  //  'collection' is the collection referenced by this CollectionView\n  _shouldAddChild(child, index) {\n    const filter = this.getOption('filter');\n    return !_.isFunction(filter) || filter.call(this, child, index, this.collection);\n  },\n\n  // Set up the child view event forwarding. Uses a \"childview:\" prefix in front of all forwarded events.\n  _proxyChildEvents(view) {\n    const prefix = this.getOption('childViewEventPrefix');\n\n    // Forward all child view events through the parent,\n    // prepending \"childview:\" to the event name\n    this.listenTo(view, 'all', function(eventName, ...args) {\n\n      const childEventName = prefix + ':' + eventName;\n\n      const childViewEvents = this.normalizeMethods(this._childViewEvents);\n\n      // call collectionView childViewEvent if defined\n      if (typeof childViewEvents !== 'undefined' && _.isFunction(childViewEvents[eventName])) {\n        childViewEvents[eventName].apply(this, args);\n      }\n\n      // use the parent view's proxyEvent handlers\n      var childViewTriggers = this._childViewTriggers;\n\n      // Call the event with the proxy name on the parent layout\n      if (childViewTriggers && _.isString(childViewTriggers[eventName])) {\n        this.triggerMethod(childViewTriggers[eventName], ...args);\n      }\n\n      this.triggerMethod(childEventName, ...args);\n    });\n  },\n\n  _getImmediateChildren() {\n    return _.values(this.children._views);\n  },\n\n  getViewComparator() {\n    return this.getOption('viewComparator');\n  }\n});\n\n_.extend(CollectionView.prototype, ViewMixin);\n\nexport default CollectionView;\n","// Composite View\n// --------------\n\nimport _               from 'underscore';\nimport Backbone        from 'backbone';\nimport deprecate       from './utils/deprecate';\nimport getValue        from './utils/getValue';\nimport getOption       from './utils/getOption';\nimport MarionetteError from './error';\nimport CollectionView  from './collection-view';\nimport View            from './view';\n\n// Used for rendering a branch-leaf, hierarchical structure.\n// Extends directly from CollectionView and also renders an\n// a child view as `modelView`, for the top leaf\nvar CompositeView = CollectionView.extend({\n\n  // Setting up the inheritance chain which allows changes to\n  // Marionette.CollectionView.prototype.constructor which allows overriding\n  // option to pass '{sort: false}' to prevent the CompositeView from\n  // maintaining the sorted order of the collection.\n  // This will fallback onto appending childView's to the end.\n  constructor() {\n    deprecate('CompositeView is deprecated. Convert to View at your earliest convenience');\n    CollectionView.prototype.constructor.apply(this, arguments);\n  },\n\n  // Configured the initial events that the composite view\n  // binds to. Override this method to prevent the initial\n  // events, or to add your own initial events.\n  _initialEvents() {\n\n    // Bind only after composite view is rendered to avoid adding child views\n    // to nonexistent childViewContainer\n\n    if (this.collection) {\n      this.listenTo(this.collection, 'add', this._onCollectionAdd);\n      this.listenTo(this.collection, 'remove', this._onCollectionRemove);\n      this.listenTo(this.collection, 'reset', this.renderChildren);\n\n      if (this.getOption('sort')) {\n        this.listenTo(this.collection, 'sort', this._sortViews);\n      }\n    }\n  },\n\n  // Retrieve the `childView` to be used when rendering each of\n  // the items in the collection. The default is to return\n  // `this.childView` or Marionette.CompositeView if no `childView`\n  // has been defined. As happens in CollectionView, `childView` can\n  // be a function (which should return a view class).\n  _getChildView(child) {\n    var childView = this.getOption('childView');\n\n    // for CompositeView, if `childView` is not specified, we'll get the same\n    // composite view class rendered for each child in the collection\n    // then check if the `childView` is a view class (the common case)\n    // finally check if it's a function (which we assume that returns a view class)\n    if (!childView) {\n      return this.constructor;\n    } else if (childView.prototype instanceof Backbone.View || childView === Backbone.View) {\n      return childView;\n    } else if (_.isFunction(childView)) {\n      return childView.call(this, child);\n    } else {\n      throw new MarionetteError({\n        name: 'InvalidChildViewError',\n        message: '\"childView\" must be a view class or a function that returns a view class'\n      });\n    }\n\n  },\n\n  // Return the serialized model\n  serializeData() {\n    return this.serializeModel();\n  },\n\n  // Renders the model and the collection.\n  render() {\n    this._ensureViewIsIntact();\n    this._isRendering = true;\n    this.resetChildViewContainer();\n\n    this.triggerMethod('before:render', this);\n\n    this._renderTemplate();\n    this.bindUIElements();\n    this.renderChildren();\n\n    this._isRendering = false;\n    this._isRendered = true;\n    this.triggerMethod('render', this);\n    return this;\n  },\n\n  renderChildren() {\n    if (this._isRendered || this._isRendering) {\n      CollectionView.prototype._renderChildren.call(this);\n    }\n  },\n\n  // You might need to override this if you've overridden attachHtml\n  attachBuffer(compositeView, buffer) {\n    var $container = this.getChildViewContainer(compositeView);\n    $container.append(buffer);\n  },\n\n  // Internal method. Append a view to the end of the $el.\n  // Overidden from CollectionView to ensure view is appended to\n  // childViewContainer\n  _insertAfter(childView) {\n    var $container = this.getChildViewContainer(this, childView);\n    $container.append(childView.el);\n  },\n\n  // Internal method. Append reordered childView'.\n  // Overidden from CollectionView to ensure reordered views\n  // are appended to childViewContainer\n  _appendReorderedChildren(children) {\n    var $container = this.getChildViewContainer(this);\n    $container.append(children);\n  },\n\n  // Internal method to ensure an `$childViewContainer` exists, for the\n  // `attachHtml` method to use.\n  getChildViewContainer(containerView, childView) {\n    if (!!containerView.$childViewContainer) {\n      return containerView.$childViewContainer;\n    }\n\n    var container;\n    var childViewContainer = getOption.call(containerView, 'childViewContainer');\n    if (childViewContainer) {\n\n      var selector = getValue.call(containerView, childViewContainer);\n\n      if (selector.charAt(0) === '@' && containerView.ui) {\n        container = containerView.ui[selector.substr(4)];\n      } else {\n        container = containerView.$(selector);\n      }\n\n      if (container.length <= 0) {\n        throw new MarionetteError({\n          name: 'ChildViewContainerMissingError',\n          message: 'The specified \"childViewContainer\" was not found: ' + containerView.childViewContainer\n        });\n      }\n\n    } else {\n      container = containerView.$el;\n    }\n\n    containerView.$childViewContainer = container;\n    return container;\n  },\n\n  // Internal method to reset the `$childViewContainer` on render\n  resetChildViewContainer() {\n    if (this.$childViewContainer) {\n      this.$childViewContainer = undefined;\n    }\n  }\n});\n\n// To prevent duplication but allow the best View organization\n// Certain View methods are mixed directly into the deprecated CompositeView\nvar MixinFromView = _.pick(View.prototype, 'serializeModel', 'getTemplate', '_renderTemplate', 'attachElContent');\n_.extend(CompositeView.prototype, MixinFromView);\n\nexport default CompositeView;\n","// Behavior\n// --------\n\n// A Behavior is an isolated set of DOM /\n// user interactions that can be mixed into any View.\n// Behaviors allow you to blackbox View specific interactions\n// into portable logical chunks, keeping your views simple and your code DRY.\n\nimport _                  from 'underscore';\nimport MarionetteObject   from './object';\nimport DelegateEntityEventsMixin      from './mixins/delegate-entity-events';\nimport TriggersMixin      from './mixins/triggers';\nimport UIMixin            from './mixins/ui';\nimport getUniqueEventName from './utils/getUniqueEventName';\n\nvar Behavior = MarionetteObject.extend({\n  cidPrefix: 'mnb',\n\n  constructor: function(options, view) {\n    // Setup reference to the view.\n    // this comes in handle when a behavior\n    // wants to directly talk up the chain\n    // to the view.\n    this.view = view;\n    this.defaults = _.clone(_.result(this, 'defaults', {}));\n    this._setOptions(this.defaults, options);\n    // Construct an internal UI hash using\n    // the behaviors UI hash and then the view UI hash.\n    // This allows the user to use UI hash elements\n    // defined in the parent view as well as those\n    // defined in the given behavior.\n    // This order will help the reuse and share of a behavior\n    // between multiple views, while letting a view override a\n    // selector under an UI key.\n    this.ui = _.extend({}, _.result(this, 'ui'), _.result(view, 'ui'));\n\n    MarionetteObject.apply(this, arguments);\n  },\n\n  // proxy behavior $ method to the view\n  // this is useful for doing jquery DOM lookups\n  // scoped to behaviors view.\n  $: function() {\n    return this.view.$.apply(this.view, arguments);\n  },\n\n  // Stops the behavior from listening to events.\n  // Overrides Object#destroy to prevent additional events from being triggered.\n  destroy: function() {\n    this.stopListening();\n\n    return this;\n  },\n\n  proxyViewProperties: function() {\n    this.$el = this.view.$el;\n    this.el = this.view.el;\n\n    return this;\n  },\n\n  bindUIElements: function() {\n    this._bindUIElements();\n\n    return this;\n  },\n\n  unbindUIElements: function() {\n    this._unbindUIElements();\n\n    return this;\n  },\n\n  getUI: function(name) {\n    this.view._ensureViewIsIntact();\n    return this._getUI(name);\n  },\n\n  // Handle `modelEvents`, and `collectionEvents` configuration\n  delegateEntityEvents: function() {\n    this._delegateEntityEvents(this.view.model, this.view.collection);\n\n    return this;\n  },\n\n  undelegateEntityEvents: function() {\n    this._undelegateEntityEvents(this.view.model, this.view.collection);\n\n    return this;\n  },\n\n  getEvents: function() {\n    // Normalize behavior events hash to allow\n    // a user to use the @ui. syntax.\n    var behaviorEvents = this.normalizeUIKeys(_.result(this, 'events'));\n\n    // binds the handler to the behavior and builds a unique eventName\n    return _.reduce(behaviorEvents, function(events, behaviorHandler, key) {\n      if (!_.isFunction(behaviorHandler)) {\n        behaviorHandler = this[behaviorHandler];\n      }\n      if (!behaviorHandler) { return; }\n      key = getUniqueEventName(key);\n      events[key] = _.bind(behaviorHandler, this);\n      return events;\n    } , {}, this);\n  },\n\n  // Internal method to build all trigger handlers for a given behavior\n  getTriggers: function() {\n    if (!this.triggers) { return; }\n\n    // Normalize behavior triggers hash to allow\n    // a user to use the @ui. syntax.\n    var behaviorTriggers = this.normalizeUIKeys(_.result(this, 'triggers'));\n\n    return this._getViewTriggers(this.view, behaviorTriggers);\n  }\n\n});\n\n_.extend(Behavior.prototype, DelegateEntityEventsMixin, TriggersMixin, UIMixin);\n\nexport default Behavior;\n","import Backbone           from 'backbone';\nimport {version}          from '../package.json';\n\nimport proxy              from './utils/_proxy';\nimport extend             from './utils/extend';\nimport isNodeAttached     from './utils/isNodeAttached';\nimport mergeOptions       from './utils/mergeOptions';\nimport getOption          from './utils/getOption';\nimport normalizeMethods   from './utils/normalizeMethods';\nimport deprecate          from './utils/deprecate';\n\nimport MonitorViewEvents  from './monitor-view-events';\nimport MarionetteObject   from './object';\nimport Renderer           from './renderer';\nimport TemplateCache      from './template-cache';\nimport View               from './view';\nimport CollectionView     from './collection-view';\nimport CompositeView      from './composite-view';\nimport Behavior           from './behavior';\nimport Region             from './region';\nimport Application        from './application';\nimport AppRouter          from './app-router';\nimport MarionetteError    from './error';\n\nimport behaviorsLookup    from './config/behaviors-lookup';\n\nimport {\n  FEATURES,\n  isEnabled,\n  setEnabled\n} from './config/features';\n\nimport {\n  bindEntityEvents,\n  unbindEntityEvents\n} from './bind-entity-events';\n\nimport {\n  bindRadioRequests,\n  unbindRadioRequests\n} from './bind-radio-requests';\n\nimport {\n  triggerMethod,\n  triggerMethodOn,\n  triggerMethodMany\n} from './trigger-method';\n\nvar previousMarionette = Backbone.Marionette;\nvar Marionette = Backbone.Marionette = {};\n\n// This allows you to run multiple instances of Marionette on the same\n// webapp. After loading the new version, call `noConflict()` to\n// get a reference to it. At the same time the old version will be\n// returned to Backbone.Marionette.\nMarionette.noConflict = function() {\n  Backbone.Marionette = previousMarionette;\n  return this;\n};\n\n// Utilities\nMarionette.bindEntityEvents = proxy(bindEntityEvents);\nMarionette.unbindEntityEvents = proxy(unbindEntityEvents);\nMarionette.bindRadioEvents = proxy(bindEntityEvents);\nMarionette.unbindRadioEvents = proxy(unbindEntityEvents);\nMarionette.bindRadioRequests = proxy(bindRadioRequests);\nMarionette.unbindRadioRequests = proxy(unbindRadioRequests);\nMarionette.mergeOptions = proxy(mergeOptions);\nMarionette.getOption = proxy(getOption);\nMarionette.normalizeMethods = proxy(normalizeMethods);\nMarionette.extend = extend;\nMarionette.isNodeAttached = isNodeAttached;\nMarionette.deprecate = deprecate;\nMarionette.triggerMethod = proxy(triggerMethod);\nMarionette.triggerMethodOn = triggerMethodOn;\nMarionette.triggerMethodMany = triggerMethodMany;\nMarionette.isEnabled = isEnabled;\nMarionette.setEnabled = setEnabled;\nMarionette.MonitorViewEvents = MonitorViewEvents;\n\nMarionette.Behaviors = {};\nMarionette.Behaviors.behaviorsLookup = behaviorsLookup;\n\n// Classes\nMarionette.Application = Application;\nMarionette.AppRouter = AppRouter;\nMarionette.Renderer = Renderer;\nMarionette.TemplateCache = TemplateCache;\nMarionette.View = View;\nMarionette.CollectionView = CollectionView;\nMarionette.CompositeView = CompositeView;\nMarionette.Behavior = Behavior;\nMarionette.Region = Region;\nMarionette.Error = MarionetteError;\nMarionette.Object = MarionetteObject;\n\n// Configuration\nMarionette.DEV_MODE = false;\nMarionette.FEATURES = FEATURES;\nMarionette.VERSION = version;\n\nexport default Marionette;\n"],"sourceRoot":"/source/"}